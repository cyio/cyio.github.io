import{r as n,o as s,c as a,a as p,w as t,F as e,b as o,d as c}from"./app.26466922.js";const l={},u=p("h1",{id:"闭包",tabindex:"-1"},[p("a",{class:"header-anchor",href:"#闭包","aria-hidden":"true"},"#"),o(" 闭包")],-1),r={class:"table-of-contents"},i=o("通用定义"),k=o("JS 中定义"),b=o("应用"),m=o("内存管理"),d=p("blockquote",null,[p("p",null,"函数闭包、词法闭包")],-1),f=p("h2",{id:"通用定义",tabindex:"-1"},[p("a",{class:"header-anchor",href:"#通用定义","aria-hidden":"true"},"#"),o(" 通用定义")],-1),h=p("p",null,"函数的实例 instance of function",-1),v=p("p",null,[o("实现上，一个保存"),p("strong",null,"函数"),o("及其"),p("strong",null,"环境"),o("的记录。环境包括自由变量（在函数内部访问环境）和本地变量的映射，创建时即确定。与一般函数区别，在对自由变量的访问。")],-1),w=p("p",null,"词法环境，是作用域内所有绑定变量的集合",-1),g={href:"https://en.wikipedia.org/wiki/Closure_(computer_programming)",target:"_blank",rel:"noopener noreferrer"},y=o("Closure (computer programming) - Wikipedia"),_=p("h2",{id:"js-中定义",tabindex:"-1"},[p("a",{class:"header-anchor",href:"#js-中定义","aria-hidden":"true"},"#"),o(" JS 中定义")],-1),j=p("p",null,[p("s",null,"闭包简单说，是指函数能访问所在(上下文)环境，而函数内部对外部环境来说不可见。（比较接近 MDN ，函数和它声明所在环境的结合）")],-1),S=p("p",null,"闭包是一个函数与其本身所被定义的词法环境的结合。",-1),x=p("p",null,"[[Environment]] 创建时确定",-1),J=p("blockquote",null,[p("p",null,"规定了语法分析器解析嵌套函数内的变量时，向其外部作用域查找变量定义。 闭包的核心就是内部函数可以引用外部函数的参数和变量，通过返回函数来扩大函数的作用域， 有什么用呢，在函数外部引用函数内部变量，可以通过闭包实现。闭包的用处往往是在模块封装的时候。可以将模块内部公有部分暴露出来")],-1),E=p("blockquote",null,[p("p",null,"避免在循环中创建函数，它可能只会带来无谓的计算，还会混淆。")],-1),q={href:"https://javascript.info/closure",target:"_blank",rel:"noopener noreferrer"},z=o("Variable scope, closure"),D={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/A_re-introduction_to_JavaScript",target:"_blank",rel:"noopener noreferrer"},M=o("A re-introduction to JavaScript (JS tutorial) - JavaScript | MDN"),N={href:"https://stackoverflow.com/questions/111102/how-do-javascript-closures-work",target:"_blank",rel:"noopener noreferrer"},O=o("高赞答案，解释、使用场景最清晰 function - How do JavaScript closures work? - Stack Overflow"),A=c('<p>hold</p><p>close over 遮盖、封闭</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 写循环时的迭代变量，期望是在循环里的函数中保持，实际访问的是其最终值，如`i &lt; 3`，终值是 3，不是内部的最大值 2</span>\n<span class="token comment">// 本质问题：变量值在跨作用域时，没有保持</span>\n<span class="token keyword">var</span> i\n<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nodes<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  nodes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">alert</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token comment">// 函数内，又一层作用域，取i要向上一层取，即i的计算终值</span>\n    <span class="token comment">// 要解决这个问题，即保持i，使用外移的高阶函数通过传参绑定i</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 正确做法</span>\n<span class="token keyword">var</span> <span class="token function-variable function">badd_the_handlers</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nodes</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 事件处理函数外移</span>\n  <span class="token keyword">var</span> <span class="token function-variable function">helper</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">alert</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">var</span> i\n  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nodes<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    nodes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token function">helper</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\ninput <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">&#39;input&#39;</span><span class="token punctuation">)</span>\n<span class="token function">badd_the_handlers</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 另一个例子</span>\n<span class="token keyword">var</span> funcs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n<span class="token keyword">var</span> <span class="token function-variable function">rt</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 这里 i 是形式参数</span>\n  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> i\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ES6 解决是把 var 简单换为 let</span>\n  <span class="token comment">// funcs.push(rt(i)) // ES5 通过函数参数传递，实现跨作用域保持</span>\n  funcs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> i\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\nfuncs<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">f</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 将在打印10数字10次</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// #3</span>\n<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token comment">// const fn = (i) =&gt; { // lint 会避免同名</span>\n<span class="token comment">//    return () =&gt; console.log(i)</span>\n<span class="token comment">// }</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 定义时 capture 的是全局的 i，而 i 是变量，函数执行时 for 运算完成，i 是 10</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token comment">// a[i] = fn(i)</span>\n<span class="token punctuation">}</span>\n\ni <span class="token operator">=</span> <span class="token number">7</span>\na<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 使用闭包后，返回的函数，直接访问参数 6，而不再是 i</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div>',5),C={href:"https://zhuanlan.zhihu.com/p/25855075?hmsr=toutiao.io&utm_medium=toutiao.io&utm_source=toutiao.io",target:"_blank",rel:"noopener noreferrer"},L=o("破解前端面试（80% 应聘者不及格系列）：从 闭包说起"),W=c('<h2 id="应用" tabindex="-1"><a class="header-anchor" href="#应用" aria-hidden="true">#</a> 应用</h2><ul><li>react hooks return fn</li></ul><h2 id="内存管理" tabindex="-1"><a class="header-anchor" href="#内存管理" aria-hidden="true">#</a> 内存管理</h2><ol><li>闭包会引起内存泄露？</li></ol><p>先问，为什么我们要使用闭包？一种场景是我们主动把变量封闭在闭包中，以便后续调用，这种做法与把变量放到全局作用域对内存的影响是一致的。（所以，不一定）</p><ol start="2"><li>什么情况下容易出现内存泄漏？</li></ol><p>闭包作用域中包含着一些 DOM 节点，由于垃圾回收机制的设计问题，如果对象之间形成循环引用，那么这些对象便无法回收。</p><ol start="3"><li>如何解决呢？</li></ol><p>只需要把循环引用中的变量设为 null，切断引用连接即可。</p>',9),B=o("对象、函数相互持有 "),F={href:"https://www.jianshu.com/p/a484ceb251ff",target:"_blank",rel:"noopener noreferrer"},H=o("js循环引用引起的内存泄漏示例 - 简书");l.render=function(o,c){const l=n("RouterLink"),R=n("OutboundLink");return s(),a(e,null,[u,p("nav",r,[p("ul",null,[p("li",null,[p(l,{to:"#通用定义"},{default:t((()=>[i])),_:1})]),p("li",null,[p(l,{to:"#js-中定义"},{default:t((()=>[k])),_:1})]),p("li",null,[p(l,{to:"#应用"},{default:t((()=>[b])),_:1})]),p("li",null,[p(l,{to:"#内存管理"},{default:t((()=>[m])),_:1})])])]),d,f,h,v,w,p("p",null,[p("a",g,[y,p(R)])]),_,j,S,x,J,E,p("p",null,[p("a",q,[z,p(R)]),p("a",D,[M,p(R)]),p("a",N,[O,p(R)])]),A,p("p",null,[p("a",C,[L,p(R)])]),W,p("p",null,[B,p("a",F,[H,p(R)])])],64)};export default l;
