import{r as n,o as e,c as a,a as s,w as t,F as l,b as o,d as i}from"./app.0e74f851.js";const r={},p=s("h1",{id:"单元测试",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#单元测试","aria-hidden":"true"},"#"),o(" 单元测试")],-1),c={class:"table-of-contents"},u=o("关于"),d=o("why"),h=o("how"),b=o("与端到端测试比较"),m=o("Jest"),g=o("eslint"),k=o("运行测试"),f=o("测试一个文件"),v=o("测试覆盖率"),x=o("常用断言"),j=o("timer mock / 异步代码"),w=o("Vue 组件测试"),y=i('<h2 id="关于" tabindex="-1"><a class="header-anchor" href="#关于" aria-hidden="true">#</a> 关于</h2><h3 id="why" tabindex="-1"><a class="header-anchor" href="#why" aria-hidden="true">#</a> why</h3><ul><li>尽早发现代码缺陷，提高代码质量</li><li>有信心地重构代码</li></ul><h3 id="how" tabindex="-1"><a class="header-anchor" href="#how" aria-hidden="true">#</a> how</h3><ul><li>成本收益权衡，采用哪种测试？</li></ul><h2 id="与端到端测试比较" tabindex="-1"><a class="header-anchor" href="#与端到端测试比较" aria-hidden="true">#</a> 与端到端测试比较</h2><table><thead><tr><th></th><th>Unit/Integration</th><th>E2E</th></tr></thead><tbody><tr><td>范围</td><td>最小可测试单元/单元集成</td><td>整体</td></tr><tr><td>环境</td><td>Node</td><td>Browser</td></tr><tr><td>框架</td><td>Jest/Mocha</td><td>Cypress/Nightwatch</td></tr><tr><td>编写角色</td><td>开发</td><td>测试</td></tr><tr><td>优点</td><td>容易编写，隔离，便于定位修复</td><td>模拟用户、真实</td></tr><tr><td>缺点</td><td>无法保证整体工作如何</td><td>编写、维护成本高，反馈滞后</td></tr></tbody></table><p><img src="https://2.bp.blogspot.com/-YTzv_O4TnkA/VTgexlumP1I/AAAAAAAAAJ8/57-rnwyvP6g/s1600/image02.png" alt="测试金字塔"></p><blockquote><p>你应该瞄准以下金字塔，主要关注单元和集成测试，70/20/10</p></blockquote><blockquote><p>单元测试是轻量级的，旨在单独检查系统的特定功能/组件 - 它们应该很快并且为您提供即时且非常具体的反馈 - 代码中的哪一行发生错误，出现了 什么问题。</p></blockquote><blockquote><p>另一方面，端到端测试工作更高层次 - 从用户的角度检查整个应用程序，所有移动部件协同工作。 当 e2e 测试失败没有给出关于出错的地方，导致失败 的地点和原因的信息时，这种情况很常见。</p></blockquote><blockquote><p>一个标准的互联网应用产品的前端部分，我粗略估计大概有 20%的业务基础代码比较稳定，比如通用组件、通用算法和数据模块等，可以针对这些建立 复杂一些的 API 和 GUI 测试用例来保证质量。剩下 80%的部分不是很稳定，每天都在迭代，针对他们维护 case 的成本非常高。目前业界中号称做了 自动化测试的项目，也大多是在做那稳定的 20%。</p></blockquote><blockquote><ul><li>Unit test: Test classes</li><li>Integration test: Test component (class + template) using ComponentFixture</li><li>E2E: Mimic user inputs using Protractor and Selenium</li></ul></blockquote>',13),_={href:"https://cli.vuejs.org/config/#unit-testing",target:"_blank",rel:"noopener noreferrer"},T=o("Configuration Reference | Vue CLI 3"),q={href:"https://softwareengineering.stackexchange.com/questions/198918/end-to-end-tests-versus-unit-tests-should-tests-be-decoupled",target:"_blank",rel:"noopener noreferrer"},A=o("tdd - End-to-end tests versus unit tests, should tests be decoupled? - Software Engineering Stack Exchange"),E={href:"https://testing.googleblog.com/2015/04/just-say-no-to-more-end-to-end-tests.html",target:"_blank",rel:"noopener noreferrer"},I=o("Google Testing Blog: Just Say No to More End-to-End Tests"),B=i('<h2 id="jest" tabindex="-1"><a class="header-anchor" href="#jest" aria-hidden="true">#</a> Jest</h2><h3 id="eslint" tabindex="-1"><a class="header-anchor" href="#eslint" aria-hidden="true">#</a> eslint</h3><p>在 <code>.eslintrc.js</code> 增加</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>env\n  jest: true,\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>否则会有 lint 错误，如<code>it</code>未声明</p><h3 id="运行测试" tabindex="-1"><a class="header-anchor" href="#运行测试" aria-hidden="true">#</a> 运行测试</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">yarn</span> unit / jest\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="测试一个文件" tabindex="-1"><a class="header-anchor" href="#测试一个文件" aria-hidden="true">#</a> 测试一个文件</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">yarn</span> unit tests/unit/modal.spec.js\n<span class="token function">yarn</span> unit --watch tests/unit/modal.spec.js\n<span class="token function">yarn</span> unit --watch --debug tests/unit/modal.spec.js\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="测试覆盖率" tabindex="-1"><a class="header-anchor" href="#测试覆盖率" aria-hidden="true">#</a> 测试覆盖率</h3><ul><li>收集</li></ul><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>--<span class="token punctuation">[</span>coverage<span class="token operator">|</span>collectCoverage<span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li>统计范围</li></ul><p>白名单</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>collectCoverageFrom [array]\nDefault: undefined\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>黑名单</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>coveragePathIgnorePatterns [array]\nDefault: [&quot;/node_modules/&quot;]\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>匹配到的文件，即使没写测试，也会参与统计</p><p>默认会收集全部 JS？</p><h3 id="常用断言" tabindex="-1"><a class="header-anchor" href="#常用断言" aria-hidden="true">#</a> 常用断言</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">expect</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span><span class="token function">isVisible</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>\n\n<span class="token function">expect</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span><span class="token function">props</span><span class="token punctuation">(</span><span class="token string">&#39;show&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>\n<span class="token function">expect</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span><span class="token function">emitted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>close<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBeTruthy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// toBeTruthy if 语句为真</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="timer-mock-异步代码" tabindex="-1"><a class="header-anchor" href="#timer-mock-异步代码" aria-hidden="true">#</a> timer mock / 异步代码</h3><ol><li><p><code>done</code> 显式指定测试结束，ajax、vuex action 在 nextTick 里断言</p><p>注意，done 需要调用，否则会提示一个 timeout 错误</p></li></ol><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">beforeAll</span><span class="token punctuation">(</span><span class="token punctuation">(</span>done <span class="token comment">/* call it or remove it*/</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// calling it</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ol start="2"><li><code>jest.useFakeTimers()</code>原生定时器功能依赖<strong>真实</strong>时间，测试需要控制时间，假时间</li><li><code>jest.runAllTimers();</code>执行微任务队列，<strong>快进</strong>直到所有定时器执行</li><li>promise/await</li></ol><h2 id="vue-组件测试" tabindex="-1"><a class="header-anchor" href="#vue-组件测试" aria-hidden="true">#</a> Vue 组件测试</h2>',26),C={href:"https://vue-test-utils.vuejs.org/zh/api/wrapper/#%25E5%25B1%259E%25E6%2580%25A7",target:"_blank",rel:"noopener noreferrer"},V=o("Wrapper | Vue Test Utils"),J={href:"https://github.com/facebook/jest/issues/3211#issuecomment-289276061",target:"_blank",rel:"noopener noreferrer"},P=o("setTimeout not triggering when unit testing · Issue #3211 · facebook/jest"),S={href:"https://github.com/azl397985856/automate-everything/blob/master/docs/chapter6.md",target:"_blank",rel:"noopener noreferrer"},z=o("到处都是测试 automate-everything/chapter6.md at master · azl397985856/automate-everything"),F={href:"https://vuedose.tips/tips/quick-content-testing-using-snapshots-in-vue-js/",target:"_blank",rel:"noopener noreferrer"},U=o("Quick Content Testing using Snapshots in Vue.js");r.render=function(o,i){const r=n("RouterLink"),L=n("OutboundLink");return e(),a(l,null,[p,s("nav",c,[s("ul",null,[s("li",null,[s(r,{to:"#关于"},{default:t((()=>[u])),_:1}),s("ul",null,[s("li",null,[s(r,{to:"#why"},{default:t((()=>[d])),_:1})]),s("li",null,[s(r,{to:"#how"},{default:t((()=>[h])),_:1})])])]),s("li",null,[s(r,{to:"#与端到端测试比较"},{default:t((()=>[b])),_:1})]),s("li",null,[s(r,{to:"#jest"},{default:t((()=>[m])),_:1}),s("ul",null,[s("li",null,[s(r,{to:"#eslint"},{default:t((()=>[g])),_:1})]),s("li",null,[s(r,{to:"#运行测试"},{default:t((()=>[k])),_:1})]),s("li",null,[s(r,{to:"#测试一个文件"},{default:t((()=>[f])),_:1})]),s("li",null,[s(r,{to:"#测试覆盖率"},{default:t((()=>[v])),_:1})]),s("li",null,[s(r,{to:"#常用断言"},{default:t((()=>[x])),_:1})]),s("li",null,[s(r,{to:"#timer-mock-异步代码"},{default:t((()=>[j])),_:1})])])]),s("li",null,[s(r,{to:"#vue-组件测试"},{default:t((()=>[w])),_:1})])])]),y,s("p",null,[s("a",_,[T,s(L)]),s("a",q,[A,s(L)]),s("a",E,[I,s(L)])]),B,s("p",null,[s("a",C,[V,s(L)])]),s("p",null,[s("a",J,[P,s(L)]),s("a",S,[z,s(L)]),s("a",F,[U,s(L)])])],64)};export default r;
