import{r as n,o as s,c as a,a as p,w as t,F as e,b as o,d as c}from"./app.09b8f80a.js";const l={},u=p("h1",{id:"常用方法",tabindex:"-1"},[p("a",{class:"header-anchor",href:"#常用方法","aria-hidden":"true"},"#"),o(" 常用方法")],-1),r={class:"table-of-contents"},i=o("console"),k=o("子字符串"),m=o("history"),b=o("date"),d=o("通用的时间函数"),f=o("倒计时 countdown"),h=o("时区"),g=o("location"),v=o("map"),w=o("math"),y=o("获取两个值之间的随机数/整数"),x=o("setTimeout(待执行函数, 毫秒)"),j=o("switch"),q=o("requestAnimationFrame()"),M=c('<h2 id="console" tabindex="-1"><a class="header-anchor" href="#console" aria-hidden="true">#</a> console</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token punctuation">.</span>log\n<span class="token punctuation">.</span>error <span class="token comment">// 红色</span>\n<span class="token punctuation">.</span>info\n<span class="token punctuation">.</span>warn <span class="token comment">// 黄色</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="子字符串" tabindex="-1"><a class="header-anchor" href="#子字符串" aria-hidden="true">#</a> 子字符串</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 支持子字符串，</span>\n<span class="token comment">// %s string</span>\n<span class="token comment">// %d number</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;this is %s %d&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Jack&#39;</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// this is Jack 20</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="history" tabindex="-1"><a class="header-anchor" href="#history" aria-hidden="true">#</a> history</h2><blockquote><p>不能查看用户浏览了哪些页面</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>history<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 向后跳转一页 等价于 history.forward()</span>\nhistory<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 向前跳转一页，等价于 history.back()</span>\nhisroty<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token string">&#39;google.com&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 跳转到包含字符串的页面，若不存在，什么也不做</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>push pop 是 HTML5 新增方法，专用于单页应用，骗用户用的</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>history<span class="token punctuation">.</span><span class="token function">pushState</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;Page Title&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="date" tabindex="-1"><a class="header-anchor" href="#date" aria-hidden="true">#</a> date</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">timeFormat</span><span class="token punctuation">(</span><span class="token parameter">timestamp</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span>timestamp<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span>\n  <span class="token keyword">var</span> year <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token keyword">var</span> month <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>\n  <span class="token keyword">var</span> day <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token keyword">var</span> hour <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token keyword">var</span> minite <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token keyword">var</span> second <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token keyword">return</span> year <span class="token operator">+</span> <span class="token string">&#39;年&#39;</span> <span class="token operator">+</span> month <span class="token operator">+</span> <span class="token string">&#39;月&#39;</span> <span class="token operator">+</span> day <span class="token operator">+</span> <span class="token string">&#39;日&#39;</span>\n  <span class="token comment">//return year+&quot;.&quot;+month+&quot;.&quot;+day;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="通用的时间函数" tabindex="-1"><a class="header-anchor" href="#通用的时间函数" aria-hidden="true">#</a> 通用的时间函数</h2>',12),T={href:"http://phpjs.org/functions/date/",target:"_blank",rel:"noopener noreferrer"},_=o("JavaScript date function - php.js"),D=c('<p>示例：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">date</span><span class="token punctuation">(</span><span class="token string">&#39;Y\\\\年m\\\\月d\\\\日&#39;</span><span class="token punctuation">,</span> <span class="token number">1062402400</span><span class="token punctuation">)</span>\n<span class="token comment">// &quot;2003年09月01日&quot;</span>\n\n<span class="token function">date</span><span class="token punctuation">(</span><span class="token string">&#39;m\\\\月d\\\\日 l&#39;</span><span class="token punctuation">,</span> <span class="token number">1062402400</span><span class="token punctuation">)</span>\n<span class="token comment">// &quot;09月01日 星期一&quot;</span>\n\n<span class="token function">date</span><span class="token punctuation">(</span><span class="token string">&#39;Y.m.d&#39;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>updated_at<span class="token punctuation">)</span>\n<span class="token comment">//  2003.09.01</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p><code>date</code>存储的是<code>value</code>值，以毫秒（millisecond）为单位，可用<code>getTime()</code>获取。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">&#39;1970-01-01&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token comment">// 0</span>\n<span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">&#39;1970-01-02&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token comment">// 86400000</span>\n<span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">&#39;1970-02-01&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token comment">// 2678400000</span>\n<span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">&#39;1970-03-01&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token comment">// 5097600000</span>\n<span class="token number">2678400000</span> <span class="token operator">-</span> <span class="token number">86400000</span>\n<span class="token comment">// 2592000000</span>\n<span class="token number">5097600000</span> <span class="token operator">-</span> <span class="token number">2678400000</span>\n<span class="token comment">// 2419200000</span>\n<span class="token number">86400000</span> <span class="token operator">*</span> <span class="token number">30</span>\n<span class="token comment">// 2592000000</span>\n<span class="token number">86400000</span> <span class="token operator">*</span> <span class="token number">28</span>\n<span class="token comment">// 2419200000</span>\naDay <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">24</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token comment">// 86400000</span>\naMonth <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">24</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 不同月天数不一样，这里是30天</span>\n<span class="token comment">// 2592000000</span>\nanHour <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token comment">// 3600000</span>\naMinute <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">60</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token comment">// 60000</span>\njsDate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">&#39;2016-01-21&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 日月如为个数，前面的0不可省略</span>\nphpDate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">&#39;2016-01-21&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000</span>\n\n<span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// getYear()是被废弃的用法</span>\n<span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 获取月份(0-11,0代表1月,用的时候记得加上1)</span>\nDate<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span> <span class="token comment">// 只能精确到秒，毫秒将用0来代替</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div><p>目前 F7 项目中引入的 date 时间格式化函数，来自 PHP，时间以秒为单位，在用 JS 处理时要注意转换。</p>',5),F={href:"http://www.2ality.com/2014/02/time-values.html",target:"_blank",rel:"noopener noreferrer"},S=o("JavaScript time values: dates as milliseconds since 1970-01-01"),I={href:"https://segmentfault.com/a/1190000000481753",target:"_blank",rel:"noopener noreferrer"},A=o("js 时间戳与日期格式之间的互转 - 脑细胞 - SegmentFault"),R={href:"http://cn.bestconverter.org/unitconverter_time.php",target:"_blank",rel:"noopener noreferrer"},H=o("时间单位换算,单位换算,单位转换"),C={href:"http://codepen.io/Codeman12323/pen/HqCyw/",target:"_blank",rel:"noopener noreferrer"},J=o("Exact Age Calculator"),E=c('<h2 id="倒计时-countdown" tabindex="-1"><a class="header-anchor" href="#倒计时-countdown" aria-hidden="true">#</a> 倒计时 countdown</h2><p>给定数字，如果是个位数，前面加 0</p><h2 id="时区" tabindex="-1"><a class="header-anchor" href="#时区" aria-hidden="true">#</a> 时区</h2><p>nodejs 端输入<code>new Date()</code>打印出来是标准时区时间，而<code>getHours()</code>执行出来是系统环境时区</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> dt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">let</span> hr <span class="token operator">=</span> dt<span class="token punctuation">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> dt<span class="token punctuation">.</span><span class="token function">getTimezoneOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">60</span>\ndt<span class="token punctuation">.</span><span class="token function">setUTCHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="location" tabindex="-1"><a class="header-anchor" href="#location" aria-hidden="true">#</a> location</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>location<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token string">&#39;http://baidu.com&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 等价于 location = url</span>\nlocation<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&#39;http://baidu.com&#39;</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>两个方法都会载入一个新地址，区别是<code>replace</code>会抹掉当前页的历史记录（之前的不影响）。</p><p>现在浏览器只允许 click 触发的 js 里执行 window.open，避免了恶意弹窗</p><h2 id="map" tabindex="-1"><a class="header-anchor" href="#map" aria-hidden="true">#</a> map</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">//Example: Calculate 15% tip on a list of bills and order them</span>\n<span class="token comment">//No keys used</span>\n<span class="token comment">//Reduce simply creates a sorted array</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">mapper</span> <span class="token operator">=</span> <span class="token parameter">item</span> <span class="token operator">=&gt;</span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token function">parseFloat</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1.15</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">100</span>\n<span class="token keyword">const</span> <span class="token function-variable function">reducer</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">intermediate<span class="token punctuation">,</span> current</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  intermediate<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span>\n  <span class="token keyword">return</span> intermediate<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> initial <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n<span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token string">&#39;14.22 15.28 19.42 16.80 11.96&#39;</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>mapper<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>reducer<span class="token punctuation">,</span> initial<span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div>',11),L={href:"https://gist.github.com/johnhenry/5487382",target:"_blank",rel:"noopener noreferrer"},Y=o("Simple implementation and explanation of Map Reduce using Javascript"),z=c('<h2 id="math" tabindex="-1"><a class="header-anchor" href="#math" aria-hidden="true">#</a> math</h2><ul><li><p>取模/取余/取个位数 %</p></li><li><p><code>Math.floor(x)</code>取小于或等于 x 的最大正整数，比如用来取十位数</p><ul><li>floor ceil 一个地板，一个天花板，一个往小取，一个往大取，正负规则一样</li><li><code>Math.trunc(x)</code>取整，ES6 新增，仅去掉小数部分</li></ul></li><li><p><code>Math.sqrt(4)</code> // square root of 4 is 2</p></li><li><p><code>3.1415926.toFixed(2)</code> // 3.14 四舍五入，不传参数时表示 0，即去掉小数部分</p></li><li><p>浮点数(float)计算不精确，可先转换成整数。应用，如价格计算，最好后端返回数据为分，前端更好处理</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token number">0.2</span> <span class="token operator">+</span>\n  <span class="token number">0.1</span><span class="token punctuation">(</span>\n    <span class="token comment">// 0.30000000000000004</span>\n    <span class="token number">0.2</span> <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">0.1</span> <span class="token operator">*</span> <span class="token number">10</span>\n  <span class="token punctuation">)</span> <span class="token operator">/</span>\n    <span class="token number">10</span>\n<span class="token comment">// 0.3</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>浮点指的是带有小数的数值，浮点运算即是小数的四则运算 计算机里没有小数点，只能转换为类似科学计数法的表达方式，有精度限制</p><blockquote><p>通常，取模运算也叫取余运算，它们返回结果都是余数.rem（取余）和 mod（取模）唯一的区别在于： 当 x 和 y 的正负号一样的时候，两个函数结果 是等同的；当 x 和 y 的符号不同时，rem 函数结果的符号和 x 的一样，而 mod 和 y 一样。</p></blockquote></li></ul><h3 id="获取两个值之间的随机数-整数" tabindex="-1"><a class="header-anchor" href="#获取两个值之间的随机数-整数" aria-hidden="true">#</a> 获取两个值之间的随机数/整数</h3><ul><li>分析： <ul><li>大于最小值数</li><li>但小于最大值</li><li>随机性</li></ul></li><li>实现： <ul><li>基数是最小值</li><li><code>Math.random</code> 包括 0 但不包括 1</li><li>结果小数可以用 <code>floor</code> 或 <code>trunc</code>处理，但不能用 <code>ceil</code>，不满足小于最大值</li></ul></li></ul><p>MDN random 上有，不要自己推了</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 获取随机数/整数</span>\n<span class="token comment">// &gt; min  </span>\n<span class="token comment">// min + x &lt; max</span>\n<span class="token comment">// x &lt; max - min</span>\n<span class="token comment">// x = Math.random * (max - min)</span>\n<span class="token keyword">function</span> <span class="token function">getRandomInt</span><span class="token punctuation">(</span><span class="token parameter">min<span class="token punctuation">,</span> max</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// return min + Math.random() * (max - min)</span>\n  <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>min <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>max <span class="token operator">-</span> min<span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getRandomInt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 编写函数fn， 该函数有一个参数n（数字类型），返回值是一个数组，该数组内是n个随机不重复的整数，且整书取值范围是[2, 32]</span>\n<span class="token comment">// 参数 n 不一定是整数</span>\n<span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> min <span class="token operator">=</span> <span class="token number">2</span>\n  <span class="token keyword">let</span> max <span class="token operator">=</span> <span class="token number">32</span>\n  <span class="token keyword">let</span> length <span class="token operator">=</span> max <span class="token operator">-</span> min <span class="token operator">+</span> <span class="token number">1</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">||</span> n <span class="token operator">&gt;</span> length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 2 到 32 间取，最少是1，最多是 length，可能想象 2 到 32 的整数数组，个数就是 length</span>\n    <span class="token keyword">return</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">let</span> random\n  <span class="token keyword">let</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  n <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>\n  <span class="token keyword">while</span> <span class="token punctuation">(</span>set<span class="token punctuation">.</span>size <span class="token operator">&lt;</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    random <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>min <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>max <span class="token operator">-</span> min<span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>set<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>random<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>random<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token operator">...</span>set<span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token comment">// 程序模拟抛硬币，计算概率 未指派</span>\n<span class="token keyword">function</span> <span class="token function">throwCoins</span><span class="token punctuation">(</span><span class="token parameter">times</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> r\n  <span class="token keyword">let</span> output <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> times<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    r <span class="token operator">=</span> <span class="token function">getRandomIntInclusive</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      output<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;0 出现的概率：&#39;</span> <span class="token operator">+</span> output<span class="token punctuation">.</span>length <span class="token operator">/</span> times<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">throwCoins</span><span class="token punctuation">(</span><span class="token number">1000000</span><span class="token punctuation">)</span>\n\n<span class="token keyword">function</span> <span class="token function">getRandomIntInclusive</span><span class="token punctuation">(</span><span class="token parameter">min<span class="token punctuation">,</span> max</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  min <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span>min<span class="token punctuation">)</span>\n  max <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>max<span class="token punctuation">)</span>\n  <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>max <span class="token operator">-</span> min <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> min <span class="token comment">//The maximum is inclusive and the minimum is inclusive</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br></div></div><h2 id="settimeout-待执行函数-毫秒" tabindex="-1"><a class="header-anchor" href="#settimeout-待执行函数-毫秒" aria-hidden="true">#</a> setTimeout(待执行函数, 毫秒)</h2><ul><li>最好赋给变量</li><li>取消执行 <code>clearTimeout(变量名)</code></li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> up <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>\n<span class="token keyword">function</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;updated&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token function">clearTimeout</span><span class="token punctuation">(</span>up<span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">delay</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span> f</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> t<span class="token punctuation">)</span>\n<span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">alert</span><span class="token punctuation">(</span>‘hey<span class="token operator">!</span>’<span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><ul><li><p>尽快执行，不能保证，浏览器负责排序 在 JavaScript 中没有任何代码是立刻执行的，但一旦进程空闲则尽快执行（表面看是立刻执行）。</p></li><li><p>何时加入队列，而非实际执行 定时器指定的时间间隔表示何时将定时器的代码添加到队列，而不是何时实际执行代码。</p></li><li><p>最佳实践</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token operator">...</span>\n    <span class="token function">setTimeout</span><span class="token punctuation">(</span>foo<span class="token punctuation">,</span> delay<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li></ul><h2 id="switch" tabindex="-1"><a class="header-anchor" href="#switch" aria-hidden="true">#</a> switch</h2><ul><li>default 位置没有限制</li><li>case 中不写 break 会继续在其它 case 中执行，即使 case 条件并不满足</li><li>函数中的 return 可以帮助提前返回</li><li>建议避免 switch 贯穿，凡是有 case 的地方，一律加上 break。</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token parameter">n<span class="token punctuation">,</span> m</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">switch</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">default</span><span class="token operator">:</span>\n      <span class="token keyword">return</span> <span class="token string">&#39;not equal&#39;</span>\n    <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>\n      <span class="token keyword">return</span> <span class="token string">&#39;equal&#39;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">compare</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="requestanimationframe" tabindex="-1"><a class="header-anchor" href="#requestanimationframe" aria-hidden="true">#</a> <code>requestAnimationFrame()</code></h2><p>IE10+</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// Setup a timer</span>\n<span class="token keyword">var</span> timeout\n\n<span class="token comment">// Listen for resize events</span>\nwindow<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>\n  <span class="token string">&#39;scroll&#39;</span><span class="token punctuation">,</span>\n  <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;no debounce&#39;</span><span class="token punctuation">)</span>\n\n    <span class="token comment">// If there&#39;s a timer, cancel it</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>timeout<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      window<span class="token punctuation">.</span><span class="token function">cancelAnimationFrame</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// Setup the new requestAnimationFrame()</span>\n    timeout <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// Run our scroll functions</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;debounced&#39;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token boolean">false</span>\n<span class="token punctuation">)</span>\n\n<span class="token comment">// helper</span>\n<span class="token doc-comment comment">/**\n * Debounce functions for better performance\n * <span class="token keyword">@param</span>  <span class="token class-name"><span class="token punctuation">{</span>Function<span class="token punctuation">}</span></span> <span class="token parameter">fn</span> The function to debounce\n */</span>\n<span class="token keyword">var</span> <span class="token function-variable function">debounce</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// Setup a timer</span>\n  <span class="token keyword">var</span> timeout\n\n  <span class="token comment">// Return a function to run debounced</span>\n  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// Setup the arguments</span>\n    <span class="token keyword">var</span> context <span class="token operator">=</span> <span class="token keyword">this</span>\n    <span class="token keyword">var</span> args <span class="token operator">=</span> arguments\n\n    <span class="token comment">// If there&#39;s a timer, cancel it</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>timeout<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      window<span class="token punctuation">.</span><span class="token function">cancelAnimationFrame</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// Setup the new requestAnimationFrame()</span>\n    timeout <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> args<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br></div></div>',16);l.render=function(o,c){const l=n("RouterLink"),P=n("OutboundLink");return s(),a(e,null,[u,p("nav",r,[p("ul",null,[p("li",null,[p(l,{to:"#console"},{default:t((()=>[i])),_:1}),p("ul",null,[p("li",null,[p(l,{to:"#子字符串"},{default:t((()=>[k])),_:1})])])]),p("li",null,[p(l,{to:"#history"},{default:t((()=>[m])),_:1})]),p("li",null,[p(l,{to:"#date"},{default:t((()=>[b])),_:1})]),p("li",null,[p(l,{to:"#通用的时间函数"},{default:t((()=>[d])),_:1})]),p("li",null,[p(l,{to:"#倒计时-countdown"},{default:t((()=>[f])),_:1})]),p("li",null,[p(l,{to:"#时区"},{default:t((()=>[h])),_:1})]),p("li",null,[p(l,{to:"#location"},{default:t((()=>[g])),_:1})]),p("li",null,[p(l,{to:"#map"},{default:t((()=>[v])),_:1})]),p("li",null,[p(l,{to:"#math"},{default:t((()=>[w])),_:1}),p("ul",null,[p("li",null,[p(l,{to:"#获取两个值之间的随机数-整数"},{default:t((()=>[y])),_:1})])])]),p("li",null,[p(l,{to:"#settimeout-待执行函数-毫秒"},{default:t((()=>[x])),_:1})]),p("li",null,[p(l,{to:"#switch"},{default:t((()=>[j])),_:1})]),p("li",null,[p(l,{to:"#requestanimationframe"},{default:t((()=>[q])),_:1})])])]),M,p("p",null,[p("a",T,[_,p(P)])]),D,p("p",null,[p("a",F,[S,p(P)])]),p("p",null,[p("a",I,[A,p(P)])]),p("p",null,[p("a",R,[H,p(P)])]),p("p",null,[p("a",C,[J,p(P)])]),E,p("p",null,[p("a",L,[Y,p(P)])]),z],64)};export default l;
