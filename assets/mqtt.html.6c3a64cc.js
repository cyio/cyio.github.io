import{r as n,o as s,c as a,a as t,F as p,b as e,d as o}from"./app.0e74f851.js";const l={},r=t("h1",{id:"mqtt",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#mqtt","aria-hidden":"true"},"#"),e(" MQTT")],-1),c=t("p",null,"浏览器不能用默认的 1883",-1),i=t("p",null,"http 可以用 ws/wss",-1),u=t("p",null,"https 只能用 wss 443",-1),m=e("客户端确保自己的 Client ID 全局唯一，不要重复连接，同时做好断线重连的逻辑。有格式要求。 "),k={href:"https://help.aliyun.com/document_detail/42420.html?spm=a2c4g.11186623.2.11.7bbf4967RXsZHo",target:"_blank",rel:"noopener noreferrer"},b=e("名词解释"),d=t("em",null,"产品简介",-1),h=e("微消息队列 MQTT-阿里云"),g=t("p",null,"cleanSession 标志是 MQTT 协议中对一个客户端建立 TCP 连接后是否关心之前状态的定义",-1),f={href:"https://github.com/AliwareMQ/lmq-demo/blob/master/lmq-js-demo/lmqdemo.html",target:"_blank",rel:"noopener noreferrer"},q=e("阿里 demo lmq-demo/lmqdemo.html at master · AliwareMQ/lmq-demo"),w=o('<h2 id="两种连接方式" tabindex="-1"><a class="header-anchor" href="#两种连接方式" aria-hidden="true">#</a> 两种连接方式</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 1.</span>\n<span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">// host: config.host,</span>\n  <span class="token comment">// port: config.port,</span>\n  username<span class="token operator">:</span> config<span class="token punctuation">.</span>username<span class="token punctuation">,</span>\n  password<span class="token operator">:</span> config<span class="token punctuation">.</span>password<span class="token punctuation">,</span>\n  keepalive<span class="token operator">:</span> <span class="token number">60</span><span class="token punctuation">,</span>\n  clientId<span class="token operator">:</span> config<span class="token punctuation">.</span>clientId<span class="token punctuation">,</span>\n  protocolId<span class="token operator">:</span> <span class="token string">&#39;MQTT&#39;</span><span class="token punctuation">,</span>\n  protocolVersion<span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>\n  clean<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n  reconnectPeriod<span class="token operator">:</span> <span class="token number">1000</span><span class="token punctuation">,</span>\n  connectTimeout<span class="token operator">:</span> <span class="token number">30</span> <span class="token operator">*</span> <span class="token number">1000</span>\n<span class="token punctuation">}</span>\nclient <span class="token operator">=</span> mqtt<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span>\n\n<span class="token comment">// 2. 需要指定协议时，需要在 url 前面指定</span>\n<span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">wss://</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>config<span class="token punctuation">.</span>host<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>config<span class="token punctuation">.</span>port<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>\nclient <span class="token operator">=</span> mqtt<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> options<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div>',2),T={href:"https://codepen.io/cyio/pen/jJaQqX",target:"_blank",rel:"noopener noreferrer"},Q=e("mqtt 网页版客户端调试工具"),v={href:"http://www.tongxinmao.com/txm/webmqtt.php",target:"_blank",rel:"noopener noreferrer"},M=e("通信猫 MQTT 在线客户端 共享服务器"),j={href:"https://github.com/mqtt/mqtt.github.io/wiki",target:"_blank",rel:"noopener noreferrer"},x=e("社区文档 Home · mqtt/mqtt.github.io Wiki");l.render=function(e,o){const l=n("OutboundLink");return s(),a(p,null,[r,c,i,u,t("p",null,[m,t("a",k,[b,d,h,t(l)])]),g,t("p",null,[t("a",f,[q,t(l)])]),w,t("p",null,[t("a",T,[Q,t(l)])]),t("p",null,[t("a",v,[M,t(l)])]),t("p",null,[t("a",j,[x,t(l)])])],64)};export default l;
