import{r as n,o as s,c as a,a as e,w as p,F as t,b as o,d as c}from"./app.31fc93bc.js";const l={},r=e("h1",{id:"数据类型",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#数据类型","aria-hidden":"true"},"#"),o(" 数据类型")],-1),u={class:"table-of-contents"},i=o("数字"),k=o("逻辑值"),b=o("类型判断"),m=o("类型转换"),d=c('<h2 id="数字" tabindex="-1"><a class="header-anchor" href="#数字" aria-hidden="true">#</a> 数字</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">&#39;0.00&#39;</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">0</span>\n<span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">&#39;0&#39;</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">0</span>\n<span class="token function">Number</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">0</span>\n<span class="token function">Number</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">NaN</span> <span class="token comment">// 没有有效结果</span>\n<span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">0</span>\n<span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">NaN</span>\n<span class="token function">Number</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">1</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="逻辑值" tabindex="-1"><a class="header-anchor" href="#逻辑值" aria-hidden="true">#</a> 逻辑值</h2><p>0、NaN（Invalid Number）、空字符串（&quot;&quot;）、null、undefined 视为 false，其余值视为 true</p><h2 id="类型判断" tabindex="-1"><a class="header-anchor" href="#类型判断" aria-hidden="true">#</a> 类型判断</h2><ul><li>如果要使用某种数据类型的方法，最好在开始检测数据类型，以免传入不合适的类型导致错误</li><li>有效值类型用<code>typeof</code>，null/undefined 直接用全等<code>===</code>，引用类型需要另外方法</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 检测数字</span>\n<span class="token keyword">typeof</span> <span class="token number">1</span> <span class="token operator">===</span> <span class="token string">&#39;number&#39;</span>\n\n<span class="token comment">// 检测字符串</span>\n<span class="token keyword">typeof</span> <span class="token string">&#39;1&#39;</span> <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span>\n<span class="token keyword">typeof</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span> <span class="token comment">// object</span>\n<span class="token string">&#39;1&#39;</span> <span class="token keyword">instanceof</span> <span class="token class-name">String</span>  <span class="token comment">// false</span>\n\n<span class="token keyword">typeof</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token comment">//&quot;object&quot;   无法区分数组和对象</span>\n<span class="token keyword">typeof</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// &#39;object&#39;</span>\n\n<span class="token comment">// 检测数组</span>\nxxx <span class="token keyword">instanceof</span> <span class="token class-name">Array</span>\nxxx<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Array\n\n<span class="token comment">// 严格检测对象，可排除 null Date Math 等</span>\n<span class="token comment">// toString.call 任意 Object 都可以判断</span>\n<span class="token keyword">const</span> <span class="token function-variable function">isObject</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arg</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&#39;[object Object]&#39;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div>',7),f={href:"https://muyiy.vip/question/js/21.html",target:"_blank",rel:"noopener noreferrer"},g=o("第 21 题：有以下 3 个判断数组的方法，请分别介绍它们之间的区别和优劣 | 木易杨前端进阶"),h=c('<h2 id="类型转换" tabindex="-1"><a class="header-anchor" href="#类型转换" aria-hidden="true">#</a> 类型转换</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">undefined</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token comment">// 两个值转换为 false，结果是 true</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>原始类型，意味着不可变，相等性判断都可以用<code>===</code>，而对象可以修改 null 空对象，是特殊原始类型，不能用 typeof 检测出 BigInt</p>',3),v={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures",target:"_blank",rel:"noopener noreferrer"},y=o("JavaScript data types and data structures - JavaScript | MDN"),j=c('<p>Symbol 原子、唯一</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token string">&#39;1&#39;</span> <span class="token operator">+</span> <span class="token string">&#39;0&#39;</span> <span class="token operator">+</span> <span class="token number">0</span> <span class="token comment">// 100 字符串拼接</span>\n<span class="token string">&#39;1&#39;</span> <span class="token operator">-</span> <span class="token string">&#39;0&#39;</span> <span class="token comment">// 1 减法，转成数字</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',2);l.render=function(o,c){const l=n("RouterLink"),w=n("OutboundLink");return s(),a(t,null,[r,e("nav",u,[e("ul",null,[e("li",null,[e(l,{to:"#数字"},{default:p((()=>[i])),_:1})]),e("li",null,[e(l,{to:"#逻辑值"},{default:p((()=>[k])),_:1})]),e("li",null,[e(l,{to:"#类型判断"},{default:p((()=>[b])),_:1})]),e("li",null,[e(l,{to:"#类型转换"},{default:p((()=>[m])),_:1})])])]),d,e("p",null,[e("a",f,[g,e(w)])]),h,e("p",null,[e("a",v,[y,e(w)])]),j],64)};export default l;
