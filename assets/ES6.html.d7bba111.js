import{r as n,o as s,c as a,a as p,w as e,F as t,b as o,d as l}from"./app.0e74f851.js";const c={},r=p("h1",{id:"es6",tabindex:"-1"},[p("a",{class:"header-anchor",href:"#es6","aria-hidden":"true"},"#"),o(" ES6")],-1),u={class:"table-of-contents"},i=o("var let const"),k=o("let/var 全局声明有区别"),b=o("map 映射"),m=o("Set"),d=o("类 class"),f=o("模块"),h=o("兼容性"),y=o("导入导出"),g=o("箭头函数"),v=o("什么时候不使用"),w=o("什么时候放心用"),x=o("模板字面量"),j=o("for-of 循环"),E=o("参数类型"),S=o("symbol"),_=o("尾调用优化"),A=p("ul",null,[p("li",null,"新特性：模块 | 类 | 解构赋值 | promise | 构造器 |Proxy | Reflect | 箭头函数 | 模板字符串"),p("li",null,"防止重复声明：ES6 不允许在同一个作用域内用 let 或 const 重复声明同名变量。这对于防止在不同的 js 库中存在重复声明的函数表达式十分有帮助。"),p("li",null,[o("不再需要仅为了声明变量，而使用立即执行函数以避免全局污染，用大括号配合"),p("code",null,"let/const"),o("即可")]),p("li",null,"rest 参数，更便利访问函数参数")],-1),B={href:"https://github.com/TerryZ/js-develop-skill-summary/blob/master/javascript-es6.md",target:"_blank",rel:"noopener noreferrer"},F=o("Javascript - ES6 实用技巧"),N={href:"http://web.jobbole.com/86210/",target:"_blank",rel:"noopener noreferrer"},q=o("在 ES6 中 改良的 5 个 JavaScript “缺陷” - WEB 前端 - 伯乐在线"),C=l('<h2 id="var-let-const" tabindex="-1"><a class="header-anchor" href="#var-let-const" aria-hidden="true">#</a> var let const</h2><p>var 的问题：变量全局化，变量提升，重复声明，重复赋值</p><p>let const 支持块级作用域</p><p>const 声明时必须赋值，不可重复声明</p><h3 id="let-var-全局声明有区别" tabindex="-1"><a class="header-anchor" href="#let-var-全局声明有区别" aria-hidden="true">#</a> let/var 全局声明有区别</h3><p>var 存在 window 对象中，而 let 存在声明式环境中（看不到），不影响 window.xxx 的使用，但 var xxx 不行</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> mine <span class="token operator">=</span> <span class="token number">4</span>\n<span class="token comment">// undefined</span>\nwindow<span class="token punctuation">.</span>mine\n<span class="token comment">// 4</span>\nmine\n<span class="token comment">// 4</span>\n\n<span class="token keyword">let</span> my <span class="token operator">=</span> <span class="token number">3</span>\n<span class="token comment">// undefined</span>\nwindow<span class="token punctuation">.</span>my\n<span class="token comment">// undefined</span>\nmy\n<span class="token comment">// 3</span>\n\n<span class="token comment">// var 变量提升</span>\n<span class="token keyword">var</span> myname <span class="token operator">=</span> <span class="token string">&quot;极客时间&quot;</span>\n<span class="token keyword">function</span> <span class="token function">showName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myname<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n   <span class="token keyword">var</span> myname <span class="token operator">=</span> <span class="token string">&quot;极客邦&quot;</span> <span class="token comment">// 声明在函数内提升，但赋值未进行</span>\n  <span class="token punctuation">}</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myname<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>\n<span class="token punctuation">}</span>\n<span class="token function">showName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div>',7),J={href:"https://blog.poetries.top/browser-working-principle/guide/part2/lesson09.html#_1-%25E5%258F%2598%25E9%2587%258F%25E5%25AE%25B9%25E6%2598%2593%25E5%259C%25A8%25E4%25B8%258D%25E8%25A2%25AB%25E5%25AF%259F%25E8%25A7%2589%25E7%259A%2584%25E6%2583%2585%25E5%2586%25B5%25E4%25B8%258B%25E8%25A2%25AB%25E8%25A6%2586%25E7%259B%2596%25E6%258E%2589",target:"_blank",rel:"noopener noreferrer"},T=o("块级作用域：var缺陷以及为什么要引入let和const | 浏览器工作原理与实践"),L=l('<p>tips:</p><ul><li><p>let 最好放在 block 最上面，防止过早访问引起抛错</p></li><li><p>显式地声明块级变量，建议把 let 与大括号放在一行</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token punctuation">{</span>\n  <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span>\n    b<span class="token punctuation">,</span>\n    c\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li></ul><h2 id="map-映射" tabindex="-1"><a class="header-anchor" href="#map-映射" aria-hidden="true">#</a> map 映射</h2><ul><li>如果 key 是复杂数据类型，需要保存起来，以便 map 操作<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> key <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>\n\nmap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>\nmap<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li></ul><h2 id="set" tabindex="-1"><a class="header-anchor" href="#set" aria-hidden="true">#</a> Set</h2><ul><li>Set 对象允许你存储任何类型的唯一值，无论是原始值或者是对象引用。</li><li>包括 null 等，用来做去重时，添加的值可能需要做类型判断</li><li>特殊的对象，继承了对象的方法</li></ul><h2 id="类-class" tabindex="-1"><a class="header-anchor" href="#类-class" aria-hidden="true">#</a> 类 class</h2><ul><li><p>简化构造函数创建</p></li><li><p><code>super</code>(调用父类构造函数)不是必要的，什么情况下写呢？</p><p>如果在<code>contrustor</code>中要用<code>this[props]</code></p><p>表示继承的父类、可以传参、可以访问方法</p></li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">&#39;animal&#39;</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">says</span><span class="token punctuation">(</span><span class="token parameter">msg</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>type<span class="token punctuation">,</span> <span class="token string">&#39; &#39;</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> animal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\nanimal<span class="token punctuation">.</span><span class="token function">says</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span> <span class="token comment">// animal says hello</span>\n<span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 下面使用了 this，如果不写 super 的话会，ReferenceError: Must call super constructor in derived class before accessing &#39;this&#39; or returning from derived constructor</span>\n    <span class="token comment">// super 不是必要的，什么情况下写呢？ 如果在 contrustor 中要用 this.props</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">&#39;cat&#39;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> cat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\ncat<span class="token punctuation">.</span><span class="token function">says</span><span class="token punctuation">(</span><span class="token string">&#39;world&#39;</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h2 id="模块" tabindex="-1"><a class="header-anchor" href="#模块" aria-hidden="true">#</a> 模块</h2><ul><li>特征： <ol><li>总是在严格模式下</li><li>有一个顶级域而不是全局域</li><li>能从其他模块导入绑定</li><li>能将绑定导出</li></ol></li><li>为什么 JS 就是把值指给变量，那么如何管理变量呢，函数有作用域，互相不能访问，要共享的话，只能上层（全局）定义变量 模块能清晰定义如何共享，哪些可访问（模块所用域）</li></ul><p>命名冲突时，用<code>as</code>关键字重命名模块 随时可以导入导出模块</p><ul><li>引用时使用完整资源路径</li><li>默认 defer，可设置 async，inline scrpit 也可以</li></ul><h3 id="兼容性" tabindex="-1"><a class="header-anchor" href="#兼容性" aria-hidden="true">#</a> 兼容性</h3><ul><li>微信 android 不支持，iOS 因为跟 safari 一样，所以支持</li><li>IE 被放弃了，不支持</li><li>UC android 不支持</li></ul>',15),O={href:"https://codepen.io/cyio/pen/mjPzqJ",target:"_blank",rel:"noopener noreferrer"},R=o("es module vue"),M={href:"https://jspm.io/",target:"_blank",rel:"noopener noreferrer"},P=o("jspm.io - Native ES Modules CDN"),D=l('<h3 id="导入导出" tabindex="-1"><a class="header-anchor" href="#导入导出" aria-hidden="true">#</a> 导入导出</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> First <span class="token keyword">from</span> <span class="token string">&#39;./First&#39;</span>\n<span class="token keyword">import</span> Second <span class="token keyword">from</span> <span class="token string">&#39;./Second&#39;</span>\n<span class="token punctuation">;</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">....</span><span class="token regex-delimiter">/</span></span>\n<span class="token keyword">export</span> <span class="token punctuation">{</span> First<span class="token punctuation">,</span> Second <span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token punctuation">{</span> <span class="token keyword">default</span> <span class="token keyword">as</span> SomeClass <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./SomeClass&#39;</span>\n<span class="token keyword">export</span> <span class="token punctuation">{</span> someFunction <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./utils&#39;</span>\n<span class="token keyword">export</span> <span class="token punctuation">{</span> <span class="token keyword">default</span> <span class="token keyword">as</span> React <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="箭头函数" tabindex="-1"><a class="header-anchor" href="#箭头函数" aria-hidden="true">#</a> 箭头函数</h2><ul><li>当使用箭头函数创建普通对象时，你总是需要将对象包裹在小括号里</li><li>没有<code>arguments</code>，可以使用<code>...args</code></li><li>自身没有 this</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 为与你玩耍的每一个小狗创建一个新的空对象</span>\n<span class="token keyword">var</span> chewToys <span class="token operator">=</span> puppies<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">puppy</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// 这样写会报Bug！</span>\n<span class="token keyword">var</span> chewToys <span class="token operator">=</span> puppies<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">puppy</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li><p>箭头函数和普通函数的区别</p><ol><li><p>箭头函数的 this 就是定义时所在的对象，而不是使用时所在的对象</p></li><li><p>箭头函数不能用作构造函数</p></li><li><p>箭头函数不能使用 arguments 对象，该对象不存在，但可以使用 rest 对象</p></li></ol></li><li><p>函数表达式称为 lambda 函数，λ-calculus，演算的意思</p></li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token string">&#39;use strict&#39;</span>\n<span class="token comment">// 打印i=几，每隔500毫秒迭代，第一次打印需立刻执行</span>\n<span class="token keyword">function</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token parameter">ms <span class="token operator">=</span> <span class="token number">0</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> ms<span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">await</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">i=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>i<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;done&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 类版本，props 就是函数参数</span>\n<span class="token keyword">class</span> <span class="token class-name">Sleep</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>ms <span class="token operator">=</span> props <span class="token operator">|</span> <span class="token number">0</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>ms<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">Sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span>\n<span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">Sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><p>class 实际上是函数</p><p>不会自动提升，因此使用前需先声明</p><p>constructor 只在实例化时被调用</p><p>使用 extends 关键字创建子类</p><p>与一般函数写法的比较</p><p>静态方法只能由未实例化的类调用，常用作工具函数</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Name</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">Name</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token keyword">let</span> <span class="token function-variable function">func</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token keyword">let</span> <span class="token function-variable function">func</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n<span class="token keyword">let</span> clsName <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token keyword">let</span> clsName <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token class-name">clsName</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="什么时候不使用" tabindex="-1"><a class="header-anchor" href="#什么时候不使用" aria-hidden="true">#</a> 什么时候不使用</h3><ol><li>对象方法</li><li>有动态上下文的回调</li></ol><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> button <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;press&#39;</span><span class="token punctuation">)</span>\nbutton<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token comment">// Window</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\nbutton<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token comment">// button element</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="什么时候放心用" tabindex="-1"><a class="header-anchor" href="#什么时候放心用" aria-hidden="true">#</a> 什么时候放心用</h3><ul><li>this 继承 parent context</li><li>不关心 this</li></ul><p>tips: 始终写上 return，方便增加语句、log</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token function-variable function">square</span> <span class="token operator">=</span> <span class="token parameter">x</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>\n  <span class="token keyword">return</span> x <span class="token operator">*</span> x\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="模板字面量" tabindex="-1"><a class="header-anchor" href="#模板字面量" aria-hidden="true">#</a> 模板字面量</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> who <span class="token operator">=</span> <span class="token string">&#39;world&#39;</span>\n<span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Hello </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>who<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="for-of-循环" tabindex="-1"><a class="header-anchor" href="#for-of-循环" aria-hidden="true">#</a> for-of 循环</h2><ul><li>最早，for</li><li>ES5，forEach</li><li>ES6，for-of <ul><li>支持类数组，字符串，Set，Map</li><li>相比于 forEach 支持搭配 break return</li><li>for-in 为普通对象设计，不适用数组</li><li>遍历对象用 for-in，或 Object.keys()</li><li>Array.from(obj.keys(), fn) 转换类数组</li></ul></li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 计算一些数字的均值</span>\n<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">average</span><span class="token punctuation">(</span><span class="token parameter">numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token number">0</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> item <span class="token keyword">of</span> numbers<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    sum <span class="token operator">+=</span> item\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> sum <span class="token operator">/</span> numbers<span class="token punctuation">.</span>length\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 字符串拼接</span>\n<span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>\n\n<span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> ret <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> value <span class="token keyword">of</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    ret <span class="token operator">+=</span> value\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> ret\n<span class="token punctuation">}</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><h2 id="参数类型" tabindex="-1"><a class="header-anchor" href="#参数类型" aria-hidden="true">#</a> 参数类型</h2><p>ES6 不支持，用 flow，然后通过 babel plugin 移除</p>',28),I={href:"https://stackoverflow.com/questions/35916921/babel-function-parameter-types-in-es6",target:"_blank",rel:"noopener noreferrer"},W=o("javascript - Babel: Function parameter types in ES6 - Stack Overflow"),$=l('<h2 id="symbol" tabindex="-1"><a class="header-anchor" href="#symbol" aria-hidden="true">#</a> symbol</h2><p>对象 key 允许 string or symbol 两种类型</p><p>执行<code>Symbol()</code>返回，总是 uniq 标识</p><p>使用场景：为其它来源的对象，安全的添加属性</p><p>不支持 new 调用</p><p>全局注册，用 for 查找</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Symbol(&#39;a&#39;) === Symbol(&#39;a&#39;) // false\nSymbol.for(&#39;a&#39;) === Symbol.for(&#39;a&#39;) // true\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>https://javascript.info/symbol</p><h2 id="尾调用优化" tabindex="-1"><a class="header-anchor" href="#尾调用优化" aria-hidden="true">#</a> 尾调用优化</h2><p>尾调用，定义：指某个函数的最后一步是调用另一个函数，不做其他操作</p><p>优化：只保留内层函数的调用记录</p><p>ES6+ 对引擎要求，原因：实现概率 + 性能</p>',12),z={href:"https://ifront.net/article/89421bc6cc90f43fbc27117674d9ea1e",target:"_blank",rel:"noopener noreferrer"},H=o("JS尾调用优化");c.render=function(o,l){const c=n("RouterLink"),U=n("OutboundLink");return s(),a(t,null,[r,p("nav",u,[p("ul",null,[p("li",null,[p(c,{to:"#var-let-const"},{default:e((()=>[i])),_:1}),p("ul",null,[p("li",null,[p(c,{to:"#let-var-全局声明有区别"},{default:e((()=>[k])),_:1})])])]),p("li",null,[p(c,{to:"#map-映射"},{default:e((()=>[b])),_:1})]),p("li",null,[p(c,{to:"#set"},{default:e((()=>[m])),_:1})]),p("li",null,[p(c,{to:"#类-class"},{default:e((()=>[d])),_:1})]),p("li",null,[p(c,{to:"#模块"},{default:e((()=>[f])),_:1}),p("ul",null,[p("li",null,[p(c,{to:"#兼容性"},{default:e((()=>[h])),_:1})]),p("li",null,[p(c,{to:"#导入导出"},{default:e((()=>[y])),_:1})])])]),p("li",null,[p(c,{to:"#箭头函数"},{default:e((()=>[g])),_:1}),p("ul",null,[p("li",null,[p(c,{to:"#什么时候不使用"},{default:e((()=>[v])),_:1})]),p("li",null,[p(c,{to:"#什么时候放心用"},{default:e((()=>[w])),_:1})])])]),p("li",null,[p(c,{to:"#模板字面量"},{default:e((()=>[x])),_:1})]),p("li",null,[p(c,{to:"#for-of-循环"},{default:e((()=>[j])),_:1})]),p("li",null,[p(c,{to:"#参数类型"},{default:e((()=>[E])),_:1})]),p("li",null,[p(c,{to:"#symbol"},{default:e((()=>[S])),_:1})]),p("li",null,[p(c,{to:"#尾调用优化"},{default:e((()=>[_])),_:1})])])]),A,p("p",null,[p("a",B,[F,p(U)]),p("a",N,[q,p(U)])]),C,p("p",null,[p("a",J,[T,p(U)])]),L,p("p",null,[p("a",O,[R,p(U)]),p("a",M,[P,p(U)])]),D,p("p",null,[p("a",I,[W,p(U)])]),$,p("p",null,[p("a",z,[H,p(U)])])],64)};export default c;
