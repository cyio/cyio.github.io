import{_ as n,e as s}from"./app.75b00e2a.js";const a={},p=s(`<h1 id="\u5E73\u5206\u6570\u7EC4" tabindex="-1"><a class="header-anchor" href="#\u5E73\u5206\u6570\u7EC4" aria-hidden="true">#</a> \u5E73\u5206\u6570\u7EC4</h1><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>  <span class="token keyword">function</span> <span class="token function">toChineseNumber</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Number<span class="token punctuation">.</span><span class="token function">isInteger</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> n <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">throw</span> <span class="token function">Error</span><span class="token punctuation">(</span><span class="token string">&#39;\u8BF7\u8F93\u5165\u81EA\u7136\u6570&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">const</span> digits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;\u96F6&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;\u4E00&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;\u4E8C&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;\u4E09&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;\u56DB&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;\u4E94&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;\u516D&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;\u4E03&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;\u516B&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;\u4E5D&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> positions <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;\u5341&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;\u767E&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;\u5343&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;\u4E07&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;\u5341\u4E07&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;\u767E\u4E07&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;\u5343\u4E07&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;\u4EBF&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;\u5341\u4EBF&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;\u767E\u4EBF&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;\u5343\u4EBF&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> charArray <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> prevIsZero <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token comment">// \u5904\u74060  deal zero</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> charArray<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> ch <span class="token operator">=</span> charArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">!==</span> <span class="token string">&#39;0&#39;</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>prevIsZero<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        result <span class="token operator">+=</span> digits<span class="token punctuation">[</span><span class="token function">parseInt</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+</span> positions<span class="token punctuation">[</span>charArray<span class="token punctuation">.</span>length <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">===</span> <span class="token string">&#39;0&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        prevIsZero <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">!==</span> <span class="token string">&#39;0&#39;</span> <span class="token operator">&amp;&amp;</span> prevIsZero<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">/* eslint prefer-template: 0 */</span>
        result <span class="token operator">+=</span> <span class="token string">&#39;\u96F6&#39;</span> <span class="token operator">+</span> digits<span class="token punctuation">[</span><span class="token function">parseInt</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+</span> positions<span class="token punctuation">[</span>charArray<span class="token punctuation">.</span>length <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// \u5904\u7406\u5341 deal ten</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      result <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&#39;\u4E00\u5341&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;\u5341&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// \u751F\u6210\u4E2D\u6587\u6570\u5B57\u8868\u683C\u5934</span>
  <span class="token keyword">function</span> <span class="token function">initHeads</span><span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">v<span class="token punctuation">,</span>i</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token function">toChineseNumber</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// \u6BCF\u6761\u6570\u7EC4\u7B2C\u4E00\u5217\u662F\u5F97\u5206\uFF0C</span>
  <span class="token comment">// \u6700\u540E\u4E00\u6761\u6570\u7EC4\u6709\u6548\u5217\u540E\u662F\u603B\u5206,\u9700\u8981\u7A7A\u5217\u586B\u5145\uFF0C\u7A7A\u5217\u6709\u7279\u6B8A\u6837\u5F0F</span>
  <span class="token comment">// return \u4E8C\u7EF4\u6570\u7EC4</span>
  <span class="token comment">// rowLimit \u4E0D\u7B97\u5F97\u5206\u5217</span>
  <span class="token keyword">function</span> <span class="token function">getTableData</span><span class="token punctuation">(</span><span class="token parameter">nums<span class="token punctuation">,</span> rowLimit<span class="token operator">=</span><span class="token number">11</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// const first = &#39;\u9898\u53F7&#39;</span>
    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">const</span> words <span class="token operator">=</span> <span class="token function">initHeads</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>
    <span class="token comment">// words.push(&#39;\u603B\u5206&#39;)</span>
    <span class="token keyword">let</span> tmpList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>words<span class="token punctuation">,</span> <span class="token string">&#39;\u603B\u5206&#39;</span><span class="token punctuation">]</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>tmpList<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> rowLimit<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>tmpList<span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      result <span class="token operator">=</span> <span class="token function">equalSplitList</span><span class="token punctuation">(</span>tmpList<span class="token punctuation">,</span> rowLimit<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> result
  <span class="token punctuation">}</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getTableData</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  
  <span class="token comment">// \u9898\u76EE\uFF1A\u7B49\u5206\u5217\u8868</span>
  <span class="token comment">// \u7ED9\u5B9A\u4E00\u4E2A\u6570\u7EC4\uFF0C\u5207\u5206\u8F93\u51FA\u4E8C\u7EF4\u6570\u7EC4\uFF0C\u6BCF\u6761\u5B50\u6570\u7EC4\u957F\u5EA6\u4E3A m</span>
  <span class="token comment">// input [&quot;\u4E00&quot;, &quot;\u4E8C&quot;, &quot;\u4E09&quot;, &quot;\u56DB&quot;, &quot;\u4E94&quot;], m = 3</span>
  <span class="token comment">// output [[&quot;\u4E00&quot;, &quot;\u4E8C&quot;, &quot;\u4E09&quot;], [&quot;\u56DB&quot;, &quot;\u4E94&quot;, undefined]]</span>
  <span class="token keyword">function</span> <span class="token function">equalSplitList</span><span class="token punctuation">(</span><span class="token parameter">list<span class="token punctuation">,</span> rowLimit</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token comment">// 1. \u8BA1\u7B97\u9700\u8981\u7684\u884C\u6570</span>
    <span class="token keyword">let</span> rowCount <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span>length <span class="token operator">/</span> rowLimit<span class="token punctuation">)</span>
    <span class="token comment">// 2. \u586B\u5145 length</span>
    list<span class="token punctuation">.</span>length <span class="token operator">=</span> rowLimit <span class="token operator">*</span> rowCount
    <span class="token comment">// 3. \u5206\u5272</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> rowCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> cur <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>i <span class="token operator">*</span> rowLimit<span class="token punctuation">,</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> rowLimit<span class="token punctuation">)</span>
      <span class="token comment">// \u586B\u5145 null\uFF0C\u4EE5\u4FBF map \u8F93\u51FA</span>
      <span class="token comment">// \u4F18\u5316\uFF1A% \u53D6\u6A21</span>
      <span class="token comment">//       if (i === rowCount - 1) {</span>
      <span class="token comment">//         let n = cur.length - 1</span>
      <span class="token comment">//         while (n &gt;= 0 &amp;&amp; cur[n] === undefined) {</span>
      <span class="token comment">//           cur[n] = null</span>
      <span class="token comment">//           n--</span>
      <span class="token comment">//         }</span>
      <span class="token comment">//       }</span>
      result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> result
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br></div></div>`,2);function t(o,e){return p}var l=n(a,[["render",t],["__file","equal-split-list.html.vue"]]);export{l as default};
