import{r as a,o as n,c as s,a as l,w as e,F as t,b as p,d as o}from"./app.26466922.js";const i={},c=l("h1",{id:"leetcode",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#leetcode","aria-hidden":"true"},"#"),p(" Leetcode")],-1),u={class:"table-of-contents"},r=p("26. 删除排序数组中的重复项"),d=p("70. 爬楼梯"),h=p("121. 买卖股票的最佳时机"),k=p("3. 无重复字符的最长子串"),_=p("387. 字符串中的第一个唯一字符"),b=p("88. 合并两个有序数组"),f=p("896. 单调数列"),m=p("LCP 06. 拿硬币"),x=p("680. 验证回文字符串 Ⅱ"),g=p("215. 数组中的第K个最大元素"),w=p("209. 长度最小的子数组"),v=p("1143. 最长公共子序列"),j=o('<h2 id="_26-删除排序数组中的重复项" tabindex="-1"><a class="header-anchor" href="#_26-删除排序数组中的重复项" aria-hidden="true">#</a> 26. 删除排序数组中的重复项</h2><p>题意：</p><ol><li>就地修改</li><li>要求空间占用 O(1)，不能用中间数组</li></ol><p>思路：</p><ol><li>双指针，慢指针在元素不重复时才移动</li></ol><ul><li>重点不是 nums 修改，而是输出 length。结合 length，可以作一次 slice，给出 nums</li></ul><ol start="2"><li>倒序遍历，当元素重复时，删除当前项</li></ol><ul><li>正序剪切，会影响 i。倒序减切掉一个元素，i--，不影响待处理元素（身后）</li></ul><h2 id="_70-爬楼梯" tabindex="-1"><a class="header-anchor" href="#_70-爬楼梯" aria-hidden="true">#</a> 70. 爬楼梯</h2><p>思路：</p><ol><li>记忆化递归</li></ol><h2 id="_121-买卖股票的最佳时机" tabindex="-1"><a class="header-anchor" href="#_121-买卖股票的最佳时机" aria-hidden="true">#</a> 121. 买卖股票的最佳时机</h2><p>题意：</p><ol><li>价格不会为负</li></ol><p>思路：</p><ol><li>双指针，慢指针总是指向最小价格</li></ol><p>注意点：</p><ol><li>给<code>Math.max</code>方法传入太大的数组，会导致超时，解决技巧，遍历时更新最小值</li><li>从第 2 个价格开始才能计算价格差，初始化最小价格为第一个价格</li></ol><h2 id="_3-无重复字符的最长子串" tabindex="-1"><a class="header-anchor" href="#_3-无重复字符的最长子串" aria-hidden="true">#</a> 3. 无重复字符的最长子串</h2><p>思路：</p><ol><li>滑动窗口</li><li>维护一个窗口，窗口右边界从 -1 开始</li></ol><h2 id="_387-字符串中的第一个唯一字符" tabindex="-1"><a class="header-anchor" href="#_387-字符串中的第一个唯一字符" aria-hidden="true">#</a> 387. 字符串中的第一个唯一字符</h2><p>思路：</p><ol><li>暴力，O(n^2)</li><li>两次循环，时间 O(n)</li><li>由于 map 中没有存索引，第二次循环还是遍历原数组，以输出索引</li></ol><h2 id="_88-合并两个有序数组" tabindex="-1"><a class="header-anchor" href="#_88-合并两个有序数组" aria-hidden="true">#</a> 88. 合并两个有序数组</h2><p>思路：</p><ol><li>双指针，倒序取较大值，当 nums2 取空时，结束。 case 要考虑全，如 p1 == -1 p2 == -1</li></ol><h2 id="_896-单调数列" tabindex="-1"><a class="header-anchor" href="#_896-单调数列" aria-hidden="true">#</a> 896. 单调数列</h2><p>思路：</p><ol><li>一次遍历，否定判断，输出一个为真或全部为真</li></ol><h2 id="lcp-06-拿硬币" tabindex="-1"><a class="header-anchor" href="#lcp-06-拿硬币" aria-hidden="true">#</a> LCP 06. 拿硬币</h2><p>公式：<code>f(x) = x / 2 + x % 2</code></p><h2 id="_680-验证回文字符串-ii" tabindex="-1"><a class="header-anchor" href="#_680-验证回文字符串-ii" aria-hidden="true">#</a> 680. 验证回文字符串 Ⅱ</h2><p>依赖知识：如何判断回文，1. 反转 2. 双指针 3. 迭代</p><p>回文指针末尾，lr 相邻，或 l === r，后者只剩一个字母，满足回文，比不比较都行</p><p>贪心算法</p><h2 id="_215-数组中的第k个最大元素" tabindex="-1"><a class="header-anchor" href="#_215-数组中的第k个最大元素" aria-hidden="true">#</a> 215. 数组中的第K个最大元素</h2><ol><li>sort 降序后，取第 k - 1 元素 O(nlogn)</li></ol><h2 id="_209-长度最小的子数组" tabindex="-1"><a class="header-anchor" href="#_209-长度最小的子数组" aria-hidden="true">#</a> 209. 长度最小的子数组</h2><p>滑动窗口</p><ol><li>右边界移动，直到找到解</li><li>找到解，左边界移动</li></ol><h2 id="_1143-最长公共子序列" tabindex="-1"><a class="header-anchor" href="#_1143-最长公共子序列" aria-hidden="true">#</a> 1143. 最长公共子序列</h2><p>dp 使用二维数组记录结果</p><p>边界，一侧为空字串</p>',44),y={href:"https://alchemist-al.com/algorithms/longest-common-subsequence",target:"_blank",rel:"noopener noreferrer"},L=p("演示、公式"),O=o('<p>dp 方程</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">===</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  table<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">=</span> table<span class="token punctuation">[</span>row <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>col <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n  table<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>table<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> table<span class="token punctuation">[</span>row <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><img src="http://ww1.sinaimg.cn/large/4e5d3ea7ly1gyr42umo68j20av06ytbt.jpg" alt="4e5d3ea7ly1gyr42umo68j20av06ytbt.jpg (391×250)"></p><p>关联题目：583. 两个字符串的删除操作</p>',4);i.render=function(p,o){const i=a("RouterLink"),C=a("OutboundLink");return n(),s(t,null,[c,l("nav",u,[l("ul",null,[l("li",null,[l(i,{to:"#_26-删除排序数组中的重复项"},{default:e((()=>[r])),_:1})]),l("li",null,[l(i,{to:"#_70-爬楼梯"},{default:e((()=>[d])),_:1})]),l("li",null,[l(i,{to:"#_121-买卖股票的最佳时机"},{default:e((()=>[h])),_:1})]),l("li",null,[l(i,{to:"#_3-无重复字符的最长子串"},{default:e((()=>[k])),_:1})]),l("li",null,[l(i,{to:"#_387-字符串中的第一个唯一字符"},{default:e((()=>[_])),_:1})]),l("li",null,[l(i,{to:"#_88-合并两个有序数组"},{default:e((()=>[b])),_:1})]),l("li",null,[l(i,{to:"#_896-单调数列"},{default:e((()=>[f])),_:1})]),l("li",null,[l(i,{to:"#lcp-06-拿硬币"},{default:e((()=>[m])),_:1})]),l("li",null,[l(i,{to:"#_680-验证回文字符串-ii"},{default:e((()=>[x])),_:1})]),l("li",null,[l(i,{to:"#_215-数组中的第k个最大元素"},{default:e((()=>[g])),_:1})]),l("li",null,[l(i,{to:"#_209-长度最小的子数组"},{default:e((()=>[w])),_:1})]),l("li",null,[l(i,{to:"#_1143-最长公共子序列"},{default:e((()=>[v])),_:1})])])]),j,l("p",null,[l("a",y,[L,l(C)])]),O],64)};export default i;
