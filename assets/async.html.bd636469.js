import{r as n,o as s,c as a,a as p,w as t,F as e,b as o,d as c}from"./app.0e74f851.js";const l={},u=p("h1",{id:"异步",tabindex:"-1"},[p("a",{class:"header-anchor",href:"#异步","aria-hidden":"true"},"#"),o(" 异步")],-1),i={class:"table-of-contents"},r=o("Promise"),k=o("参考"),b=c('<h2 id="promise" tabindex="-1"><a class="header-anchor" href="#promise" aria-hidden="true">#</a> Promise</h2><ul><li>模块用法</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">&#39;axios&#39;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">fetchHtml</span><span class="token punctuation">(</span><span class="token parameter">url</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">response</span> <span class="token operator">=&gt;</span> <span class="token function">resolve</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div>',3),d=p("p",null,"在 then 里面（第二个 fn）处理 error，与在外面 catch 有何区别？",-1),m=p("li",null,[p("code",null,"catch()"),o("即"),p("code",null,"Promise.prototype.catch(onRejected)"),o("相当于"),p("code",null,"Promise.prototype.then(undefined, onRejected)")],-1),f=p("li",null,"catch 能捕获 then 中抛出的错误，比在 then 中处理错误更好",-1),h={href:"https://jsfiddle.net/x9bjmwo2/4/",target:"_blank",rel:"noopener noreferrer"},y=o("示例"),g=c('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">apiCall</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;uh oh 1&#39;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;this will catch the error&#39;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div>',1),w=p("li",null,[p("p",null,"Promise.all 可以并行请求，也就是说多个请求依赖时，都尽量写成 all 形式")],-1),v=c('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> a<span class="token punctuation">,</span> b <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">r</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n<span class="token comment">// bad</span>\n<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">someAsyncFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">asyncGetUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token keyword">const</span> categories <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">asyncGetCategories</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token keyword">const</span> mapping <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">asyncMapUserWithCategory</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> categories<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">someAsyncFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">[</span>user<span class="token punctuation">,</span> categories<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n    <span class="token function">asyncGetUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token function">asyncGetCategories</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">]</span><span class="token punctuation">)</span>\n  <span class="token keyword">const</span> mapping <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">asyncMapUserWithCategory</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> categories<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h3 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h3>',2),j={href:"http://liubin.org/promises-book/",target:"_blank",rel:"noopener noreferrer"},x=o("JavaScript Promise 迷你书（中文版）");l.render=function(o,c){const l=n("RouterLink"),P=n("OutboundLink");return s(),a(e,null,[u,p("nav",i,[p("ul",null,[p("li",null,[p(l,{to:"#promise"},{default:t((()=>[r])),_:1}),p("ul",null,[p("li",null,[p(l,{to:"#参考"},{default:t((()=>[k])),_:1})])])])])]),b,p("ul",null,[p("li",null,[d,p("ul",null,[m,f,p("li",null,[p("a",h,[y,p(P)])])]),g]),w]),v,p("p",null,[p("a",j,[x,p(P)])])],64)};export default l;
