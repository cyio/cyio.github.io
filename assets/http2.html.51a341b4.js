import{r as e,o as t,c as r,a,w as l,F as n,b as d,d as i}from"./app.0e74f851.js";const s={},h=a("h1",{id:"http-2",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#http-2","aria-hidden":"true"},"#"),d(" HTTP 2")],-1),o={class:"table-of-contents"},p=d("TLDR"),u=d("概要"),c=d("header 压缩"),T=d("与 HTTP 1.1 对比"),b=i('<h2 id="tldr" tabindex="-1"><a class="header-anchor" href="#tldr" aria-hidden="true">#</a> TLDR</h2><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>http 1.1 6-8 多域 keep-alive 请求结束不关闭 基于文本 按序响应、队首阻塞\nHTTP 2 二进制分帧 乱序并发，合并 header 压缩\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="概要" tabindex="-1"><a class="header-anchor" href="#概要" aria-hidden="true">#</a> 概要</h2><ul><li>新特性： <ol><li>多路复用的单一长连接</li><li>请求优先级</li><li>服务器推送</li><li>header 压缩</li></ol></li><li>HTTP 1.x 浏览器有同域请求并发限制</li><li>HTTP 2 同一连接并发互换，提高吞吐 <blockquote><p>在 HTTP/2 中，客户端向某个域名的服务器请求页面的过程中，只会创建一条 TCP 连接，即使这页面可能包含上百个资源。而之前的 HTTP/1.x 一般 会创建 6-8 条 TCP 连接来请求这 100 多个资源。单一的连接应该是 HTTP2 的主要优势，单一的连接能减少 TCP 握手带来的时延 HTTP2 中用一条单一的长连接，避免了创建多个 TCP 连接带来的网络开销，提高了吞吐量。</p></blockquote></li></ul>',4),f={href:"https://http2-explained.haxx.se/zh/part6",target:"_blank",rel:"noopener noreferrer"},P=d("The http2 protocol · http2 explained"),x={href:"https://httpwg.org/specs/rfc7540.html#intro",target:"_blank",rel:"noopener noreferrer"},H=d("Hypertext Transfer Protocol Version 2 (HTTP/2)"),g=i('<h2 id="header-压缩" tabindex="-1"><a class="header-anchor" href="#header-压缩" aria-hidden="true">#</a> header 压缩</h2><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>HTTP\n  TLS gzip\n    TCP\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>一开始云服务 header 和 body 无差别压缩，由于安全原因，禁用了 header 压缩，直到 H2。HPACK 专用算法</p><p><code>key:value</code> 静态字典 + Huffman + 动态字典，请求复用时，压缩率可达 99%</p>',4),m={href:"https://blog.cloudflare.com/hpack-the-silent-killer-feature-of-http-2/",target:"_blank",rel:"noopener noreferrer"},k=d("HPACK: the silent killer (feature) of HTTP/2"),v=i('<h2 id="与-http-1-1-对比" tabindex="-1"><a class="header-anchor" href="#与-http-1-1-对比" aria-hidden="true">#</a> 与 HTTP 1.1 对比</h2><table><thead><tr><th></th><th>html1.x</th><th>html2</th></tr></thead><tbody><tr><td>TCP</td><td>一个</td><td>复用</td></tr><tr><td>cookie</td><td>每个请求携带</td><td>一个连接</td></tr><tr><td>header</td><td>无压缩</td><td>HPACK</td></tr><tr><td>传输格式</td><td>文本</td><td>二进制分帧、多流</td></tr></tbody></table>',2),C=d("参考："),_={href:"https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/14",target:"_blank",rel:"noopener noreferrer"},y=d("第 15 题：简单讲解一下 http2 的多路复用 · Issue #14 · Advanced-Frontend/Daily-Interview-Question"),A=a("p",null,"keep-alive 虽然可以复用一个连接处理多个请求，但序列响应、存在队首阻塞问题，即前序请求不完成、后续请求只能等着。",-1),D=a("p",null,"建立多个连接客户端、服务端开销大",-1),L={href:"https://blog.csdn.net/justinzengTM/article/details/105918883",target:"_blank",rel:"noopener noreferrer"},w=d("HTTP/1.1队首阻塞和HTTP/2优化_大力海棠的博客-CSDN博客");s.render=function(d,i){const s=e("RouterLink"),z=e("OutboundLink");return t(),r(n,null,[h,a("nav",o,[a("ul",null,[a("li",null,[a(s,{to:"#tldr"},{default:l((()=>[p])),_:1})]),a("li",null,[a(s,{to:"#概要"},{default:l((()=>[u])),_:1})]),a("li",null,[a(s,{to:"#header-压缩"},{default:l((()=>[c])),_:1})]),a("li",null,[a(s,{to:"#与-http-1-1-对比"},{default:l((()=>[T])),_:1})])])]),b,a("p",null,[a("a",f,[P,a(z)]),a("a",x,[H,a(z)])]),g,a("p",null,[a("a",m,[k,a(z)])]),v,a("p",null,[C,a("a",_,[y,a(z)])]),A,D,a("p",null,[a("a",L,[w,a(z)])])],64)};export default s;
