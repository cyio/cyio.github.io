import{r as n,o as s,c as a,a as p,F as t,d as o,b as e}from"./app.0e74f851.js";const c={},l=o('<h1 id="深拷贝" tabindex="-1"><a class="header-anchor" href="#深拷贝" aria-hidden="true">#</a> 深拷贝</h1><p>优化点：利用 proxy 监听数据变化，仅对变化的属性进行深拷贝（immer，增量）</p><p>for in 可以遍历数组</p><p>对象循环引用不处理，会导致栈溢出，解决是以 obj 为 key，newObj 为 value，保存到 map。遍历过直接返回</p><p>循环引用是指引用自身？</p><p>Map =&gt; WeakMap</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 实现对象深拷贝，考察点：isObject for-in 递归</span>\n<span class="token comment">// 简化，不考虑数组</span>\n  <span class="token keyword">let</span> a1 <span class="token operator">=</span> <span class="token punctuation">{</span>\n    a<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n    b<span class="token operator">:</span> <span class="token punctuation">{</span>\n      c<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n      d<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> e<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n      e<span class="token operator">:</span> <span class="token keyword">null</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  a1<span class="token punctuation">.</span>f <span class="token operator">=</span> a1\n\n  <span class="token keyword">function</span> <span class="token function">shallowClone</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      result<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> obj<span class="token punctuation">[</span>i<span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> result\n  <span class="token punctuation">}</span>\n  <span class="token keyword">function</span> <span class="token function">isObject</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&#39;[object Object]&#39;</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">function</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> res <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n    <span class="token comment">// 处理循环引用</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isObject</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>\n      map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> res<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">in</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">let</span> cur <span class="token operator">=</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span>\n      <span class="token comment">// res[i] = Array.isArray(cur) || isObject(cur) ? deepClone(cur, map) : cur</span>\n      res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">isObject</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span>\n          <span class="token operator">?</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>cur<span class="token punctuation">,</span> map<span class="token punctuation">)</span> \n          <span class="token operator">:</span> cur\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> res\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">let</span> a2 <span class="token operator">=</span> <span class="token function">shallowClone</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span>\n  <span class="token keyword">let</span> a3 <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span>\n\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;object shallowClone&#39;</span><span class="token punctuation">,</span> a1<span class="token punctuation">.</span>b<span class="token punctuation">.</span>c <span class="token operator">===</span> a2<span class="token punctuation">.</span>b<span class="token punctuation">.</span>c<span class="token punctuation">)</span>    <span class="token comment">// expect true</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;object deepClone&#39;</span><span class="token punctuation">,</span> a1<span class="token punctuation">.</span>b<span class="token punctuation">.</span>c <span class="token operator">===</span> a3<span class="token punctuation">.</span>b<span class="token punctuation">.</span>c<span class="token punctuation">)</span>    <span class="token comment">// expect false</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;array shallowClone&#39;</span><span class="token punctuation">,</span> a1<span class="token punctuation">.</span>b<span class="token punctuation">.</span>d <span class="token operator">===</span> a2<span class="token punctuation">.</span>b<span class="token punctuation">.</span>d<span class="token punctuation">)</span>    <span class="token comment">// expect true</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;array deepClone&#39;</span><span class="token punctuation">,</span> a1<span class="token punctuation">.</span>b<span class="token punctuation">.</span>d <span class="token operator">===</span> a3<span class="token punctuation">.</span>b<span class="token punctuation">.</span>d<span class="token punctuation">)</span>    <span class="token comment">// expect false</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br></div></div>',7),u={href:"https://juejin.cn/post/6844903929705136141",target:"_blank",rel:"noopener noreferrer"},r=e("如何写出一个惊艳面试官的深拷贝?");c.render=function(o,e){const c=n("OutboundLink");return s(),a(t,null,[l,p("p",null,[p("a",u,[r,p(c)])])],64)};export default c;
