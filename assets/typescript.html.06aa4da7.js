import{r as n,o as a,c as s,a as e,w as t,F as p,b as r,d as l}from"./app.31fc93bc.js";const o={},c=e("h1",{id:"typescript",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#typescript","aria-hidden":"true"},"#"),r(" Typescript")],-1),i={class:"table-of-contents"},u=r("interface 和 type"),b=r("对象入参"),d=r("extends"),m=r("泛型"),k=r("case"),g=r("新特性"),h=e("blockquote",null,[e("p",null,"为了说明静态类型化的好处，由于环境变量中的错字，我仅花了 30 分钟进行调试 - TJ https://mobile.twitter.com/tjholowaychuk/status/1276470952059113473")],-1),f=e("p",null,"vim 快速 fix，默认根据使用推测（即使推测不准，也省去一些书写）",-1),y={href:"https://www.tslang.cn/docs/handbook/basic-types.html",target:"_blank",rel:"noopener noreferrer"},v=r("基础类型 · TypeScript 中文网 · TypeScript——JavaScript 的超集"),x={href:"https://taskhub.work/article/80348744310312960",target:"_blank",rel:"noopener noreferrer"},w=r("Typescript 高级语法进阶"),T={href:"https://jishuin.proginn.com/p/763bfbd2418a",target:"_blank",rel:"noopener noreferrer"},S=r("用 TypeScript 编写 React 的最佳实践-技术圈"),j={href:"https://juejin.im/post/6844903904140853255",target:"_blank",rel:"noopener noreferrer"},_=r("TypeScript 中高级应用与最佳实践 - 掘金"),A=e("p",null,"Tuple 元组 有组织的数组",-1),E=r("08 Record & Dictionary & Many "),R={href:"https://juejin.im/post/6844903863791648782",target:"_blank",rel:"noopener noreferrer"},J=r("TypeScript 高级技巧 - 掘金"),B={href:"https://www.youtube.com/watch?v=P-J9Eg7hJwE",target:"_blank",rel:"noopener noreferrer"},P=r("Adopting Typescript at Scale - Brie Bunge | JSConf Hawaii 2019 - YouTube"),M={href:"https://github.com/airbnb/ts-migrate/tree/master/packages/ts-migrate",target:"_blank",rel:"noopener noreferrer"},D=r("ts-migrate/packages/ts-migrate at master · airbnb/ts-migrate"),F={href:"https://medium.com/airbnb-engineering/ts-migrate-a-tool-for-migrating-to-typescript-at-scale-cd23bfeb5cc",target:"_blank",rel:"noopener noreferrer"},O=r("ts-migrate: A Tool for Migrating to TypeScript at Scale | by Sergii Rudenko | Airbnb Engineering & Data Science | Aug, 2020 | Medium"),H=e("blockquote",null,[e("p",null,"TS的ROI（投入回报率）是勾型的。小型且不长久的项目慎入，越是需要多人合作和生命周期越长的项目，回报率越高")],-1),I={href:"https://zhuanlan.zhihu.com/p/82567664",target:"_blank",rel:"noopener noreferrer"},q=r("《TypeScript开发实战》总结 - 知乎"),z=l('<h2 id="interface-和-type" tabindex="-1"><a class="header-anchor" href="#interface-和-type" aria-hidden="true">#</a> interface 和 type</h2><ul><li>过去区别大，现在区别很小，都可以扩展</li><li>interface 适合开发库，便于扩展，写业务组件建议用 type</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">interface</span> <span class="token class-name">Props</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> string<span class="token punctuation">;</span>\n  color<span class="token operator">:</span> string<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\ntype OtherProps <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> string<span class="token punctuation">,</span>\n  color<span class="token operator">:</span> string\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="对象入参" tabindex="-1"><a class="header-anchor" href="#对象入参" aria-hidden="true">#</a> 对象入参</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Heading</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> name<span class="token punctuation">,</span> color <span class="token punctuation">}</span><span class="token operator">:</span> Props</span><span class="token punctuation">)</span><span class="token operator">:</span> React<span class="token punctuation">.</span>ReactNode <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span>My Website Heading<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="extends" tabindex="-1"><a class="header-anchor" href="#extends" aria-hidden="true">#</a> extends</h2><p>type 也可以扩展，用<code>&amp;</code>符号</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>type <span class="token constant">A</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  a<span class="token operator">:</span> number\n<span class="token punctuation">}</span>\n\n<span class="token keyword">interface</span> <span class="token class-name">AB</span> <span class="token keyword">extends</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>\n  b<span class="token operator">:</span> string<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 与上一种等价</span>\ntype <span class="token constant">TAB</span> <span class="token operator">=</span> <span class="token constant">A</span> <span class="token operator">&amp;</span> <span class="token punctuation">{</span>\n  b<span class="token operator">:</span> string\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="泛型" tabindex="-1"><a class="header-anchor" href="#泛型" aria-hidden="true">#</a> 泛型</h2><p>适用多个类型，保证返回类型一致</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 定义，相当于函数，入参是类型约束</span>\n<span class="token keyword">function</span> identity<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>arg<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> arg\n<span class="token punctuation">}</span>\n<span class="token comment">// 使用</span>\n<span class="token keyword">let</span> output <span class="token operator">=</span> identity <span class="token operator">&lt;</span> string <span class="token operator">&gt;</span> <span class="token string">&#39;myString&#39;</span> <span class="token comment">// type of output will be &#39;string&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>React.FC 有泛型接口</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>type $TSFixMe = any\n\n// @ts-nocheck\n\n// @ts-ignore\n\n// 没有错误后，会提示移除注释，优于 @ts-ignore\n// @ts-expect-error\n\n// tsx\n{/* \n  // @ts-ignore */}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>渐近<code>nocheck -&gt; expect-error</code></p>',14),C={href:"https://jkchao.github.io/typescript-book-chinese/error/interpreting.html#%25E7%25AE%2580%25E6%25B4%2581",target:"_blank",rel:"noopener noreferrer"},L=r("解读 Errors | 深入理解 TypeScript"),N=e("h2",{id:"case",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#case","aria-hidden":"true"},"#"),r(" case")],-1),W=e("li",null,[e("p",null,"JSX element type 'Element[]' is not a constructor function for JSX elements #33487"),e("p",null,"React Element 要求是对象，用 Fragment 包下")],-1),X=e("li",null,[e("p",null,"TS2322: Type 'Timeout' is not assignable to type 'number'” when running unit tests"),e("p",null,"使用 windows.setTimeout 解决")],-1),Y=e("p",null,"No index signature with a parameter of type 'string' was found on type 'xxx'",-1),$=e("p",null,"对象访问下角标限制",-1),G={href:"https://basarat.gitbook.io/typescript/type-system/index-signatures",target:"_blank",rel:"noopener noreferrer"},K=r("Index Signatures - TypeScript Deep Dive"),Q=e("li",null,[e("p",null,"Object is possibly 'undefined'?"),e("p",null,[r("提示结尾的访问，可能取不到，需要使用"),e("code",null,"?")])],-1),U=l('<h2 id="新特性" tabindex="-1"><a class="header-anchor" href="#新特性" aria-hidden="true">#</a> 新特性</h2><p>unknown type 处理第三方库或 API 数据，表示需要检查数据有效性。如，接口字段有多种类型，null/[]</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>  readonly scores: readonly number[];\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>第一个表示不能熏赋值，第二个表示内部不可变</p><p>const assertions 不可变数据结构</p>',5),V={href:"https://www.carlrippon.com/6-useful-typescript-3-features-you-need-to-know/",target:"_blank",rel:"noopener noreferrer"},Z=r("6 useful TypeScript 3 features you need to know | Building SPAs"),nn={href:"https://juejin.cn/post/6872111128135073806",target:"_blank",rel:"noopener noreferrer"},an=r("一份不可多得的 TS 学习指南（1.8W字）");o.render=function(r,l){const o=n("RouterLink"),sn=n("OutboundLink");return a(),s(p,null,[c,e("nav",i,[e("ul",null,[e("li",null,[e(o,{to:"#interface-和-type"},{default:t((()=>[u])),_:1})]),e("li",null,[e(o,{to:"#对象入参"},{default:t((()=>[b])),_:1})]),e("li",null,[e(o,{to:"#extends"},{default:t((()=>[d])),_:1})]),e("li",null,[e(o,{to:"#泛型"},{default:t((()=>[m])),_:1})]),e("li",null,[e(o,{to:"#case"},{default:t((()=>[k])),_:1})]),e("li",null,[e(o,{to:"#新特性"},{default:t((()=>[g])),_:1})])])]),h,f,e("p",null,[e("a",y,[v,e(sn)])]),e("p",null,[e("a",x,[w,e(sn)])]),e("p",null,[e("a",T,[S,e(sn)])]),e("p",null,[e("a",j,[_,e(sn)])]),A,e("p",null,[E,e("a",R,[J,e(sn)])]),e("p",null,[e("a",B,[P,e(sn)])]),e("p",null,[e("a",M,[D,e(sn)])]),e("p",null,[e("a",F,[O,e(sn)])]),H,e("p",null,[e("a",I,[q,e(sn)])]),z,e("p",null,[e("a",C,[L,e(sn)])]),N,e("ul",null,[W,X,e("li",null,[Y,$,e("p",null,[e("a",G,[K,e(sn)])])]),Q]),U,e("p",null,[e("a",V,[Z,e(sn)])]),e("p",null,[e("a",nn,[an,e(sn)])])],64)};export default o;
