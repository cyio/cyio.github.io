import{r as n,o as a,c as s,a as e,w as t,F as l,b as p,d as o}from"./app.09b8f80a.js";const r={},i=e("h1",{id:"dom",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#dom","aria-hidden":"true"},"#"),p(" DOM")],-1),c={class:"table-of-contents"},u=p("遍历"),d=p("性能"),m=p("优化"),k=p("API"),h=p("脚本"),b=p("注意点"),f=p("重绘和回流"),g=p("样式计算"),v=p("innerHTML"),M=p("tag 标签只用小写"),x=p("观察 DOM 更新"),D=p("页面插入 dom 几种方式"),O=p("DOM 选择"),_=p("页面加载过程(输入 url 到加载出页面)"),T=o('<h2 id="遍历" tabindex="-1"><a class="header-anchor" href="#遍历" aria-hidden="true">#</a> 遍历</h2><ul><li><p>关系：父子、相邻，首尾</p></li><li><p>区分 Element (Node) 和 Node，node 包含了 textNode、commentNode、空 等</p><p>childNodes vs children(Element)</p></li><li><p>集合，类数组</p><p><code>for of</code> <code>Array.from</code></p></li></ul><h2 id="性能" tabindex="-1"><a class="header-anchor" href="#性能" aria-hidden="true">#</a> 性能</h2><p>简述，为什么 DOM 操作影响性能？ 因为某些情况 NodeList 对象是动态的，每次访问 NodeList 对象，都会运行一次查询。</p><blockquote><p>理解 DOM 的关键，就是理解 DOM 对性能的影响。DOM 操作往往是 JavaScript 程序中开销最大的部分，而因访问 NodeList 导致的问题 为最多。NodeList 对象都是“动态的”，这就意味着每次访问 NodeList 对象，都会运行一次查询。所以应减少对 NodeList 的访问，对 DOM 的操作。</p></blockquote><p>https://developer.mozilla.org/en-US/docs/Web/API/NodeList</p><h3 id="优化" tabindex="-1"><a class="header-anchor" href="#优化" aria-hidden="true">#</a> 优化</h3>',7),L=e("code",null,"document.createDocumentFragment",-1),w=p(),y={href:"https://www.jianshu.com/p/7628670a94e6",target:"_blank",rel:"noopener noreferrer"},j=p("DocumentFragment - 简书"),S=o('<ul><li>文档片段，不属于文档树，用于占位</li><li>继承了 Node 方法</li></ul><h2 id="api" tabindex="-1"><a class="header-anchor" href="#api" aria-hidden="true">#</a> API</h2><p>常用方法：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>document<span class="token punctuation">.</span>write\ndocument<span class="token punctuation">.</span>writeln <span class="token comment">// 换行</span>\ndiv<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&#39;title&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 或者 div.title</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><code>[ele].insertAdjacentHTML([position], [html])</code> 邻接插入，比 innerHTML 效率高</p><h2 id="脚本" tabindex="-1"><a class="header-anchor" href="#脚本" aria-hidden="true">#</a> 脚本</h2><ul><li>问题：当用户鼠标移动够快时，积累在 setTimeout 队列里的事件会导致动画效果产生滞后。 解决：将目标元素与事件绑定，以便清除。</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">moveElement</span> <span class="token punctuation">(</span><span class="token parameter">elementID<span class="token punctuation">,</span> final_x<span class="token punctuation">,</span> final_y<span class="token punctuation">,</span> interval</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token operator">...</span>\n    <span class="token keyword">var</span> elem <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>elementID<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>elem<span class="token punctuation">.</span>movement<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">clearTimeout</span><span class="token punctuation">(</span>elem<span class="token punctuation">.</span>movement<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token operator">...</span>\n    <span class="token keyword">var</span> repeat <span class="token operator">=</span> <span class="token string">&quot;moveElement(&#39;&quot;</span><span class="token operator">+</span>elementID<span class="token operator">+</span><span class="token string">&quot;&#39;, &#39;&quot;</span><span class="token operator">+</span>final_x<span class="token operator">+</span><span class="token string">&quot;&#39;, &#39;&quot;</span><span class="token operator">+</span>final_y<span class="token operator">+</span><span class="token string">&quot;&#39;, &#39;&quot;</span><span class="token operator">+</span>interval<span class="token operator">+</span><span class="token string">&quot;&#39;)&quot;</span><span class="token punctuation">;</span>\n    <span class="token comment">// element.property = value</span>\n    elem<span class="token punctuation">.</span>movement <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>repeat<span class="token punctuation">,</span> interval<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><ul><li>步进为 1px 时太慢了，如何解决？</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 每次向目标位置移动1px，执行条件是尚未到达</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>xpos <span class="token operator">&lt;</span> final_x<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  xpos<span class="token operator">++</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li>根据距离提高步进，每次前进距离的十分之一，距离小于 10px 时，dist 向上取整，按 1px 步进。</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>dist <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token punctuation">(</span>final_x <span class="token operator">-</span> xpos<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span>\nxpos <span class="token operator">=</span> xpos <span class="token operator">+</span> dist\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="注意点" tabindex="-1"><a class="header-anchor" href="#注意点" aria-hidden="true">#</a> 注意点</h2><ul><li>focus blur 事件只会在 input textaera select 等键盘元素上发生</li></ul><h2 id="重绘和回流" tabindex="-1"><a class="header-anchor" href="#重绘和回流" aria-hidden="true">#</a> 重绘和回流</h2><ul><li><p>重绘，样式变化，浏览器重新绘制样式</p><p>paint 样式</p></li><li><p>回流，尺寸、位置、属性变化，浏览器重新渲染部分或全部</p><p>flow 布局 性能影响更大</p></li></ul>',16),q={href:"https://gist.github.com/faressoft/36cdd64faae21ed22948b458e6bf04d5",target:"_blank",rel:"noopener noreferrer"},H=p("DOM Performance (Reflow & Repaint) (Summary)"),N=o('<ul><li>优化策略1：合并操作 class/documentFragment</li><li>优化策略2：用重绘属性代替回流属性 <ul><li>transform 代替 top/left</li><li>opacity 替代 visibility</li></ul></li><li>多个 DOM 统一操作（虽然V8会有缓存优化）</li><li>先将 DOM 离线，即display：none；修改后显示</li><li>不要把 DOM 放在已给循环中作为循环变量</li><li>不要使用 table</li></ul><h3 id="样式计算" tabindex="-1"><a class="header-anchor" href="#样式计算" aria-hidden="true">#</a> 样式计算</h3>',2),P=e("li",null,"50% 时间匹配选择器，引起页面或局部重新布局，reflow",-1),E=e("li",null,"降低选择器的复杂性；使用以类为中心的方法，例如 BEM。选择器合并，少用选择规则",-1),C=p("减少必须计算其样式的元素数量，如在 body 上操作，所有后代可能要重算 "),I={href:"https://developers.google.com/web/fundamentals/performance/rendering/reduce-the-scope-and-complexity-of-style-calculations",target:"_blank",rel:"noopener noreferrer"},R=p("缩小样式计算的范围并降低其复杂性  |  Web  |  Google Developers"),A={href:"https://juejin.im/post/5c009115f265da612859d8e2",target:"_blank",rel:"noopener noreferrer"},F=p("chrome devtools 使用详解——Performance - 掘金"),G={href:"https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/",target:"_blank",rel:"noopener noreferrer"},W=p("Get Started With Analyzing Runtime Performance  |  Tools for Web Developers  |  Google Developers"),J=o('<h2 id="innerhtml" tabindex="-1"><a class="header-anchor" href="#innerhtml" aria-hidden="true">#</a> innerHTML</h2><p>当读取<code>innerHTML</code>时，HTML 已经被解析为 DOM 并丢弃，标签会被转换为小写，有的浏览器还不一样，因此拿不到原始的 HTML</p><h2 id="tag-标签只用小写" tabindex="-1"><a class="header-anchor" href="#tag-标签只用小写" aria-hidden="true">#</a> tag 标签只用小写</h2><p>多个词用短杠连接，大小写不敏感，内部会转为小写？为了保证转换一致性，最好用小写。Vue 的组件在 HTML 中用的都是小写</p><h2 id="观察-dom-更新" tabindex="-1"><a class="header-anchor" href="#观察-dom-更新" aria-hidden="true">#</a> 观察 DOM 更新</h2>',5),z=p("DOM- MutationObserver "),B={href:"https://codepen.io/dayvidwhy/pen/egdZyY?editors=1011",target:"_blank",rel:"noopener noreferrer"},U=p("MutationObserver Example"),V=o('<p>vue - update</p><h2 id="页面插入-dom-几种方式" tabindex="-1"><a class="header-anchor" href="#页面插入-dom-几种方式" aria-hidden="true">#</a> 页面插入 dom 几种方式</h2><ul><li><code>createElement</code><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code>const div = document.createElement(&#39;div&#39;) \ndiv.innerHTML = `\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>global-page-close<span class="token punctuation">&quot;</span></span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value javascript language-javascript">window<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n` \ndocument.body.appendChild(div)\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div></li><li><code>document.createDocumentFragment</code> 不支持 innerHTML</li></ul>',3),Y={href:"https://github.com/wesbos/es6-articles/blob/master/13%2520-%2520Creating%2520HTML%2520fragments%2520with%2520Template%2520Literals.md",target:"_blank",rel:"noopener noreferrer"},Z=p("es6-articles/13 - Creating HTML fragments with Template Literals.md at master · wesbos/es6-articles"),K=e("h2",{id:"dom-选择",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#dom-选择","aria-hidden":"true"},"#"),p(" DOM 选择")],-1),Q=e("p",null,[e("img",{src:"http://eloquentjavascript.net/img/html-links.svg",alt:"节点关系示意图"})],-1),X=p("参考： "),$={href:"https://plainjs.com/javascript/",target:"_blank",rel:"noopener noreferrer"},nn=p("Plain JavaScript - Functions and Helpers"),an={href:"http://domenlightenment.com/",target:"_blank",rel:"noopener noreferrer"},sn=p("DOM Enlightenment - Exploring the relationship between JavaScript and the modern HTML DOM"),en=e("h2",{id:"页面加载过程-输入-url-到加载出页面",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#页面加载过程-输入-url-到加载出页面","aria-hidden":"true"},"#"),p(" 页面加载过程(输入 url 到加载出页面)")],-1),tn=e("p",null,"a. 请求过程：",-1),ln=e("pre",null,[e("code",null,"1. [URL=>DNS=>IP] 浏览器根据 DNS 服务器解析得到域名的 IP 地址\n2. [Client-Req-Server] 向这个 IP 的机器发送 HTTP 请求\n3. [Server-Res] 服务器收到、处理并返回 HTTP 请求\n4. [Res] 浏览器得到返回内容\n")],-1),pn=e("p",null,"b. 渲染过程：",-1),on=e("pre",null,[e("code",null,"1. [DOM树] 根据 HTML 结构生成 DOM 树\n2. [CSSOM] 根据 CSS 生成 CSSOM\n3. [渲染树] 将 DOM 和 CSSOM 整合形成 RenderTree\n4. [绘制] 根据 RenderTree 开始渲染和展示\n5. [链接] 加载执行外链资源\n")],-1),rn=e("p",null,"DOM 树 和 渲染树 的区别： DOM 树与 HTMl 标签一一对应，而渲染树不包含 head 和隐藏元素 display none",-1),cn=e("p",null,"CSS 不会阻塞 DOM 的解析，但会阻塞后续 DOM 渲染",-1),un={href:"https://blog.csdn.net/Gbing1228/article/details/103575756",target:"_blank",rel:"noopener noreferrer"},dn=p("浏览器的渲染过程，DOM 树和渲染树的区别？_Fairy的博客-CSDN博客");r.render=function(p,o){const r=n("RouterLink"),mn=n("OutboundLink");return a(),s(l,null,[i,e("nav",c,[e("ul",null,[e("li",null,[e(r,{to:"#遍历"},{default:t((()=>[u])),_:1})]),e("li",null,[e(r,{to:"#性能"},{default:t((()=>[d])),_:1}),e("ul",null,[e("li",null,[e(r,{to:"#优化"},{default:t((()=>[m])),_:1})])])]),e("li",null,[e(r,{to:"#api"},{default:t((()=>[k])),_:1})]),e("li",null,[e(r,{to:"#脚本"},{default:t((()=>[h])),_:1})]),e("li",null,[e(r,{to:"#注意点"},{default:t((()=>[b])),_:1})]),e("li",null,[e(r,{to:"#重绘和回流"},{default:t((()=>[f])),_:1}),e("ul",null,[e("li",null,[e(r,{to:"#样式计算"},{default:t((()=>[g])),_:1})])])]),e("li",null,[e(r,{to:"#innerhtml"},{default:t((()=>[v])),_:1})]),e("li",null,[e(r,{to:"#tag-标签只用小写"},{default:t((()=>[M])),_:1})]),e("li",null,[e(r,{to:"#观察-dom-更新"},{default:t((()=>[x])),_:1})]),e("li",null,[e(r,{to:"#页面插入-dom-几种方式"},{default:t((()=>[D])),_:1})]),e("li",null,[e(r,{to:"#dom-选择"},{default:t((()=>[O])),_:1})]),e("li",null,[e(r,{to:"#页面加载过程-输入-url-到加载出页面"},{default:t((()=>[_])),_:1})])])]),T,e("p",null,[L,w,e("a",y,[j,e(mn)])]),S,e("p",null,[e("a",q,[H,e(mn)])]),N,e("ul",null,[P,E,e("li",null,[C,e("a",I,[R,e(mn)]),e("a",A,[F,e(mn)]),e("a",G,[W,e(mn)])])]),J,e("p",null,[z,e("a",B,[U,e(mn)])]),V,e("p",null,[e("a",Y,[Z,e(mn)])]),K,Q,e("p",null,[X,e("a",$,[nn,e(mn)]),e("a",an,[sn,e(mn)])]),en,tn,ln,pn,on,rn,cn,e("p",null,[e("a",un,[dn,e(mn)])])],64)};export default r;
