import{_ as o,r as e,o as c,c as u,a as n,b as a,F as l,e as p,d as t}from"./app.2fa7c2f2.js";const r={},i=p(`<h1 id="\u6570\u7EC4\u6241\u5E73\u5316" tabindex="-1"><a class="header-anchor" href="#\u6570\u7EC4\u6241\u5E73\u5316" aria-hidden="true">#</a> \u6570\u7EC4\u6241\u5E73\u5316</h1><h2 id="_1-flat" tabindex="-1"><a class="header-anchor" href="#_1-flat" aria-hidden="true">#</a> 1. flat</h2><p>flat \u6307\u5B9A\u6DF1\u5EA6\u9012\u5F52\u5408\u5E76\uFF0C\u9ED8\u8BA4\u6DF1\u5EA6 1\uFF0C\u65E0\u9650\u6DF1\u5EA6 Infinite</p><p>flat(0) \u4E0D\u505A\u5904\u7406</p><h2 id="_2-json-\u8F6C\u6362-\u6B63\u5219" tabindex="-1"><a class="header-anchor" href="#_2-json-\u8F6C\u6362-\u6B63\u5219" aria-hidden="true">#</a> 2. JSON \u8F6C\u6362 + \u6B63\u5219</h2><p>\u601D\u8DEF\uFF1AJSON \u5E8F\u5217\u5316\uFF0C\u5B57\u7B26\u4E32\u66FF\u6362\u4E2D\u62EC\u53F7\uFF0C\u518D\u4E0E\u4E2D\u62EC\u53F7\u62FC\u63A5\uFF0C\u590D\u539F</p><ol><li>\u5E8F\u5217\u5316 <code>&quot;[1,2,[3,[4]]]&quot;</code></li><li>\u79FB\u9664\u4E2D\u62EC\u53F7\uFF0C\u53D8\u6210\u4E00\u7EF4 <code>&quot;1,2,3,4&quot;</code></li><li>\u52A0\u56DE\u9996\u5C3E\u4E2D\u62EC\u53F7</li><li>\u53CD\u5E8F\u5217\u5316</li></ol><p>\u4F18\u5316\u70B9\uFF1A\u6392\u9664\u5F00\u5934\u548C\u7ED3\u5C3E\u7684\u62EC\u53F7</p><p>\u590D\u6742\u5EA6\u5206\u6790\uFF1Areplace \u53EF\u80FD\u9700\u8981 O(n)</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>
<span class="token keyword">function</span> <span class="token function">flat</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>
  res <span class="token operator">=</span> res<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\[|\\]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
  res <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">[</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>res<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">]</span><span class="token template-punctuation string">\`</span></span>
  res <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
  <span class="token keyword">return</span> res
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">flat</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre></div><h2 id="_3-\u9012\u5F52" tabindex="-1"><a class="header-anchor" href="#_3-\u9012\u5F52" aria-hidden="true">#</a> 3. \u9012\u5F52</h2><p>res \u9700\u8981\u653E\u5728\u51FD\u6570\u5916\u9762\uFF0C\u4E0D\u662F\u7EAF\u51FD\u6570</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>
<span class="token keyword">function</span> <span class="token function">flat</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token keyword">function</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">of</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">inner</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token comment">// \u57FA\u7840\u90E8\u5206</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token function">inner</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>
  <span class="token keyword">return</span> res
<span class="token punctuation">}</span>
<span class="token function">flat</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>
</code></pre></div><h2 id="_4-reduce-\u9012\u5F52" tabindex="-1"><a class="header-anchor" href="#_4-reduce-\u9012\u5F52" aria-hidden="true">#</a> 4. reduce + \u9012\u5F52</h2><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>
<span class="token keyword">const</span> <span class="token function-variable function">flat</span> <span class="token operator">=</span> <span class="token parameter">arr</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">pre<span class="token punctuation">,</span> cur</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// concat \u53EF\u4EE5\u63A5 value or array\uFF0C\u5728\u8FD9\u91CC\u6BD4\u89E3\u6784 value \u5957\u4E00\u5C42\u65B9\u4FBF</span>
    <span class="token comment">// return [...pre, ...(Array.isArray(cur) ? flat(cur) : [cur])]</span>
    <span class="token keyword">return</span> pre<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">flat</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span> <span class="token operator">:</span> cur<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token function">flat</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
</code></pre></div><h2 id="_5-\u652F\u6301\u6DF1\u5EA6" tabindex="-1"><a class="header-anchor" href="#_5-\u652F\u6301\u6DF1\u5EA6" aria-hidden="true">#</a> 5. \u652F\u6301\u6DF1\u5EA6</h2><p>concat \u4F1A\u89E3\u4E00\u5C42\uFF0C\u6240\u4EE5 level = 1 \u65F6\uFF0C\u4E0D\u9700\u8981\u8D70\u9012\u5F52</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>
<span class="token keyword">function</span> <span class="token function">flat</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> level <span class="token operator">=</span> <span class="token number">1</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">pre<span class="token punctuation">,</span> cur</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> pre<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>
            Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> level <span class="token operator">&gt;</span> <span class="token number">1</span>
                <span class="token operator">?</span> <span class="token function">flat</span><span class="token punctuation">(</span>cur<span class="token punctuation">,</span> level <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">)</span>
                <span class="token operator">:</span> cur
        <span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// concat \u4F1A\u89E3\u4E00\u5C42</span>
<span class="token keyword">let</span> d <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>d <span class="token operator">===</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment">//   const flat = (arr, limit = 1) =&gt; {</span>
<span class="token comment">//     let level = 0</span>
<span class="token comment">//     return arr.reduce((pre, cur) =&gt; {</span>
<span class="token comment">//       let toConcat</span>
<span class="token comment">//       if (Array.isArray(cur) &amp;&amp; level &lt; limit - 1) {</span>
<span class="token comment">//         level += 1</span>
<span class="token comment">//         toConcat = flat(cur, limit)</span>
<span class="token comment">//       } else {</span>
<span class="token comment">//         toConcat = cur</span>
<span class="token comment">//       }</span>

<span class="token comment">//       return pre.concat(toConcat);</span>
<span class="token comment">//     }</span>
<span class="token comment">//     , [])</span>
<span class="token comment">//   }</span>
<span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token function">flat</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">Infinity</span><span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">flat</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">Infinity</span><span class="token punctuation">)</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token number">Infinity</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">flat</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">flat</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br></div></div><h2 id="_6-tostring-\u5B57\u7B26\u4E32\u8F6C\u6570\u5B57\u662F\u5426\u53EF\u9760-\u5E94\u8BE5\u53EF\u9760" tabindex="-1"><a class="header-anchor" href="#_6-tostring-\u5B57\u7B26\u4E32\u8F6C\u6570\u5B57\u662F\u5426\u53EF\u9760-\u5E94\u8BE5\u53EF\u9760" aria-hidden="true">#</a> 6. toString\uFF0C\u5B57\u7B26\u4E32\u8F6C\u6570\u5B57\u662F\u5426\u53EF\u9760\uFF0C\u5E94\u8BE5\u53EF\u9760</h2><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>
<span class="token keyword">function</span> <span class="token function">flat</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> arr
    <span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> <span class="token operator">+</span>x<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">flat</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre></div>`,20),k={href:"https://github.com/mqyqingfeng/Blog/issues/36",target:"_blank",rel:"noopener noreferrer"},m=t("JavaScript \u4E13\u9898\u4E4B\u6570\u7EC4\u6241\u5E73\u5316 \xB7 Issue #36 \xB7 mqyqingfeng/Blog"),b={href:"https://juejin.cn/post/6844904025993773063#heading-10",target:"_blank",rel:"noopener noreferrer"},d=t("\u9762\u8BD5\u5B98\u8FDE\u73AF\u8FFD\u95EE\uFF1A\u6570\u7EC4\u62CD\u5E73\uFF08\u6241\u5E73\u5316\uFF09 flat \u65B9\u6CD5\u5B9E\u73B0"),f=p(`<h2 id="\u62D3\u5C55-\u591A\u7EF4\u6570\u7EC4\u6700\u5927\u6DF1\u5EA6" tabindex="-1"><a class="header-anchor" href="#\u62D3\u5C55-\u591A\u7EF4\u6570\u7EC4\u6700\u5927\u6DF1\u5EA6" aria-hidden="true">#</a> \u62D3\u5C55\uFF1A\u591A\u7EF4\u6570\u7EC4\u6700\u5927\u6DF1\u5EA6</h2><p>\u9012\u5F52\u8C03\u7528\uFF0C\u53EF\u4EE5\u7528\u53C2\u6570\u4FDD\u5B58\u503C</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> d <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span>

<span class="token keyword">function</span> <span class="token function">depth</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> ans <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token keyword">function</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> count <span class="token operator">=</span> <span class="token number">0</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> item <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        count<span class="token operator">++</span>
        <span class="token function">inner</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> count<span class="token punctuation">)</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// \u9012\u5F52\u7EC8\u6B62\u6761\u4EF6\uFF1A\u9047\u5230\u4E0D\u662F\u6570\u7EC4</span>
        ans <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>count<span class="token punctuation">,</span> ans<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>  
  <span class="token punctuation">}</span>
  <span class="token function">inner</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>
  <span class="token comment">// console.log(depths)</span>
  <span class="token keyword">return</span> ans
<span class="token punctuation">}</span>

<span class="token keyword">let</span> e <span class="token operator">=</span> <span class="token function">depth</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div>`,3);function g(h,y){const s=e("ExternalLinkIcon");return c(),u(l,null,[i,n("p",null,[n("a",k,[m,a(s)]),n("a",b,[d,a(s)])]),f],64)}var w=o(r,[["render",g],["__file","array-flat.html.vue"]]);export{w as default};
