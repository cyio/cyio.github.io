import{r as n,o as s,c as a,a as e,F as p,d as t,b as o}from"./app.0e74f851.js";const c={},r=t('<h1 id="全屏" tabindex="-1"><a class="header-anchor" href="#全屏" aria-hidden="true">#</a> 全屏</h1><h2 id="在全屏元素上层显示" tabindex="-1"><a class="header-anchor" href="#在全屏元素上层显示" aria-hidden="true">#</a> 在全屏元素上层显示</h2><p>浏览器会为全屏元素设置一些样式，会明确指定一些<code>!important</code>的规则，我们没法覆盖</p><div class="language-css ext-css line-numbers-mode"><pre class="language-css"><code><span class="token punctuation">:</span><span class="token function">not</span><span class="token punctuation">(</span><span class="token punctuation">:</span>root<span class="token punctuation">)</span><span class="token punctuation">:</span>-webkit-full-screen\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',4),i=o("解决办法，是给全屏元素套一个容器，在容器上处理 "),l={href:"https://codepen.io/OBKoro1/pen/wQmOzG",target:"_blank",rel:"noopener noreferrer"},u=o("H5 全屏demo"),d=t('<h2 id="z-index需要设置position才能生效" tabindex="-1"><a class="header-anchor" href="#z-index需要设置position才能生效" aria-hidden="true">#</a> <code>z-index</code>需要设置<code>position</code>才能生效</h2><p>这个功能的原理很简单，就是在视频区域再添加一个相同位置相同尺寸的同级节点，并让该节点的 z-index 属性大于视频节点的属性即可，以下只摘录关键代码：</p><p>因为视频节点是普通的节点,所以直接让需要覆盖在其上的新节点宽高与其相同即可 clientWidth属性只有数值，所以还需手动加上 &#39;px&#39; 这个单位 http://stackoverflow.com/questions/9191803/why-does-z-index-not-work 只有设置了position属性的元素,z-index才能对其起作用</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">&quot;text/javascript&quot;</span><span class="token operator">&gt;</span>\n  <span class="token keyword">var</span> overlayNode <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  overlayNode<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width <span class="token operator">=</span> videoNode<span class="token punctuation">.</span>clientWidth <span class="token operator">+</span> <span class="token string">&#39;px&#39;</span><span class="token punctuation">;</span>\n  overlayNode<span class="token punctuation">.</span>style<span class="token punctuation">.</span>position <span class="token operator">=</span> <span class="token string">&#39;relative&#39;</span><span class="token punctuation">;</span>\n  overlayNode<span class="token punctuation">.</span>style<span class="token punctuation">.</span>zIndex <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div>',4);c.render=function(t,o){const c=n("OutboundLink");return s(),a(p,null,[r,e("p",null,[i,e("a",l,[u,e(c)])]),d],64)};export default c;
