import{r as e,o as a,c as l,a as r,F as o,d as i,b as n}from"./app.0e74f851.js";const s={},t=i('<h1 id="lru-缓存算法-近期最少使用算法" tabindex="-1"><a class="header-anchor" href="#lru-缓存算法-近期最少使用算法" aria-hidden="true">#</a> LRU 缓存算法 - 近期最少使用算法</h1><p>淘汰原则：近期最少使用数据移出内存</p><p>规则：</p><ol><li>队列，先进先出</li><li>最近访问过，更新到队尾</li></ol><p>经典的 LRU 一般都使用 hashMap + 双向链表。考虑可能需要频繁删除一个元素，并将这个元素的前一个节点指向下一个节点，所以使用双链接最合适。并且它是按照结点最近被使用的时间顺序来存储的。 如果一个结点被访问了， 我们有理由相信它在接下来的一段时间被访问的概率要大于其它结点。</p><p>最优方案：</p><ol><li>双链表 插入、删除 O(1)，head 为新缓存，tail 为旧缓存</li><li>Map 查找 O(1)</li></ol>',7),p={href:"https://leetcode-cn.com/submissions/detail/215182646/",target:"_blank",rel:"noopener noreferrer"},d=n("LRU 缓存机制 - 提交记录 - 力扣（LeetCode）");s.render=function(i,n){const s=e("OutboundLink");return a(),l(o,null,[t,r("p",null,[r("a",p,[d,r(s)])])],64)};export default s;
