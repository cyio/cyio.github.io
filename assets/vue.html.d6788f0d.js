import{r as n,o as a,c as s,a as e,w as t,F as l,b as p,d as o}from"./app.09b8f80a.js";const r={},c=e("h1",{id:"vue",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#vue","aria-hidden":"true"},"#"),p(" Vue")],-1),u={class:"table-of-contents"},i=p("MVVM"),d=p("与 React 比较 3+1"),k=p("模板渲染"),b=p("双向绑定"),h=p("proxy 对比 defineProperty"),m=p("Vue 2"),f=p("Vue-JSX"),g=p("学习参考"),v=p("过滤器 - filter"),x=p("vue-cli webpack 打包"),w=p("单文件拆分"),j=p("mixin"),y=p("组件切换数据问题 v-if 和 v-show"),_=p("动态样式"),V=p("设置当视口变化时，元素总是垂直居中"),S=p("生命周期"),E=p("大小写"),M=p("函数式"),C=p("props"),q=p("debug 模板"),B=p("eventBus 全局事件总线"),D=p("生命周期"),A=p("热重载"),T=p("vue 组件的 data 为啥非要是函数？"),O=p("watch"),R=p("nextTick"),N=p("异步组件"),P=p("mock"),F=p("computed vs watch"),W=p("vnode"),I=p("指令"),J=p("响应式问题"),H=p("其它"),L=p("父组件和子组件生命周期钩子执行顺序"),$=p("v-model 原理"),z=p("key 的作用"),U=p("diff 算法"),X=p("异步更新队列"),G=p("Vue 3 迁移指南"),Y=p("v-model 支持多个"),Q=p("v-if v-for 同时应用"),K=p("简单状态管理"),Z=p("全局组件、插件"),nn=p("无渲染组件"),an=e("h2",{id:"mvvm",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#mvvm","aria-hidden":"true"},"#"),p(" MVVM")],-1),sn=e("p",null,[p("Model-View-ViewModel "),e("img",{src:"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/6/24/1643060c121f7361~tplv-t2oaga2asx-zoom-in-crop-mark:1304:0:0:0.awebp",alt:"1643060c121f7361~tplv-t2oaga2asx-zoom-in-crop-mark:1304:0:0:0.awebp (685×362)"})],-1),en={href:"https://juejin.cn/post/6844903624405942286",target:"_blank",rel:"noopener noreferrer"},tn=p("Vue.js中的MVVM - 掘金"),ln=e("ul",null,[e("li",null,"脏检查机制"),e("li",null,"数据劫持"),e("li",null,"代理")],-1),pn=e("p",null,"就前端而言，Model 往往来自后端接口，View 由 DOM 实现，VM 主要是 Vue/React",-1),on=e("h2",{id:"与-react-比较-3-1",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#与-react-比较-3-1","aria-hidden":"true"},"#"),p(" 与 React 比较 3+1")],-1),rn=e("li",null,[p("相同点： "),e("ul",null,[e("li",null,"VirtualDOM 性能好"),e("li",null,[p("单向数据流 "),e("ul",null,[e("li",null,"单向数据流中的单向：数据从父组件到子组件这个流向叫单向。"),e("li",null,"绑定的单双向：View 层与 Model 层之间的映射关系。")])]),e("li",null,"组件化开发")])],-1),cn=p("不同点： "),un=e("li",null,[e("p",null,"vue 拥抱经典 Web，react 完全用 JS")],-1),dn=e("li",null,[e("p",null,"获知变化：vue 自动，收集依赖、精确更新，默认优化，react 显式 setState，递归更新")],-1),kn=e("li",null,[e("p",null,"vue 双向绑定，react 单向绑定")],-1),bn=e("p",null,"生态，RN，Weex",-1),hn=p("单向绑定使得数据流也是单向的，对于复杂应用来说，这是实施统一的状态管理（如 redux）的前提。双向绑定在一些需要实时反应用户输入的场合 会非常方便（比如多级联动菜单）。但通常认为复杂应用中这种便利比不上引入状态管理带来的优势。注意，Vue 虽然通过 v-model 支持双向绑定， 但是如果引入了类似 redux 的 vuex，就无法同时使用 v-model。参见"),mn={href:"https://github.com/vuejs/vuex/blob/master/docs/zh-cn/forms.md",target:"_blank",rel:"noopener noreferrer"},fn=p("vuex/forms.md at master · vuejs/vuex"),gn=p(" 通常一个绑定一个数据就需要一个Watcher，一但我们的绑定细粒度过高就会产生大量的Watcher,这会带来内存以及依赖追踪的开销"),vn={href:"https://cn.vuejs.org/v2/guide/comparison.html#React",target:"_blank",rel:"noopener noreferrer"},xn=p("对比其他框架 — Vue.js"),wn={href:"https://developer.51cto.com/art/201907/599732.htm",target:"_blank",rel:"noopener noreferrer"},jn=p("前端：Vue和React的优点分别是什么？两者的最核心差异对比是什么？ - 51CTO.COM"),yn={href:"https://blog.csdn.net/qq_41206257/article/details/80992085",target:"_blank",rel:"noopener noreferrer"},_n=p("React 的单向数据流与 Vue 的双向绑定 - CSDN 博客"),Vn={href:"https://www.cnblogs.com/wangxi01/p/11589938.html",target:"_blank",rel:"noopener noreferrer"},Sn=p("你是如何理解Vue的响应式系统的 - 来亦何哀 - 博客园"),En=e("h2",{id:"模板渲染",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#模板渲染","aria-hidden":"true"},"#"),p(" 模板渲染")],-1),Mn=e("p",null,"template parse => AST optimize => render function",-1),Cn={href:"https://s7.51cto.com/images/blog/202107/28/2cad620ea480705e43575145b49af26b.jpeg",target:"_blank",rel:"noopener noreferrer"},qn=p("Vue模板渲染.jpeg"),Bn=o('<h2 id="双向绑定" tabindex="-1"><a class="header-anchor" href="#双向绑定" aria-hidden="true">#</a> 双向绑定</h2><p>data -&gt; Watcher -&gt; compile</p><p>采用数据劫持结合发布者-订阅者模式的方式，通过<code>Object.defineProperty()</code>来劫持各个数据属性的<code>setter/getter</code>，在数据变动时发布消息给订阅者，触发相应的监听回调。 具体步骤：</p><p>第一步：需要 observe 的数据对象进行递归遍历，包括子属性对象的属性，都加上 setter 和 getter 这样的话，给这个对象的某个值赋值，就会触发 setter，那么就能监听到了数据变化</p><p>第二步：compile 解析模板指令，将模板中的变量替换成数据，然后初始化渲染页面视图，并将每个指令对应的节点绑定更新函数，添加监听数据的订阅者，一旦数据有变动，收到通知，更新视图</p><p>第三步：Watcher 侦听者是 Observer 和 Compile 之间通信的桥梁，主要做的事情是: 1、在自身实例化时往属性订阅器(dep)里面添加自己 2、自身必须有一个 update()方法 3、待属性变动 dep.notice() 通知时，能调用自身的 update() 方法，并触发 Compile 中绑定的回调，则功成身退。</p><p>第四步：MVVM 作为数据绑定的入口，整合 Observer、Compile 和 Watcher 三者，通过 Observer 来监听自己的 model 数据变化，通过 Compile 来解析编译模板指令，最终利用 Watcher 搭起 Observer 和 Compile 之间的通信桥梁，达到数据变化 -&gt; 视图更新；视图交互变化(input) -&gt; 数据 model 变更的双向绑定效果。</p>',7),Dn={href:"https://cn.vuejs.org/v2/guide/reactivity.html",target:"_blank",rel:"noopener noreferrer"},An=p("深入响应式原理 — Vue.js"),Tn={href:"https://codepen.io/cyio/pen/aaboyQ?editors=0010",target:"_blank",rel:"noopener noreferrer"},On=p("仿 Vue 极简双向绑定"),Rn={href:"http://www.infoq.com/cn/articles/Vue.js-code",target:"_blank",rel:"noopener noreferrer"},Nn=p("Vue.js 源码解析：深入响应式原理"),Pn={href:"https://gomakethings.com/how-i-built-my-own-vanilla-js-alternative-to-vue-and-react/",target:"_blank",rel:"noopener noreferrer"},Fn=p("How I built my own vanilla JS alternative to Vue and React | Go Make Things"),Wn=e("h3",{id:"proxy-对比-defineproperty",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#proxy-对比-defineproperty","aria-hidden":"true"},"#"),p(" proxy 对比 defineProperty")],-1),In=e("ul",null,[e("li",null,"代理，而非劫持"),e("li",null,"监听整个对象变化，不再是某个属性（性能）"),e("li",null,"支持数组变更，不再 hack"),e("li",null,"返回新对象，不再遍历修改"),e("li",null,"兼容性：chrome 49+，不支持 IE")],-1),Jn={href:"https://juejin.im/post/6844903601416978439",target:"_blank",rel:"noopener noreferrer"},Hn=p("面试官: 实现双向绑定Proxy比defineproperty优劣如何? - 掘金"),Ln=e("h2",{id:"vue-2",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#vue-2","aria-hidden":"true"},"#"),p(" Vue 2")],-1),$n=o("<li><p>只有当实例被创建时 data 中存在的属性才是响应式的</p></li><li><p><s>ready -&gt; mounted</s></p></li><li><p>对 dom 没依赖的操作可放到 created 中，如数据请求</p></li><li><p>学习框架，官方的 examples 一定要 clone 下来看源码，这是对框架特性最好的学习资料</p></li><li><p>要保证文档加载或更新后才执行，需 nextTick</p></li><li><p>transition 成组件，应用范围更广，类名变化</p></li><li><p>loader 升级 <code>npm install browser-sync postcss postcss-cssnext postcss-import postcss-nested postcss-pxtorem pug vux vuex weixin-js-sdk--save-dev --cache-min 0</code></p></li><li><p>单向数据流，不允许直接修改 props，不要在子组件内部直接修改 props，而需要 emit 事件通知父组件修改</p></li><li><p>vue 组件通信 单向 父传子用 props 子传父用事件 emit =&gt; on，理解为观察者模式就好了，子组件广播一个事件，然后父组件订阅事件，也可以 watch props</p></li>",9),zn=e("p",null,"非父子之间，用 event hub ，即创建一个全局的空 vue 线程，专门处理事件，触发，监听，卸载",-1),Un={href:"https://github.com/cklmercer/vue-events",target:"_blank",rel:"noopener noreferrer"},Xn=p("cklmercer/vue-events: Simple event handling for Vue.js"),Gn=e("li",null,[e("p",null,"复杂应用 => vuex")],-1),Yn=e("p",null,"js 原生通信机制，事件",-1),Qn=e("p",null,"@click.native",-1),Kn=e("p",null,"Understanding Components Communication in Vue 2.0 http://taha-sh.com/blog/understanding-components-communication-in-vue-20",-1),Zn=e("h2",{id:"vue-jsx",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#vue-jsx","aria-hidden":"true"},"#"),p(" Vue-JSX")],-1),na=p("不支持 v-model "),aa={href:"https://github.com/nickmessing/babel-plugin-jsx-v-model",target:"_blank",rel:"noopener noreferrer"},sa=p("nickmessing/babel-plugin-jsx-v-model: JSX Syntactic Sugar Plugin for v-model"),ea=p("slot "),ta={href:"https://github.com/vuejs/babel-plugin-transform-vue-jsx/issues/19#issuecomment-313997180",target:"_blank",rel:"noopener noreferrer"},la=p("Supported slot from Component's inside? · Issue #19 · vuejs/babel-plugin-transform-vue-jsx"),pa=o('<div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>modal-container<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n  {this.$slots.default.length\n    ? this.$slots.default[0]\n    : <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>Your content here<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>}\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>在 vue 里 querySelectorAll 取不到 nodeList 用其它方法取到的是 HTMLcollection，比较特殊，不能直接当数组处理 ES6 提供的了转化方法 Array.from(HTMLcollection)</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> inputs <span class="token operator">=</span> window<span class="token punctuation">.</span>document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">&#39;input&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">var</span> body <span class="token operator">=</span> window<span class="token punctuation">.</span>document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">&#39;body&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span>\nArray<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>inputs<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\ninputs<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;focus&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  body<span class="token punctuation">.</span>style<span class="token punctuation">.</span>position <span class="token operator">=</span> <span class="token string">&#39;fixed&#39;</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>body<span class="token punctuation">.</span>style<span class="token punctuation">.</span>position<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\ninputs<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;blur&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  body<span class="token punctuation">.</span>style<span class="token punctuation">.</span>position <span class="token operator">=</span> <span class="token string">&#39;static&#39;</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>body<span class="token punctuation">.</span>style<span class="token punctuation">.</span>position<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h2 id="学习参考" tabindex="-1"><a class="header-anchor" href="#学习参考" aria-hidden="true">#</a> 学习参考</h2>',4),oa={href:"https://aotu.io/notes/2017/07/17/The-Exploration-and-Practice-of-Vue/",target:"_blank",rel:"noopener noreferrer"},ra=p("Vue 探索与实践 | Aotu.io「凹凸实验室」"),ca=o('<h2 id="过滤器-filter" tabindex="-1"><a class="header-anchor" href="#过滤器-filter" aria-hidden="true">#</a> 过滤器 - filter</h2><ul><li>2.x 起，不能在指令中使用，改用 JS 原生 filter，写成计算属性</li><li>2.x 起，传参数由原来空格变成括号，即普通函数调用形式</li><li>不像其它方法会转换数据，只是输出给用户看的变了</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">//global</span>\nVue<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token string">&#39;filterName&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token comment">// thing to transform</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">//locally, like methods or computed</span>\nfilters<span class="token operator">:</span> <span class="token punctuation">{</span>\n  <span class="token function">filterName</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token comment">// thing to transform</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><ul><li>可以串联</li><li>可以传多个参数</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token punctuation">{</span><span class="token punctuation">{</span> data <span class="token operator">|</span> <span class="token function">filterName</span><span class="token punctuation">(</span>arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>\n\n<span class="token comment">// arguments are passed in order after the value</span>\nfilters<span class="token operator">:</span> <span class="token punctuation">{</span>\n  <span class="token function">filterName</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> arg1<span class="token punctuation">,</span> arg2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token comment">//thing to transform</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><ul><li>每次更新都会执行，如果有大量数据且应该是缓存，用 computed</li></ul>',6),ua={href:"https://jsfiddle.net/nw5yhLwv/",target:"_blank",rel:"noopener noreferrer"},ia=p("Edit fiddle - JSFiddle"),da=o('<h2 id="vue-cli-webpack-打包" tabindex="-1"><a class="header-anchor" href="#vue-cli-webpack-打包" aria-hidden="true">#</a> vue-cli webpack 打包</h2><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>app.js/main.js 页面入口\nchunck-vender.js vue 框架、模块\nchunck-common.js\nmanifest 异步、script 动态引入\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>',2),ka={href:"https://www.jianshu.com/p/5a543a0284f6",target:"_blank",rel:"noopener noreferrer"},ba=p("webpack 使用 CommonsChunkPlugin 拆包心得 - 简书"),ha={href:"https://lmiller1990.github.io/electic/posts/splitting_bundles_with_webpack_4.html",target:"_blank",rel:"noopener noreferrer"},ma=p("Splitting Bundles with Webpack 4"),fa={href:"https://github.com/webpack/webpack/tree/master/examples/common-chunk-and-vendor-chunk",target:"_blank",rel:"noopener noreferrer"},ga=p("webpack/examples/common-chunk-and-vendor-chunk at master · webpack/webpack"),va={href:"https://webpack.js.org/plugins/split-chunks-plugin/",target:"_blank",rel:"noopener noreferrer"},xa=p("SplitChunksPlugin"),wa=p(" 查看完整配置"),ja=e("code",null,"./node_modules/.bin/vue-cli-service inspect",-1),ya=p(" 偶然编译出错，尝试删除"),_a=e("code",null,"node_modules/.cache",-1),Va=o('<h2 id="单文件拆分" tabindex="-1"><a class="header-anchor" href="#单文件拆分" aria-hidden="true">#</a> 单文件拆分</h2><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>&lt;template src=&quot;./template.pug&quot; lang=&quot;pug&quot;&gt;&lt;/template&gt;\n&lt;script src=&quot;./script.js&quot;&gt;&lt;/script&gt;\n&lt;style src=&quot;./style.styl&quot; lang=&quot;stylus&quot;&gt;&lt;/style&gt;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>├── app.js\n└── component\n    ├── item-edit\n    └── item-list\n        ├── config.json\n        ├── index.vue\n        ├── script.js\n        ├── style.styl\n        └── template.pug\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="mixin" tabindex="-1"><a class="header-anchor" href="#mixin" aria-hidden="true">#</a> mixin</h2><ul><li>把组件逻辑暴露在 mixin 中</li><li>有些耦合度高的数据不适用</li><li>可以是局部，可以是全局</li><li>生命周期钩子中的代码会合并到组件对应生命周期中</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 设为全局</span>\nVue<span class="token punctuation">.</span><span class="token function">mixin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;hello from mixin!&#39;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token operator">...</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token comment">// This console.log would now appear in every component</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><ul><li>pure</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> toggle <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">{</span>\n      isShowing<span class="token operator">:</span> <span class="token boolean">false</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  methods<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token function">toggleShow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>isShowing <span class="token operator">=</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>isShowing\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> toggle <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">{</span>\n      isShowing<span class="token operator">:</span> <span class="token boolean">false</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  methods<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token function">toggleShow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>isShowing <span class="token operator">=</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>isShowing\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div>',9),Sa={href:"https://juejin.im/post/5ab3924b6fb9a028db589b57",target:"_blank",rel:"noopener noreferrer"},Ea=p("Vue 文档中几个易忽视部分的剖析 - 掘金"),Ma=e("h2",{id:"组件切换数据问题-v-if-和-v-show",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#组件切换数据问题-v-if-和-v-show","aria-hidden":"true"},"#"),p(" 组件切换数据问题 v-if 和 v-show")],-1),Ca=p("如果用"),qa=e("code",null,"v-show",-1),Ba=p("的话，"),Da=e("code",null,"mounted",-1),Aa=p("只执行一次，如果希望组件显示时执行，简单解决是改用"),Ta=e("code",null,"v-if",-1),Oa=p("，比较复杂的方法如下： "),Ra={href:"https://stackoverflow.com/questions/42813594/trigger-code-on-component-v-show-true",target:"_blank",rel:"noopener noreferrer"},Na=p("vue.js - Trigger code on component v-show=true - Stack Overflow"),Pa=e("h2",{id:"动态样式",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#动态样式","aria-hidden":"true"},"#"),p(" 动态样式")],-1),Fa=p("可以绑定计算属性 "),Wa={href:"https://jsfiddle.net/Andy0708/8t8902gn/1/?utm_source=website&utm_medium=embed&utm_campaign=8t8902gn",target:"_blank",rel:"noopener noreferrer"},Ia=p("Edit fiddle - JSFiddle"),Ja=o('<h3 id="设置当视口变化时-元素总是垂直居中" tabindex="-1"><a class="header-anchor" href="#设置当视口变化时-元素总是垂直居中" aria-hidden="true">#</a> 设置当视口变化时，元素总是垂直居中</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token punctuation">.</span><span class="token function">container</span><span class="token punctuation">(</span><span class="token operator">:</span>style<span class="token operator">=</span><span class="token string">&quot;alignStyle&quot;</span><span class="token punctuation">)</span>\n\n  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">{</span>\n      cHeight<span class="token operator">:</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;body&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>clientHeight<span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  computed<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token function">alignStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token punctuation">{</span>\n        marginTop<span class="token operator">:</span> Number<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>cHeight <span class="token operator">-</span> <span class="token number">576</span> <span class="token operator">-</span> <span class="token number">56</span> <span class="token operator">-</span> <span class="token number">44</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&#39;px&#39;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    window<span class="token punctuation">.</span><span class="token function-variable function">onresize</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>cHeight <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;body&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>clientHeight\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h2 id="生命周期" tabindex="-1"><a class="header-anchor" href="#生命周期" aria-hidden="true">#</a> 生命周期</h2><ul><li><code>beforeDestory</code>不会在窗口 refresh 或 close 时触发，一般用在路由切换<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>window<span class="token punctuation">.</span><span class="token function-variable function">onbeforeunload</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&#39;haha&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 要执行的代码</span>\n  <span class="token keyword">return</span> <span class="token string">&#39;确认离开页面&#39;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li></ul><h2 id="大小写" tabindex="-1"><a class="header-anchor" href="#大小写" aria-hidden="true">#</a> 大小写</h2>',5),Ha={href:"https://cn.vuejs.org/v2/guide/components-props.html#Prop-%25E7%259A%2584%25E5%25A4%25A7%25E5%25B0%258F%25E5%2586%2599-camelCase-vs-kebab-case",target:"_blank",rel:"noopener noreferrer"},La=p("Prop — Vue.js"),$a=e("h2",{id:"函数式",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#函数式","aria-hidden":"true"},"#"),p(" 函数式")],-1),za=p("无状态，可以无 script，props.itemClick 与上级通信 "),Ua={href:"https://codesandbox.io/s/rwxp7pnklo",target:"_blank",rel:"noopener noreferrer"},Xa=p("Vue Template - CodeSandbox"),Ga=o('<h2 id="props" tabindex="-1"><a class="header-anchor" href="#props" aria-hidden="true">#</a> props</h2><ul><li>自定义验证，接受多种类型</li></ul><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>validator: prop =&gt; typeof prop === &#39;number&#39; || prop === null,\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="debug-模板" tabindex="-1"><a class="header-anchor" href="#debug-模板" aria-hidden="true">#</a> debug 模板</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$log <span class="token operator">=</span> console<span class="token punctuation">.</span>log\n\n<span class="token punctuation">{</span>\n  <span class="token punctuation">{</span>\n    <span class="token function">$log</span><span class="token punctuation">(</span>messaage<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token punctuation">{</span>\n  <span class="token punctuation">{</span>\n    <span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">debugger</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div>',5),Ya={href:"https://vuedose.tips/tips/debugging-templates-in-vue-js/",target:"_blank",rel:"noopener noreferrer"},Qa=p("Debugging Templates in Vue.js"),Ka=o('<h2 id="eventbus-全局事件总线" tabindex="-1"><a class="header-anchor" href="#eventbus-全局事件总线" aria-hidden="true">#</a> eventBus 全局事件总线</h2><p>借用 Vue 内部实现了事件模型，其实也可以用第三方库</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">//文件-&gt;event-bus.js</span>\n\n<span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> EventBus <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>使用</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> EventBus <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./event-bus.js&#39;</span>\n\nEventBus<span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">&#39;i-got-clicked&#39;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>clickCount<span class="token punctuation">)</span>\n\nEventBus<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">&#39;i-got-clicked&#39;</span><span class="token punctuation">,</span> <span class="token parameter">clickCount</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Oh, that&#39;s nice. It&#39;s gotten </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>clickCount<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> clicks! :)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div>',5),Za={href:"http://www.pilishen.com/posts/creating-a-global-event-bus-with-vuejs",target:"_blank",rel:"noopener noreferrer"},ns=p("使用 Vue.js 创建全局事件总线（Global Event Bus ）-pilishen.com,做全球最好的实战教程"),as=o('<h2 id="生命周期-1" tabindex="-1"><a class="header-anchor" href="#生命周期-1" aria-hidden="true">#</a> 生命周期</h2><ul><li>CMUD + before</li><li>子组件后销毁，先挂载</li></ul><h2 id="热重载" tabindex="-1"><a class="header-anchor" href="#热重载" aria-hidden="true">#</a> 热重载</h2><ul><li>编辑<code>&lt;template&gt;</code>，重新渲染，保留私有状态</li><li>编辑<code>&lt;script&gt;</code>，销毁重建，created/mounted 都会执行</li><li>只有在使用<strong>路由</strong>的情况，created 有可能不触发，比如这个组件复用了、没销毁，也没编辑其<code>&lt;script&gt;</code>部分</li></ul><h2 id="vue-组件的-data-为啥非要是函数" tabindex="-1"><a class="header-anchor" href="#vue-组件的-data-为啥非要是函数" aria-hidden="true">#</a> vue 组件的 data 为啥非要是函数？</h2><blockquote><p>因此每个实例可以维护一份被返回对象的独立的拷贝</p></blockquote><ul><li>实例并不一定需要，官方示例、源码是可以写对象的（Vue 3 已不支持）</li><li>组件是可复用的 Vue 实例，组件涉及<strong>数据隔离</strong>必须</li></ul><h2 id="watch" tabindex="-1"><a class="header-anchor" href="#watch" aria-hidden="true">#</a> watch</h2><ul><li>watch 原始类型比较可靠</li><li>array 不需要 deep</li><li>可以 watch 一个 function</li><li>容易滥用，watch 不应该用于改变其他状态，而只应该用于产生不触及状态的副作用</li><li>开始时执行一次 <code>immediate: true</code></li><li>object 属性必须在 data 对象上存在才能让 Vue 转换它(getter/setter)，这样才能让它是响应的。</li><li>重新赋值可触发</li><li>只 watch 需要的，否则可能有性能开销问题</li><li><code>app.$watch</code>需要手动注销</li><li>可以 watch array of objects?</li></ul>',9),ss={href:"https://juejin.im/post/5ae91fa76fb9a07aa7677543",target:"_blank",rel:"noopener noreferrer"},es=p("Vue.js 中 watch 的高级用法 - 掘金"),ts={href:"https://michaelnthiessen.com/how-to-watch-nested-data-vue",target:"_blank",rel:"noopener noreferrer"},ls=p("How to Watch Deep Data Structures in Vue (Arrays and Objects) - Michael Thiessen"),ps=o('<h2 id="nexttick" tabindex="-1"><a class="header-anchor" href="#nexttick" aria-hidden="true">#</a> nextTick</h2><ul><li>DOM 更新后调用</li><li>vue next DOM update cycle 用 promise/MutationObserver 微任务，如果没有可用的微任务特性，回退为宏任务，所以 vue 的 nextTick 是在 setTimeout 前执行</li><li>比 setTimeout 执行更快，在浏览器 render 之前？</li><li>node 一次事件循环叫 tick</li></ul><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>process.nextTick(callback)\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',3),os={href:"https://stackoverflow.com/a/47636157/5657916",target:"_blank",rel:"noopener noreferrer"},rs=p("vue.js - What is nextTick or what does it do in VueJs - Stack Overflow"),cs={href:"https://segmentfault.com/a/1190000012861862",target:"_blank",rel:"noopener noreferrer"},us=p("Vue.nextTick 的原理和用途 - SegmentFault 思否"),is={href:"https://cn.vuejs.org/v2/guide/reactivity.html#%E5%BC%82%E6%AD%A5%E6%9B%B4%E6%96%B0%E9%98%9F%E5%88%97",target:"_blank",rel:"noopener noreferrer"},ds=p("深入响应式原理 — Vue.js"),ks=o('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> copies <span class="token operator">=</span> callbacks<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// 复制一个数组，操作不会影响原数组</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="异步组件" tabindex="-1"><a class="header-anchor" href="#异步组件" aria-hidden="true">#</a> 异步组件</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> Foo <span class="token keyword">from</span> <span class="token string">&#39;./Foo.vue&#39;</span> \n<span class="token comment">// after</span>\n<span class="token keyword">const</span> <span class="token function-variable function">Foo</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;./Foo.vue&#39;</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="mock" tabindex="-1"><a class="header-anchor" href="#mock" aria-hidden="true">#</a> mock</h2>',4),bs=e("li",null,"vue cli3 在 devServer 中添加 before",-1),hs=e("li",null,"添加自定义响应返回代码",-1),ms=p("mockjs 增强 mock 能力，可选 "),fs={href:"https://www.jianshu.com/p/fea615354d10",target:"_blank",rel:"noopener noreferrer"},gs=p("Vue CLI 3 + webpack + Mockjs实现本地数据模拟 - 简书"),vs={href:"https://panjiachen.github.io/vue-element-admin-site/zh/guide/essentials/mock-api.html#mockjs",target:"_blank",rel:"noopener noreferrer"},xs=p("Mock Data | vue-element-admin"),ws={href:"https://stackoverflow.com/questions/39436322/node-js-syntaxerror-unexpected-token-import",target:"_blank",rel:"noopener noreferrer"},js=p("javascript - Node.js - SyntaxError: Unexpected token import - Stack Overflow"),ys={href:"https://umijs.org/zh-CN/docs/mock",target:"_blank",rel:"noopener noreferrer"},_s=p("Mock 数据"),Vs={href:"https://babeljs.io/docs/en/next/babel-register.html",target:"_blank",rel:"noopener noreferrer"},Ss=p("@babel/register · Babel"),Es={href:"https://github.com/umijs/umi/issues/246#issuecomment-375225156",target:"_blank",rel:"noopener noreferrer"},Ms=p("UMI mock 开发中遇到的问题，已经处理的，在这里记录一下。给朋友们一个参考 · Issue #246 · umijs/umi"),Cs={href:"https://www.bilibili.com/read/cv3663235/",target:"_blank",rel:"noopener noreferrer"},qs=p("30 道 Vue 面试题（涵盖入门到精通，自测 Vue 掌握程度） - 哔哩哔哩"),Bs=e("p",null,"Props向下传递，事件向上传递",-1),Ds=e("h2",{id:"computed-vs-watch",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#computed-vs-watch","aria-hidden":"true"},"#"),p(" computed vs watch")],-1),As=e("li",null,"模板表达式不便于写复杂计算",-1),Ts=e("li",null,"基于响应式依赖进行缓存，仅响应式依赖改变时才重新求值",-1),Os=e("li",null,"生成新值挂在 vm 上，而 watch 观测已存在的值",-1),Rs=e("li",null,"依赖变化、且第一次访问时，计算新值，而 watch 数据变化就会执行？",-1),Ns=p("watch 可执行异步、高性能开销、设置执行频率、设置中间状态 "),Ps={href:"https://juejin.cn/post/6844903678533451783",target:"_blank",rel:"noopener noreferrer"},Fs=p("做面试的不倒翁：浅谈 Vue 中 computed 实现原理"),Ws=o('<h2 id="vnode" tabindex="-1"><a class="header-anchor" href="#vnode" aria-hidden="true">#</a> vnode</h2><p>虚拟节点（节点描述）</p><h2 id="指令" tabindex="-1"><a class="header-anchor" href="#指令" aria-hidden="true">#</a> 指令</h2><ul><li>作用：对 DOM 元素进行底层操作</li><li>形式：<code>v-xx</code>，<code>v-for</code>是例外</li><li>内置：v-model v-if v-show v-bind v-on v-html</li><li>自定义：通过注册</li><li>使用： <code>v-focus</code></li><li>钩子：bind inserted</li></ul><h2 id="响应式问题" tabindex="-1"><a class="header-anchor" href="#响应式问题" aria-hidden="true">#</a> 响应式问题</h2><p>问题表现： 有时操作数组或对象后，视图没有更新</p><p>原因：有些操作，Vue 检测不到变化</p><p>变化检测：</p><ul><li>数组，通过方法操作如 push 可以检测，非方法不行，如索引赋值、改长度</li><li>对象，需要访问来触发 getter/setter，非访问不行，检测不了增、删</li></ul><p>解决：</p><ul><li>Vue.set</li></ul><h2 id="其它" tabindex="-1"><a class="header-anchor" href="#其它" aria-hidden="true">#</a> 其它</h2><p>slot 分发内容，占位替换</p><p>动态组件<code>:is</code></p><p>区分Vuex与props的使用边界 Vuex 业务组件，集中管理 props 公共组件，组件库</p><p>路由ID变了，但组件没变？ 使用beforeRouteUpdate</p><p>在v-if/v-if-else/v-else中使用key 如果本不相同的元素被识别为相同，则会出现意料之外的副作用。</p><h2 id="父组件和子组件生命周期钩子执行顺序" tabindex="-1"><a class="header-anchor" href="#父组件和子组件生命周期钩子执行顺序" aria-hidden="true">#</a> 父组件和子组件生命周期钩子执行顺序</h2><p>从外到内，再从内到外</p><p>父组件创建，子组件创建、挂载，父组件挂载</p><h2 id="v-model-原理" tabindex="-1"><a class="header-anchor" href="#v-model-原理" aria-hidden="true">#</a> v-model 原理</h2><p>父组件传 prop</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>v -&gt; m\n@input\nv &lt;- m\nwatch $emit\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="key-的作用" tabindex="-1"><a class="header-anchor" href="#key-的作用" aria-hidden="true">#</a> key 的作用</h2><blockquote><p>提示 diff 算法跟踪节点，何时重用、修补、重新排序、重新创建</p></blockquote>',25),Is=e("li",null,"默认就地更新，只适用于不依赖子组件状态或临时 DOM 状态",-1),Js=e("li",null,"提示",-1),Hs=p("希望重用和排序 "),Ls={href:"https://cn.vuejs.org/v2/guide/list.html#%25E7%25BB%25B4%25E6%258A%25A4%25E7%258A%25B6%25E6%2580%2581",target:"_blank",rel:"noopener noreferrer"},$s=p("列表渲染 — Vue.js"),zs=p("更新 id 导致 key 变化，重渲染，解决："),Us=e("code",null,"this.$vnode.key = newId;",-1),Xs={href:"https://medium.com/dailyjs/patching-the-vue-js-virtual-dom-the-need-the-explanation-and-the-solution-ba18e4ae385b",target:"_blank",rel:"noopener noreferrer"},Gs=p("Patching the Vue.js Virtual DOM: The need, the explanation and the solution | by Michael Gallagher | DailyJS | Medium"),Ys=o('<h2 id="diff-算法" tabindex="-1"><a class="header-anchor" href="#diff-算法" aria-hidden="true">#</a> diff 算法</h2><p>比较新旧 vnode 决定如何更新真实 DOM</p><p>同层比较，深度优先</p><ul><li>节点比较</li><li>不同，替换，插入新 vnode，移除旧 vnode</li><li>相同，子节点比较 <ol><li>子节点均是文本，更新文本</li><li>同时有子节点 updateChildren <ul><li>首先假设头尾节点可能相同做4次比对尝试，如果没有找到相同节点才按照通用方式遍历查找，查找结束再按情况处理剩下的节点</li><li>借助 key 通常可以非常精确找到相同节点，因此整个 patch 过程非常高效</li></ul></li><li>仅新 vnode 有子节点，创建</li><li>仅旧 vnode 有子节点，删除</li></ol></li></ul>',4),Qs={href:"https://www.youtube.com/watch?v=ApNCeWNBVrk",target:"_blank",rel:"noopener noreferrer"},Ks=p("【一】2020大厂前端面试题大汇总之Vue专题 - YouTube"),Zs={href:"https://www.bilibili.com/video/BV1Ph41117hq?from=search&seid=10938259853265619770",target:"_blank",rel:"noopener noreferrer"},ne=p("Vue.js VirtualDOM diff 算法_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili"),ae={href:"https://blog.csdn.net/u010622874/article/details/108057093",target:"_blank",rel:"noopener noreferrer"},se=p("[Vue][面试]你怎么理解vue中的diff算法？_你好，欢迎光临！-CSDN博客"),ee=e("blockquote",null,[e("p",null,"diff算法就是进行虚拟节点对比，并返回一个patch对象，用来存储两个节点不同的地方，最后用patch记录的消息去局部更新Dom。")],-1),te={href:"https://blog.csdn.net/u010622874/article/details/108057235",target:"_blank",rel:"noopener noreferrer"},le=p("[Vue][面试]你了解哪些vue性能优化的方法_你好，欢迎光临！-CSDN博客_vue性能优化面试"),pe={href:"https://blog.csdn.net/u010622874/article/details/108057074",target:"_blank",rel:"noopener noreferrer"},oe=p("[Vue][面试]你知道Vue中key的作用和工作原理吗？说说你对它的理解。_你好，欢迎光临！-CSDN博客_vue中key的作用和原理"),re=e("h2",{id:"异步更新队列",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#异步更新队列","aria-hidden":"true"},"#"),p(" 异步更新队列")],-1),ce=e("ol",null,[e("li",null,"组件级 watcher 2，存入队列，nextTick 时执行"),e("li",null,"用户定义的 nextTick cb 放在最后")],-1),ue=e("h2",{id:"vue-3-迁移指南",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#vue-3-迁移指南","aria-hidden":"true"},"#"),p(" Vue 3 迁移指南")],-1),ie={href:"https://v3.cn.vuejs.org/guide/migration/introduction.html#%25E6%25A6%2582%25E8%25A7%2588",target:"_blank",rel:"noopener noreferrer"},de=p("介绍 | Vue.js"),ke=e("h3",{id:"v-model-支持多个",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#v-model-支持多个","aria-hidden":"true"},"#"),p(" v-model 支持多个")],-1),be=e("p",null,"https://v3.cn.vuejs.org/guide/migration/v-model.html#_3-x-%E8%AF%AD%E6%B3%95",-1),he=e("h3",{id:"v-if-v-for-同时应用",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#v-if-v-for-同时应用","aria-hidden":"true"},"#"),p(" v-if v-for 同时应用")],-1),me=e("p",null,"2.x for 优先 3.x if 优先",-1),fe=e("p",null,"官方建议 1. 避免同层使用，易混淆 template ? 2. 过滤，用计算属性 https://v3.cn.vuejs.org/guide/migration/v-if-v-for.html#%E4%BB%8B%E7%BB%8D",-1),ge={href:"https://blog.csdn.net/u010622874/article/details/108056895",target:"_blank",rel:"noopener noreferrer"},ve=p("[Vue][面试]v-if和v-for哪个优先级更高？如果两个同时出现，应该怎么优化得到更好的性能？_你好，欢迎光临！-CSDN博客"),xe={href:"https://antfu.me/posts/rewrite-in-vite",target:"_blank",rel:"noopener noreferrer"},we=p("Rewrite in Vite"),je=e("blockquote",null,[e("p",null,"双向绑定是对表单来说的，表单的双向绑定，说到底不过是 value 的单向绑定 + onChange 事件侦听的一个语法糖 单向数据流核心是在于避免组件的自身(未来可复用)状态设计，它强调把 state hoist 出来进行集中管理。")],-1),ye=e("blockquote",null,[e("p",null,"React setState 引起局部重新刷新。为了达到更好的性能，React 暴漏给开发者 shouldComponentUpdate 这个生命周期 hook，来避免不需要的重新渲染(相比之下，Vue 由于采用依赖追踪，默认就是优化状态：你动了多少数据，就触发多少更新，不多也不少，而 React 对数据变化毫无感知，它就提供 React.createElement 调用已生成 virtual dom)。")],-1),_e=e("p",null,"setState 修改了数据，但这个数据被哪些地方依赖，React 并不知道",-1),Ve=e("p",null,"react 递归更新，还有 diff 把关，并不一定重渲染 ODM",-1),Se=e("blockquote",null,[e("p",null,"React JSX 过度的灵活性导致运行时可以用于优化的信息不足")],-1),Ee=e("h2",{id:"简单状态管理",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#简单状态管理","aria-hidden":"true"},"#"),p(" 简单状态管理")],-1),Me=e("li",null,"状态提升",-1),Ce=p("易于跟踪变化 debug "),qe={href:"https://cn.vuejs.org/v2/guide/state-management.html#%25E7%25AE%2580%25E5%258D%2595%25E7%258A%25B6%25E6%2580%2581%25E7%25AE%25A1%25E7%2590%2586%25E8%25B5%25B7%25E6%25AD%25A5%25E4%25BD%25BF%25E7%2594%25A8",target:"_blank",rel:"noopener noreferrer"},Be=p("状态管理 — Vue.js"),De=o('<h2 id="全局组件、插件" tabindex="-1"><a class="header-anchor" href="#全局组件、插件" aria-hidden="true">#</a> 全局组件、插件</h2><p>全局注册组件 <code>Vue.component(&#39;组件名1&#39;,xxx)</code></p><p>plugin 需要写个 install 方法，内部还是用 组件注册，好处是可以支持更多处理</p><h2 id="无渲染组件" tabindex="-1"><a class="header-anchor" href="#无渲染组件" aria-hidden="true">#</a> 无渲染组件</h2><ul><li>模板灵活性、逻辑共享</li><li>优于 mixin</li></ul><p>如果您发现自己正在编写一个内部包含特定逻辑的组件，但希望该组件的用户可以为其编写任何自定义 HTML 并使用此逻辑，那么无渲染组件可能是您的解决方案之一。</p>',6),Ae={href:"https://www.telerik.com/blogs/understanding-renderless-components-vue",target:"_blank",rel:"noopener noreferrer"},Te=p("理解 Vue 中的无渲染组件"),Oe={href:"https://codesandbox.io/s/81j57m2lk9?file=/src/App.vue",target:"_blank",rel:"noopener noreferrer"},Re=p("Reactive Slot Scope - CodeSandbox"),Ne={href:"https://juejin.cn/post/6844904136065056781",target:"_blank",rel:"noopener noreferrer"},Pe=p("Vue3 Composition API如何替换Vue Mixins - 掘金");r.render=function(p,o){const r=n("RouterLink"),Fe=n("OutboundLink");return a(),s(l,null,[c,e("nav",u,[e("ul",null,[e("li",null,[e(r,{to:"#mvvm"},{default:t((()=>[i])),_:1})]),e("li",null,[e(r,{to:"#与-react-比较-3-1"},{default:t((()=>[d])),_:1})]),e("li",null,[e(r,{to:"#模板渲染"},{default:t((()=>[k])),_:1})]),e("li",null,[e(r,{to:"#双向绑定"},{default:t((()=>[b])),_:1}),e("ul",null,[e("li",null,[e(r,{to:"#proxy-对比-defineproperty"},{default:t((()=>[h])),_:1})])])]),e("li",null,[e(r,{to:"#vue-2"},{default:t((()=>[m])),_:1})]),e("li",null,[e(r,{to:"#vue-jsx"},{default:t((()=>[f])),_:1})]),e("li",null,[e(r,{to:"#学习参考"},{default:t((()=>[g])),_:1})]),e("li",null,[e(r,{to:"#过滤器-filter"},{default:t((()=>[v])),_:1})]),e("li",null,[e(r,{to:"#vue-cli-webpack-打包"},{default:t((()=>[x])),_:1})]),e("li",null,[e(r,{to:"#单文件拆分"},{default:t((()=>[w])),_:1})]),e("li",null,[e(r,{to:"#mixin"},{default:t((()=>[j])),_:1})]),e("li",null,[e(r,{to:"#组件切换数据问题-v-if-和-v-show"},{default:t((()=>[y])),_:1})]),e("li",null,[e(r,{to:"#动态样式"},{default:t((()=>[_])),_:1}),e("ul",null,[e("li",null,[e(r,{to:"#设置当视口变化时-元素总是垂直居中"},{default:t((()=>[V])),_:1})])])]),e("li",null,[e(r,{to:"#生命周期"},{default:t((()=>[S])),_:1})]),e("li",null,[e(r,{to:"#大小写"},{default:t((()=>[E])),_:1})]),e("li",null,[e(r,{to:"#函数式"},{default:t((()=>[M])),_:1})]),e("li",null,[e(r,{to:"#props"},{default:t((()=>[C])),_:1})]),e("li",null,[e(r,{to:"#debug-模板"},{default:t((()=>[q])),_:1})]),e("li",null,[e(r,{to:"#eventbus-全局事件总线"},{default:t((()=>[B])),_:1})]),e("li",null,[e(r,{to:"#生命周期-1"},{default:t((()=>[D])),_:1})]),e("li",null,[e(r,{to:"#热重载"},{default:t((()=>[A])),_:1})]),e("li",null,[e(r,{to:"#vue-组件的-data-为啥非要是函数"},{default:t((()=>[T])),_:1})]),e("li",null,[e(r,{to:"#watch"},{default:t((()=>[O])),_:1})]),e("li",null,[e(r,{to:"#nexttick"},{default:t((()=>[R])),_:1})]),e("li",null,[e(r,{to:"#异步组件"},{default:t((()=>[N])),_:1})]),e("li",null,[e(r,{to:"#mock"},{default:t((()=>[P])),_:1})]),e("li",null,[e(r,{to:"#computed-vs-watch"},{default:t((()=>[F])),_:1})]),e("li",null,[e(r,{to:"#vnode"},{default:t((()=>[W])),_:1})]),e("li",null,[e(r,{to:"#指令"},{default:t((()=>[I])),_:1})]),e("li",null,[e(r,{to:"#响应式问题"},{default:t((()=>[J])),_:1})]),e("li",null,[e(r,{to:"#其它"},{default:t((()=>[H])),_:1})]),e("li",null,[e(r,{to:"#父组件和子组件生命周期钩子执行顺序"},{default:t((()=>[L])),_:1})]),e("li",null,[e(r,{to:"#v-model-原理"},{default:t((()=>[$])),_:1})]),e("li",null,[e(r,{to:"#key-的作用"},{default:t((()=>[z])),_:1})]),e("li",null,[e(r,{to:"#diff-算法"},{default:t((()=>[U])),_:1})]),e("li",null,[e(r,{to:"#异步更新队列"},{default:t((()=>[X])),_:1})]),e("li",null,[e(r,{to:"#vue-3-迁移指南"},{default:t((()=>[G])),_:1}),e("ul",null,[e("li",null,[e(r,{to:"#v-model-支持多个"},{default:t((()=>[Y])),_:1})]),e("li",null,[e(r,{to:"#v-if-v-for-同时应用"},{default:t((()=>[Q])),_:1})])])]),e("li",null,[e(r,{to:"#简单状态管理"},{default:t((()=>[K])),_:1})]),e("li",null,[e(r,{to:"#全局组件、插件"},{default:t((()=>[Z])),_:1})]),e("li",null,[e(r,{to:"#无渲染组件"},{default:t((()=>[nn])),_:1})])])]),an,sn,e("p",null,[e("a",en,[tn,e(Fe)])]),ln,pn,on,e("ul",null,[rn,e("li",null,[cn,e("ul",null,[un,dn,kn,e("li",null,[bn,e("blockquote",null,[e("p",null,[hn,e("a",mn,[fn,e(Fe)]),gn])])])])])]),e("p",null,[e("a",vn,[xn,e(Fe)])]),e("p",null,[e("a",wn,[jn,e(Fe)])]),e("p",null,[e("a",yn,[_n,e(Fe)])]),e("p",null,[e("a",Vn,[Sn,e(Fe)])]),En,Mn,e("p",null,[e("a",Cn,[qn,e(Fe)])]),Bn,e("p",null,[e("a",Dn,[An,e(Fe)]),e("a",Tn,[On,e(Fe)]),e("a",Rn,[Nn,e(Fe)]),e("a",Pn,[Fn,e(Fe)])]),Wn,In,e("p",null,[e("a",Jn,[Hn,e(Fe)])]),Ln,e("ul",null,[$n,e("li",null,[zn,e("ul",null,[e("li",null,[e("a",Un,[Xn,e(Fe)])])])]),Gn]),Yn,Qn,Kn,Zn,e("ul",null,[e("li",null,[e("p",null,[na,e("a",aa,[sa,e(Fe)])])]),e("li",null,[e("p",null,[ea,e("a",ta,[la,e(Fe)])])])]),pa,e("p",null,[e("a",oa,[ra,e(Fe)])]),ca,e("p",null,[e("a",ua,[ia,e(Fe)])]),da,e("p",null,[e("a",ka,[ba,e(Fe)]),e("a",ha,[ma,e(Fe)]),e("a",fa,[ga,e(Fe)]),e("a",va,[xa,e(Fe)]),wa,ja,ya,_a]),Va,e("p",null,[e("a",Sa,[Ea,e(Fe)])]),Ma,e("p",null,[Ca,qa,Ba,Da,Aa,Ta,Oa,e("a",Ra,[Na,e(Fe)])]),Pa,e("p",null,[Fa,e("a",Wa,[Ia,e(Fe)])]),Ja,e("p",null,[e("a",Ha,[La,e(Fe)])]),$a,e("p",null,[za,e("a",Ua,[Xa,e(Fe)])]),Ga,e("p",null,[e("a",Ya,[Qa,e(Fe)])]),Ka,e("p",null,[e("a",Za,[ns,e(Fe)])]),as,e("p",null,[e("a",ss,[es,e(Fe)]),e("a",ts,[ls,e(Fe)])]),ps,e("p",null,[e("a",os,[rs,e(Fe)]),e("a",cs,[us,e(Fe)]),e("a",is,[ds,e(Fe)])]),ks,e("ol",null,[bs,hs,e("li",null,[ms,e("a",fs,[gs,e(Fe)]),e("a",vs,[xs,e(Fe)]),e("a",ws,[js,e(Fe)]),e("a",ys,[_s,e(Fe)]),e("a",Vs,[Ss,e(Fe)]),e("a",Es,[Ms,e(Fe)]),e("a",Cs,[qs,e(Fe)])])]),Bs,Ds,e("ul",null,[As,Ts,Os,Rs,e("li",null,[Ns,e("a",Ps,[Fs,e(Fe)])])]),Ws,e("ul",null,[Is,Js,e("li",null,[Hs,e("a",Ls,[$s,e(Fe)])])]),e("p",null,[zs,Us,e("a",Xs,[Gs,e(Fe)])]),Ys,e("p",null,[e("a",Qs,[Ks,e(Fe)])]),e("p",null,[e("a",Zs,[ne,e(Fe)]),e("a",ae,[se,e(Fe)])]),ee,e("p",null,[e("a",te,[le,e(Fe)]),e("a",pe,[oe,e(Fe)])]),re,ce,ue,e("p",null,[e("a",ie,[de,e(Fe)])]),ke,be,he,me,fe,e("p",null,[e("a",ge,[ve,e(Fe)])]),e("p",null,[e("a",xe,[we,e(Fe)])]),je,ye,_e,Ve,Se,Ee,e("ul",null,[Me,e("li",null,[Ce,e("a",qe,[Be,e(Fe)])])]),De,e("p",null,[e("a",Ae,[Te,e(Fe)]),e("a",Oe,[Re,e(Fe)]),e("a",Ne,[Pe,e(Fe)])])],64)};export default r;
