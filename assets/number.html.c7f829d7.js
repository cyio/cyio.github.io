import{r as n,o as s,c as a,a as p,F as e,d as t,b as o}from"./app.26466922.js";const c={},l=t('<h1 id="number" tabindex="-1"><a class="header-anchor" href="#number" aria-hidden="true">#</a> Number</h1><ul><li>除法分母不要为 0</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token number">1</span> <span class="token operator">/</span> <span class="token number">0</span> <span class="token comment">// Infinity</span>\n<span class="token number">0</span> <span class="token operator">/</span> <span class="token number">0</span> <span class="token comment">// NaN</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li>两个错误值 <ul><li>isNaN 无法转换成数字</li><li>Infinity 数字太大</li></ul></li><li>isNaN() 会尝试将参数转换为数字类型</li></ul><h2 id="浮点数计算" tabindex="-1"><a class="header-anchor" href="#浮点数计算" aria-hidden="true">#</a> 浮点数计算</h2><p>原因：二进制 + 64 位双精度</p><p>0.1 的二进制表示，是无限循环的长度</p>',7),r={href:"https://www.youtube.com/watch?v=cI0XQkC9AOc",target:"_blank",rel:"noopener noreferrer"},u=o("JavaScript小数精度问题 - Web前端工程师面试题讲解 - YouTube"),i=t('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>a <span class="token operator">=</span> <span class="token string">&quot;&quot;</span> <span class="token operator">+</span> Number<span class="token punctuation">.</span><span class="token constant">MAX_SAFE_INTEGER</span>\n<span class="token string">&#39;9007199254740991&#39;</span>\na<span class="token punctuation">.</span>length\n<span class="token number">16</span>\n\n<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0.1</span> <span class="token operator">+</span> <span class="token number">0.2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length\n<span class="token string">&quot;0.30000000000000004&quot;</span>\n<span class="token number">19</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>解决：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0.1</span> <span class="token operator">+</span> <span class="token number">0.2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token comment">// toFixed 格式化为小数点后 10 位 0.30000...</span>\n<span class="token comment">// parseFloat 解析为有效浮点数，没有了多余的 0</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>双精度是1位符号，11位指数，52位小数。 <img src="https://pic3.zhimg.com/80/v2-48240f0e1e0dd33ec89100cbe2d30707_1440w.jpg?source=1940ef5c" alt="v2-48240f0e1e0dd33ec89100cbe2d30707_1440w.jpg (618×125)"></p><p>影响： 前端Js得到的数据将由于溢出而导致精度丢失 <img src="https://ask.qcloudimg.com/http-save/yehe-2553644/zfxstuoltk.png?imageView2/2/w/1620" alt="zfxstuoltk.png (522×246)"></p><p>开发者工具（F12）查看网络请求（注意要查看请求原生的返回值，而不是被浏览器二次处理过的格式化数据）</p>',6),k=o("后端：将可能超出范围的数字类型（Long）变量转为字符串类型（String） "),b={href:"https://blog.csdn.net/Aaa_Liao/article/details/106982675",target:"_blank",rel:"noopener noreferrer"},m=o("json-bigint的介绍和使用(可以解决Javascript的一个有关大整数的坑)_yabalaxi的博客-CSDN博客_json-bigint"),d=t('<h3 id="价格场景" tabindex="-1"><a class="header-anchor" href="#价格场景" aria-hidden="true">#</a> 价格场景</h3><p>彻底解决的方案是用‘分’表示金额。</p><p>如果不想改，<code>*100</code>转换成int再进行计算。 最后的结果再除以 100 不会有问题。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 精确价格减法计算，每次运算都要处理浮点数</span>\n<span class="token keyword">function</span> <span class="token function">subtract</span><span class="token punctuation">(</span><span class="token parameter">n<span class="token punctuation">,</span> m</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>n <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">-</span> Number<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>m <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">100</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>',4);c.render=function(t,o){const c=n("OutboundLink");return s(),a(e,null,[l,p("p",null,[p("a",r,[u,p(c)])]),i,p("p",null,[k,p("a",b,[m,p(c)])]),d],64)};export default c;
