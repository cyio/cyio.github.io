import{r as n,o as s,c as a,a as e,w as t,F as p,b as l,d as o}from"./app.09b8f80a.js";const u={},r=e("h1",{id:"vuex",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#vuex","aria-hidden":"true"},"#"),l(" Vuex")],-1),c={class:"table-of-contents"},i=l("基础"),d=l("数据流动过程"),k=l("何时使用"),b=l("状态重置"),m=l("计算缓存 vs Methods"),h=l("变化检测"),v=o('<p>定位：解决组件间的数据共享</p><h2 id="基础" tabindex="-1"><a class="header-anchor" href="#基础" aria-hidden="true">#</a> 基础</h2><ul><li>store: state getters mutations action module</li><li><code>store</code> 状态的容器，响应式，当其中状态变化时，相应组件高效更新。不能直接修改（赋值），只能显式地通过<code>mutations</code>中定义的方法<code>commit</code></li><li>Mutations 正如其名，只是用来修改 state，只能是同步的纯函数 Mutations 本质上是一个事件系统，由事件名称和处理函数构成 Actions 通过 Mutations 来操作 state，使用灵活</li><li>调用，简单在计算属性中返回即可</li><li>优点，更明确地状态追踪</li></ul><h2 id="数据流动过程" tabindex="-1"><a class="header-anchor" href="#数据流动过程" aria-hidden="true">#</a> 数据流动过程</h2><p><img src="https://vuex.vuejs.org/vuex.png" alt="vuex.png (701×551)"></p><ul><li>全局实例注入</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">&#39;./store&#39;</span>\n\n<span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  el<span class="token operator">:</span> <span class="token string">&#39;#app&#39;</span><span class="token punctuation">,</span>\n  store<span class="token punctuation">,</span>\n  template<span class="token operator">:</span> <span class="token string">&#39;&lt;App/&gt;&#39;</span><span class="token punctuation">,</span>\n  components<span class="token operator">:</span> <span class="token punctuation">{</span> App <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><ul><li>在<code>computed</code>中，用对象展开符展开 store 中的对象</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>    <span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        userInfo<span class="token operator">:</span> <span class="token string">&#39;userInfo&#39;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="何时使用" tabindex="-1"><a class="header-anchor" href="#何时使用" aria-hidden="true">#</a> 何时使用</h2><ul><li>先不要用，需要时切换</li><li>数据需要在多处(如 view 之间)使用？ 官方文档，多个实例间共享</li><li>哪些数据？首先是隔离外部数据，把外部数据逻辑与视图内变量分离</li><li>其次是核心数据模型 、接口，避免与页面视图混在一起，方便管理</li><li>store 是保持应用状态的容器，所以里边是有状态的数据</li><li>组件应该只呈现数据，不处理数据</li><li>在 React 中有容器和组件的概念。 它没有被 Vue.js 强制执行。 容器只是组件，但它们也可以从 store 获取数据并与 store 交互。 组件就在那里保存数据并渲染它。</li></ul><blockquote><p>我们已将应用程序分为三部分。 一部分是业务逻辑，它存在于 store 的 module 内，或者更普遍地存储在 store 内，容器元素负责获取数据并将其填充 到呈现组件，这些组件仅用于呈现数据。 这为我们提供了很好的模块化并支持单一责任原则。 它还提供了很好的可测试性，因为你可以自行测试此结 构的每个部分。 他们一起将形成某种综合测试。</p></blockquote>',12),g={href:"https://blog.fundebug.com/2018/06/12/large-scale-vuex-application-structures/",target:"_blank",rel:"noopener noreferrer"},f=l("大型 Vuex 应用程序的目录结构 | Fundebug 博客"),x={href:"https://juejin.im/post/5cb2dabde51d456e46603e02",target:"_blank",rel:"noopener noreferrer"},j=l("如何构建 Vue 大型应用 - 掘金"),E={href:"https://github.com/bailicangdu/vue2-elm",target:"_blank",rel:"noopener noreferrer"},_=l("bailicangdu/vue2-elm: 基于 vue2 + vuex 构建一个具有 45 个页面的大型单页面应用"),y=l("vuex modules mapGetters "),w={href:"https://github.com/igeligel/vuex-namespaced-module-structure/blob/master/src/views/Home.vue",target:"_blank",rel:"noopener noreferrer"},A=l("vuex-namespaced-module-structure/Home.vue at master · igeligel/vuex-namespaced-module-structure"),M=e("h2",{id:"状态重置",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#状态重置","aria-hidden":"true"},"#"),l(" 状态重置")],-1),B=e("p",null,"切换路由，组件销毁，vuex 不销毁，state 需重置",-1),V=e("p",null,"场景：与后端交互逻辑写到 vuex，组件只负责对数据进行渲染",-1),q=e("blockquote",null,[e("p",null,"开发业务前会确认 vuex 的 root module，\b 然后根据子业务功能细粒度到 child module。多个 root module 切换时，若需要保留的 state 数据，可以通过 preserveState 将其归档")],-1),F=e("blockquote",null,[e("p",null,"动态装卸的问题的是当异步调用 store 方法的时候，如果模块已经卸载了的话会报找不到 action/mutation 错误")],-1),Q={href:"https://github.com/vuejs/vuex-router-sync",target:"_blank",rel:"noopener noreferrer"},$=l("vuejs/vuex-router-sync: Effortlessly keep vue-router and vuex store in sync."),H=o('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">mounted</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">registerModule</span><span class="token punctuation">(</span><span class="token string">&#39;pushQuestions&#39;</span><span class="token punctuation">,</span> pushQuestionsModule<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">destroyed</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">unregisterModule</span><span class="token punctuation">(</span><span class="token string">&#39;pushQuestions&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div>',1),I={href:"https://juejin.im/post/5a4c8da3f265da43085e6c64",target:"_blank",rel:"noopener noreferrer"},L=l("vuex 闲置状态重置方案 - 掘金"),O=e("h2",{id:"计算缓存-vs-methods",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#计算缓存-vs-methods","aria-hidden":"true"},"#"),l(" 计算缓存 vs Methods")],-1),R=e("p",null,"计算属性是基于它的依赖缓存，如果定义的不是响应式依赖，将不会更新 而 method 在页面重新渲染时，总是会执行",-1),S={href:"https://cn.vuejs.org/v2/guide/computed.html#%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7",target:"_blank",rel:"noopener noreferrer"},C=l("计算属性 - vue.js"),D=o('<h2 id="变化检测" tabindex="-1"><a class="header-anchor" href="#变化检测" aria-hidden="true">#</a> 变化检测</h2><p>要让新增加的值支持响应更新，需挂到 data 已存在的属性上，不支持添加新的根级响应式属性</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>someObject<span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',3),G={href:"https://cn.vuejs.org/v2/guide/reactivity.html#%E5%A3%B0%E6%98%8E%E5%93%8D%E5%BA%94%E5%BC%8F%E5%B1%9E%E6%80%A7",target:"_blank",rel:"noopener noreferrer"},z=l("深入响应式原理 - vue.js");u.render=function(l,o){const u=n("RouterLink"),J=n("OutboundLink");return s(),a(p,null,[r,e("nav",c,[e("ul",null,[e("li",null,[e(u,{to:"#基础"},{default:t((()=>[i])),_:1})]),e("li",null,[e(u,{to:"#数据流动过程"},{default:t((()=>[d])),_:1})]),e("li",null,[e(u,{to:"#何时使用"},{default:t((()=>[k])),_:1})]),e("li",null,[e(u,{to:"#状态重置"},{default:t((()=>[b])),_:1})]),e("li",null,[e(u,{to:"#计算缓存-vs-methods"},{default:t((()=>[m])),_:1})]),e("li",null,[e(u,{to:"#变化检测"},{default:t((()=>[h])),_:1})])])]),v,e("p",null,[e("a",g,[f,e(J)])]),e("p",null,[e("a",x,[j,e(J)])]),e("p",null,[e("a",E,[_,e(J)])]),e("p",null,[y,e("a",w,[A,e(J)])]),M,B,V,q,F,e("p",null,[e("a",Q,[$,e(J)])]),H,e("p",null,[e("a",I,[L,e(J)])]),O,R,e("p",null,[e("a",S,[C,e(J)])]),D,e("p",null,[e("a",G,[z,e(J)])])],64)};export default u;
