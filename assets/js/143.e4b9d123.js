(window.webpackJsonp=window.webpackJsonp||[]).push([[143],{582:function(t,s,a){"use strict";a.r(s);var n=a(56),r=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"concept"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#concept"}},[t._v("#")]),t._v(" concept")]),t._v(" "),a("p",[t._v("[toc]")]),t._v(" "),a("h2",{attrs:{id:"流-stream"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#流-stream"}},[t._v("#")]),t._v(" 流 stream")]),t._v(" "),a("ul",[a("li",[t._v("一切都是数据流")]),t._v(" "),a("li",[t._v("普通开发者一般用不到")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" data "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" fs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("readFileSync")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/resource.json'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//同步方法")]),t._v("\n")])])]),a("p",[t._v("为什么是流的设计，什么叫 I/O 非阻塞:")]),t._v(" "),a("blockquote",[a("p",[t._v("在很多其他编程语言里，就是这么用的。这样做的好处，就是直观，便于人类直线思考。坏处就是，数据（流）大时，必然需要长时间执行，直接 阻\n塞 进程，整个程序只好停下来等着，这就是 I/O 阻塞 。\nNode.js 因为用了 回调 ，js 代码所在的（主）线程会把一切 回调 扔给后台的线程池去处理，而自己一步到底，所以叫 I/O 非阻塞 。 再直白一些，流\n，不可能一下子发生或结束，再快也得有个时间差。就像人类社会，始终以时间为单位，这一刻到下一刻，已经发生变化。而 Node.js 严格尊重这个现实\n，无论是远程访问，还是本地请求，每一个 data 都被分成一段一段数据流（通常是 Buffer 对象）传输。\n因此，Node.js 里没有简单拷贝的概念，或者说拷贝其实可以通过流来简单实现。")])]),t._v(" "),a("p",[t._v("您必须知道的几个 Nodejs 编码习惯 · GitBook")]),t._v(" "),a("p",[t._v("无法立即释放内存有两种情况，一是全局变量，一是闭包中间函数引用")]),t._v(" "),a("p",[t._v("node 有固定的内存使用上限")]),t._v(" "),a("p",[t._v("使用 Buffer 可以读取超过 V8 内存限制的大文件")]),t._v(" "),a("p",[t._v("Buffer 对象，属于堆外内存，意指不受 V8 分配")]),t._v(" "),a("p",[t._v("V8 的垃圾回收机制，把内存分为新生代和老生代")]),t._v(" "),a("p",[t._v("新生代中的对象存活时间较短，而老生代中的对象存活时间较长或者为常驻对象")]),t._v(" "),a("h2",{attrs:{id:"path"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#path"}},[t._v("#")]),t._v(" path")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("path.join")]),t._v("正确使用路径分隔符连接")]),t._v(" "),a("li",[a("code",[t._v("path.resolve(from..., to)")]),t._v("把相对路径转换为绝对路径，类似 cd，多个参数是跳转关系")]),t._v(" "),a("li",[a("code",[t._v("path.relative(from, to)")]),t._v(" 获取两路径之间的相对关系")]),t._v(" "),a("li",[a("code",[t._v("path.normalize(path)")]),t._v(" 转换"),a("code",[t._v("\\/ ..")])])]),t._v(" "),a("h2",{attrs:{id:"stream-buffer-string"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#stream-buffer-string"}},[t._v("#")]),t._v(" stream/buffer/string")]),t._v(" "),a("p",[t._v("无论是处理文件，还是请求远程资源，处理的就是数据流")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" fs "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'fs'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" rs "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" fs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("createReadStream")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'tmp.js'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" chunks "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  size "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n\nrs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("on")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'data'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("chunk")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  chunks"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("chunk"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  size "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" chunk"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nrs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("on")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'end'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" data "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Buffer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("concat")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("chunks"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" size"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'utf8'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h2",{attrs:{id:"优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#优化"}},[t._v("#")]),t._v(" 优化")]),t._v(" "),a("ul",[a("li",[t._v("避免使用全局变量\n"),a("ul",[a("li",[t._v("变量按作用域树向上查找，开销大")]),t._v(" "),a("li",[t._v("内存不会自动回收")])])])]),t._v(" "),a("h2",{attrs:{id:"回调"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#回调"}},[t._v("#")]),t._v(" 回调")]),t._v(" "),a("p",[t._v("Node.js 是单进程的，一般代码在主进程中运行，回调放在事件轮循中处理")]),t._v(" "),a("h2",{attrs:{id:"repl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#repl"}},[t._v("#")]),t._v(" REPL")]),t._v(" "),a("ul",[a("li",[t._v("输入多行\n"),a("ul",[a("li",[a("code",[t._v(".editor")])]),t._v(" "),a("li",[a("code",[t._v("{}")])])])])]),t._v(" "),a("h2",{attrs:{id:"repl-元命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#repl-元命令"}},[t._v("#")]),t._v(" REPL 元命令")]),t._v(" "),a("p",[t._v("提供了以点号（.）开头的元命令 "),a("code",[t._v(".help")]),t._v(" 查看\n"),a("code",[t._v(".editor")]),t._v("可输入多行，"),a("code",[t._v("^d")]),t._v(" 退出")]),t._v(" "),a("blockquote",[a("p",[t._v("单线程异步的Node.js不代表不会阻塞，在主线程做过多的任务可能会导致主线程的卡死，影响整个程序的性能，所以我们要非常小心的处理大量的循环，字符串拼接和浮\n点运算等cpu密集型任务，合理的利用各种技术把任务丢给子线程或子进程去完成，保持Node.js主线程的畅通。")])]),t._v(" "),a("h2",{attrs:{id:"单线程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#单线程"}},[t._v("#")]),t._v(" 单线程")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/30743785",target:"_blank",rel:"noopener noreferrer"}},[t._v("Node.js的线程和进程详解 - 知乎"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("单线程事件循环，非阻塞 I/O 回调\n主线程 将任务推到共享任务队列\n线程池并行处理，有的处理网络请求，有的处理文件 I/O，处理完交给主线程执行回调")]),t._v(" "),a("p",[t._v("缺点")]),t._v(" "),a("ol",[a("li",[t._v("默认不能靠多核 CPU 扩容，可以使用 cluster 或 pm2")]),t._v(" "),a("li",[t._v("持续时间长的计算或 CPU 密集型任务，可冻结事件循环直到完成")])]),t._v(" "),a("p",[t._v("可以提高线程池的默认线程数，服务器可能会将线程分配到不同核心去处理")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://en.wikipedia.org/wiki/Node.js#Threading",target:"_blank",rel:"noopener noreferrer"}},[t._v("Node.js - Wikipedia"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"高并发"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#高并发"}},[t._v("#")]),t._v(" 高并发")]),t._v(" "),a("p",[t._v("读写冲突十分严重，如何\n业务规则：流量摊匀\n前端：置灰，避免多次提交\n后端：同一个用户，限制次数，风控，滑块，拦截，黑名单\n"),a("a",{attrs:{href:"https://cloud.tencent.com/developer/article/1638407",target:"_blank",rel:"noopener noreferrer"}},[t._v("《吊打面试官》系列 Node.js 全栈秒杀系统 - 云+社区 - 腾讯云"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("子进程\nchild_process\ncluster")])])}),[],!1,null,null,null);s.default=r.exports}}]);