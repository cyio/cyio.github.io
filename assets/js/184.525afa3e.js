(window.webpackJsonp=window.webpackJsonp||[]).push([[184],{623:function(v,_,l){"use strict";l.r(_);var t=l(56),i=Object(t.a)({},(function(){var v=this,_=v.$createElement,l=v._self._c||_;return l("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[l("h1",{attrs:{id:"clean-code"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#clean-code"}},[v._v("#")]),v._v(" clean code")]),v._v(" "),l("p"),l("div",{staticClass:"table-of-contents"},[l("ul",[l("li",[l("a",{attrs:{href:"#编程的智慧-http-www-yinwang-org-blog-cn-2015-11-21-programming-philosophy"}},[v._v("编程的智慧")])]),l("li",[l("a",{attrs:{href:"#other"}},[v._v("other")])])])]),l("p"),v._v(" "),l("h2",{attrs:{id:"编程的智慧"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#编程的智慧"}},[v._v("#")]),v._v(" "),l("a",{attrs:{href:"http://www.yinwang.org/blog-cn/2015/11/21/programming-philosophy",target:"_blank",rel:"noopener noreferrer"}},[v._v("编程的智慧"),l("OutboundLink")],1)]),v._v(" "),l("ul",[l("li",[v._v("反复推敲代码")]),v._v(" "),l("li",[v._v("写优雅的代码，即枝丫分明的树状结构")]),v._v(" "),l("li",[v._v("写模块化的代码\n"),l("ul",[l("li",[v._v("避免写太长的函数（40 行）")]),v._v(" "),l("li",[v._v("制造小的工具函数")]),v._v(" "),l("li",[v._v("每个函数只做一件简单的事情")]),v._v(" "),l("li",[v._v("避免使用全局变量和类成员（class member）来传递信息，尽量使用局部变量和参数")]),v._v(" "),l("li",[v._v("写可读的代码\n"),l("ol",[l("li",[v._v("使用有意义的函数和变量名字")]),v._v(" "),l("li",[v._v("局部变量应该尽量接近使用它的地方")]),v._v(" "),l("li",[v._v("局部变量名字应该简短")]),v._v(" "),l("li",[v._v("不要重用局部变量")]),v._v(" "),l("li",[v._v("把复杂的逻辑提取出去，做成帮助函数")]),v._v(" "),l("li",[v._v("把复杂的表达式提取出去，做成中间变量")]),v._v(" "),l("li",[v._v("在合理的地方换行")])])])])]),v._v(" "),l("li",[v._v("写简单的代码\n"),l("ul",[l("li",[v._v("避免使用自增减表达式")]),v._v(" "),l("li",[v._v("永远不要省略花括号")]),v._v(" "),l("li",[v._v("合理使用括号，不要盲目依赖操作符优先级")]),v._v(" "),l("li",[v._v("避免使用"),l("code",[v._v("continue")]),v._v("和"),l("code",[v._v("break")])])])]),v._v(" "),l("li",[v._v("写直观的代码，可能笨一点、长一点")]),v._v(" "),l("li",[v._v("写无懈可击的代码")]),v._v(" "),l("li",[v._v("正确处理错误")]),v._v(" "),l("li",[v._v("防止过度工程\n"),l("ul",[l("li",[v._v("过度思考“将来”")]),v._v(" "),l("li",[v._v("过度关心“代码重用”")]),v._v(" "),l("li",[v._v("过度关心“测试”")]),v._v(" "),l("li",[v._v("解决原则\n"),l("ol",[l("li",[v._v("先把眼前的问题解决掉，解决好，再考虑将来的扩展问题。")]),v._v(" "),l("li",[v._v("先写出可用的代码，反复推敲，再考虑是否需要重用的问题。")]),v._v(" "),l("li",[v._v("先写出可用，简单，明显没有 bug 的代码，再考虑测试的问题。")])])])])])]),v._v(" "),l("blockquote",[l("p",[v._v("程序的绝大部分功能，是进行信息处理。从一堆纷繁复杂，模棱两可的信息中，排除掉绝大部分“干扰信息”，找到自己需要的那一个。正确地对所有\n的可能性”进行推理，就是写出无懈可击代码的核心思想。")])]),v._v(" "),l("blockquote",[l("p",[v._v('宁可名字取长一点，也不要起个模糊的名字。一个清楚的变量名还会带来可搜索的好处。即使在写二分算法时，也尽量别用"l"和"r"来指代左右边界，\n换成"left"和"right"会更好。')])]),v._v(" "),l("p",[l("img",{attrs:{src:"https://pic2.zhimg.com/v2-efc44075081622a7506a2ca9c1bf4746_b.jpg",alt:"时间分配"}})]),v._v(" "),l("h2",{attrs:{id:"other"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#other"}},[v._v("#")]),v._v(" other")]),v._v(" "),l("p",[v._v("在发现以下两点之前，我从来不喜欢自己的代码：\n– 单元测试增加了我对自己的想法的信心。\n– 重构和重写教会我先“使其正常运行”，然后“使其正确”。 第一次尝试并不意味着美丽。")])])}),[],!1,null,null,null);_.default=i.exports}}]);