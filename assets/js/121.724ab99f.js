(window.webpackJsonp=window.webpackJsonp||[]).push([[121],{560:function(t,e,r){"use strict";r.r(e);var a=r(56),l=Object(a.a)({},(function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"lru-缓存算法-近期最少使用算法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#lru-缓存算法-近期最少使用算法"}},[t._v("#")]),t._v(" LRU 缓存算法 - 近期最少使用算法")]),t._v(" "),r("p",[t._v("淘汰原则：近期最少使用数据移出内存")]),t._v(" "),r("p",[t._v("规则：")]),t._v(" "),r("ol",[r("li",[t._v("队列，先进先出")]),t._v(" "),r("li",[t._v("最近访问过，更新到队尾")])]),t._v(" "),r("p",[t._v("经典的 LRU 一般都使用 hashMap + 双向链表。考虑可能需要频繁删除一个元素，并将这个元素的前一个节点指向下一个节点，所以使用双链接最合适。并且它是按照结点最近被使用的时间顺序来存储的。 如果一个结点被访问了， 我们有理由相信它在接下来的一段时间被访问的概率要大于其它结点。")]),t._v(" "),r("p",[t._v("最优方案：")]),t._v(" "),r("ol",[r("li",[t._v("双链表 插入、删除 O(1)，head 为新缓存，tail 为旧缓存")]),t._v(" "),r("li",[t._v("Map 查找 O(1)")])]),t._v(" "),r("p",[r("a",{attrs:{href:"https://leetcode-cn.com/submissions/detail/215182646/",target:"_blank",rel:"noopener noreferrer"}},[t._v("LRU 缓存机制 - 提交记录 - 力扣（LeetCode）"),r("OutboundLink")],1)])])}),[],!1,null,null,null);e.default=l.exports}}]);