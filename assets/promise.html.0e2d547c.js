import{r as n,o as s,c as a,a as p,w as e,F as t,b as o,d as c}from"./app.31fc93bc.js";const l={},u=p("h1",{id:"promise",tabindex:"-1"},[p("a",{class:"header-anchor",href:"#promise","aria-hidden":"true"},"#"),o(" Promise")],-1),r={class:"table-of-contents"},i=o("概念"),k=o("Promise.all"),b=o("async/await"),m=o("错误处理"),d=o("await each"),f=o("复杂异步依赖场景"),h=o("race 方法"),w=o("finally"),y=o("其他"),g=c('<p><img src="http://ww1.sinaimg.cn/large/4e5d3ea7ly1h0hvynxp8oj20nz0b0767.jpg" alt="image.png"></p><p>Type: Object</p><blockquote><p>采用promise可以解决异步编程的逻辑嵌套问题</p></blockquote><blockquote><p>cb =&gt; then chain</p></blockquote><h2 id="概念" tabindex="-1"><a class="header-anchor" href="#概念" aria-hidden="true">#</a> 概念</h2><ul><li>对外提供 then 函数，对内三个状态</li><li>状态：pending fulfilled rejected</li><li>状态流转：pending 到后两者，到了后两者不再变</li><li>必须有一个 then 异步执行方法，then 接受两个参数且必须返回一个promise</li><li>值的代理</li></ul><p>题目：问数字打印顺序</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>\n<span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">reject</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>\n  window<span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>\n  <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>\n<span class="token comment">// 1 4 3</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>考察：</p><ul><li>Promise 构造函数是同步执行的（故封装时用 return），then/catch 中的函数是异步执行的。</li><li>Promise 能 reject 又 resolve 吗，实验不能</li></ul>',10),v={href:"https://liyaoli.com/2017-06-26/unhandled-promise-rejection.html",target:"_blank",rel:"noopener noreferrer"},j=o("unhandled promise rejection - 不忘初心，上下求索。"),x=c('<h2 id="promise-all" tabindex="-1"><a class="header-anchor" href="#promise-all" aria-hidden="true">#</a> Promise.all</h2><p>使用场景：有必然关联的接口</p><blockquote><p>在使用 promise.all 的时候要注意：业务上没有必然关联的请求比如联动组件这种，一定不要使用 promise.all，否则某个接口有问题，会导致其它正常的接口也拿不到数据</p></blockquote><p>实现：promise + all resolve count</p><p>替代方案：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> aReady <span class="token operator">=</span> <span class="token boolean">false</span>\n<span class="token keyword">let</span> bReady <span class="token operator">=</span> <span class="token boolean">false</span>\n\n<span class="token keyword">function</span> <span class="token function">aCB</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>bReady<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">do</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">bCB</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>aReady<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">do</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h2 id="async-await" tabindex="-1"><a class="header-anchor" href="#async-await" aria-hidden="true">#</a> async/await</h2><blockquote><p>Sugar around a generator that yields promises wrapped in a function that calls spawn to consume and chain those promises.</p></blockquote><ul><li>async function 隐式返回 Promise，显式 return 的内容会包裹于 resolve，在 then 中可以取到</li><li>async 是 Generator 的语法糖和改进</li></ul>',9),P={href:"https://tc39.es/ecmascript-asyncawait/",target:"_blank",rel:"noopener noreferrer"},_=o("标准 Async Functions"),q=o(" 搜索 sugar"),A=c('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> x <span class="token operator">+</span> y\n<span class="token punctuation">}</span>\n\n<span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">result</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token comment">// 5</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><ul><li>await 后面接 Promise，如果不是会转为 Promise.resolve(value)</li><li>await 只能与 async 配合使用</li></ul><p>旧的写法，同步异步代码混在一起时，需要单独做错误处理 用 async/await 只需要在外面处理一次</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/user/:id&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">try</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getUserFromDb</span><span class="token punctuation">(</span><span class="token punctuation">{</span> id<span class="token operator">:</span> req<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">//this will eventually be handled by your error handling middleware</span>\n    <span class="token function">next</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div>',4),E={href:"https://medium.com/@Abazhenov/using-async-await-in-express-with-node-8-b8af872c0016",target:"_blank",rel:"noopener noreferrer"},F=o("Using Async Await in Express with Node 9 – Alex Bazhenov – Medium"),L=c('<h3 id="错误处理" tabindex="-1"><a class="header-anchor" href="#错误处理" aria-hidden="true">#</a> 错误处理</h3><ol><li>一般是在 await 外面写 try-catch</li></ol><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>\n  <span class="token keyword">await</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// Here, `error` would be an `Error` (with stack trace, etc.).</span>\n  <span class="token comment">// Whereas if you used `throw 400`, it would just be `400`.</span>\n  <span class="token comment">// throw new Error(400);</span>\n  <span class="token comment">// throw 400; no stack trace info</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;#btn&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">try</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token string">&#39;tylermcginnis&#39;</span><span class="token punctuation">)</span>\n    <span class="token keyword">const</span> weather <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getWeather</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>location<span class="token punctuation">)</span>\n\n    <span class="token function">updateUI</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      user<span class="token punctuation">,</span>\n      weather\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">showError</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><ol start="2"><li>rejection 会向上抛，在上层 catch</li></ol><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    <span class="token function-variable function">then</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token comment">// resolve(0)</span>\n      <span class="token function">reject</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> r <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token comment">// 不会执行</span>\n  <span class="token comment">// try{</span>\n  <span class="token comment">// let r = await get()</span>\n  <span class="token comment">// console.log(r)</span>\n  <span class="token comment">// }catch(e) {</span>\n  <span class="token comment">// console.error(e)</span>\n  <span class="token comment">// }</span>\n<span class="token punctuation">}</span>\n<span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">e</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;error: &#39;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div>',5),U={href:"https://javascript.info/async-await",target:"_blank",rel:"noopener noreferrer"},I=o("Async/await"),O=p("h3",{id:"await-each",tabindex:"-1"},[p("a",{class:"header-anchor",href:"#await-each","aria-hidden":"true"},"#"),o(" await each")],-1),R=p("li",null,"for ... of 可以，forEach 不行，会先打印 nums",-1),S=p("li",null,"按序请求可以用 for-await-of",-1),T=p("li",null,"并行请求可以用 await Promise.all([])",-1),W=o("需要 async 配合，可以"),C=p("code",null,"(async function(){})()",-1),N={href:"https://stackoverflow.com/questions/37576685/using-async-await-with-a-foreach-loop",target:"_blank",rel:"noopener noreferrer"},z=o("javascript - Using async/await with a forEach loop - Stack Overflow"),B=c('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token parameter">ms <span class="token operator">=</span> <span class="token number">0</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> ms<span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">printNums</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>\n\n  <span class="token comment">// for (let num of nums) {</span>\n  nums<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token parameter">num</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">await</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token comment">// }</span>\n\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">printNums</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token comment">// promise.all 和 map</span>\n<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">printFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> files <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getFilePaths</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n  <span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>\n    files<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token parameter">file</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> contents <span class="token operator">=</span> <span class="token keyword">await</span> fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> <span class="token string">&#39;utf8&#39;</span><span class="token punctuation">)</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>contents<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div>',1),H={href:"https://developers.google.com/web/fundamentals/primers/promises#javascript_exceptions_and_promises",target:"_blank",rel:"noopener noreferrer"},M=o("JavaScript Promises: an Introduction  |  Web Fundamentals  |  Google Developers"),D=c('<h2 id="复杂异步依赖场景" tabindex="-1"><a class="header-anchor" href="#复杂异步依赖场景" aria-hidden="true">#</a> 复杂异步依赖场景</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>  <span class="token keyword">let</span> finishLoading <span class="token comment">// resolve fn</span>\n  <span class="token keyword">const</span> ready <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=&gt;</span> finishLoading <span class="token operator">=</span> resolve<span class="token punctuation">)</span>\n\n  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token function">finishLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 可能在某些数据依赖请求完成后调用</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span>\n\n  ready<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;ready in future&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>等待 state 更新的封装</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>  <span class="token keyword">async</span> <span class="token function">forceStateUpdate</span> <span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> resolve<span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="race-方法" tabindex="-1"><a class="header-anchor" href="#race-方法" aria-hidden="true">#</a> race 方法</h2><p>兼容性：chrome 32+ 不支持 IE10</p><h2 id="finally" tabindex="-1"><a class="header-anchor" href="#finally" aria-hidden="true">#</a> finally</h2><p>不支持任何入参</p><p>Chrome 63+</p><h2 id="其他" tabindex="-1"><a class="header-anchor" href="#其他" aria-hidden="true">#</a> 其他</h2><p>异常：Uncaught (in promise) catch 的过去时，在尾部 catch 即可</p>',11),G={href:"https://github.com/frontend9/fe9-interview/issues/14",target:"_blank",rel:"noopener noreferrer"},J=o("今日头条: 介绍下Promise，内部实现(一面) · Issue #14 · frontend9/fe9-interview"),X={href:"https://mp.weixin.qq.com/s/WOPY0OCJX8upEcMHm6F5Xw",target:"_blank",rel:"noopener noreferrer"},Z=o("高级异步模式 - Promise 单例"),V={href:"https://mp.weixin.qq.com/s/-NIAl9MZ1VaAZWLTL4H7LA",target:"_blank",rel:"noopener noreferrer"},Y=o("高级 Promise 模式 - Promise缓存"),$=p("p",null,"返回 Promise，而非 await 的结果",-1),K=p("p",null,"lodash memory 简化使用",-1);l.render=function(o,c){const l=n("RouterLink"),Q=n("OutboundLink");return s(),a(t,null,[u,p("nav",r,[p("ul",null,[p("li",null,[p(l,{to:"#概念"},{default:e((()=>[i])),_:1})]),p("li",null,[p(l,{to:"#promise-all"},{default:e((()=>[k])),_:1})]),p("li",null,[p(l,{to:"#async-await"},{default:e((()=>[b])),_:1}),p("ul",null,[p("li",null,[p(l,{to:"#错误处理"},{default:e((()=>[m])),_:1})]),p("li",null,[p(l,{to:"#await-each"},{default:e((()=>[d])),_:1})])])]),p("li",null,[p(l,{to:"#复杂异步依赖场景"},{default:e((()=>[f])),_:1})]),p("li",null,[p(l,{to:"#race-方法"},{default:e((()=>[h])),_:1})]),p("li",null,[p(l,{to:"#finally"},{default:e((()=>[w])),_:1})]),p("li",null,[p(l,{to:"#其他"},{default:e((()=>[y])),_:1})])])]),g,p("p",null,[p("a",v,[j,p(Q)])]),x,p("p",null,[p("a",P,[_,p(Q)]),q]),A,p("p",null,[p("a",E,[F,p(Q)])]),L,p("p",null,[p("a",U,[I,p(Q)])]),O,p("ul",null,[R,S,T,p("li",null,[W,C,p("a",N,[z,p(Q)])])]),B,p("p",null,[p("a",H,[M,p(Q)])]),D,p("p",null,[p("a",G,[J,p(Q)]),p("a",X,[Z,p(Q)]),p("a",V,[Y,p(Q)])]),$,K],64)};export default l;
