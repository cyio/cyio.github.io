import{r as n,o as s,c as a,a as e,w as p,F as t,b as o,d as l}from"./app.09b8f80a.js";const c={},r=e("h1",{id:"react",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#react","aria-hidden":"true"},"#"),o(" React")],-1),i={class:"table-of-contents"},u=o("为什么用"),k=o("学习参考"),d=o("Virtual DOM"),b=o("Issues"),m=o("布局总结"),h=o("JSX"),f=o("定义"),g=o("创建和使用组件"),v=o("render 中绑定函数提到外面"),y=o("learn"),j=o("hooks"),x=o("useState"),w=o("useEffect"),_=o("生命周期"),M=o("componentDidUpdate"),D=o("组件演化"),R=o("PropTypes"),S=o("Portal"),O=o("React.memo vs useMemo"),C=o("React diff 算法"),q=o("懒加载"),P=l('<h2 id="为什么用" tabindex="-1"><a class="header-anchor" href="#为什么用" aria-hidden="true">#</a> 为什么用</h2><ul><li><p>名称含义：re hack html</p></li><li><p>传统 web ，要更新一个状态，必须刷新整个页面，而重绘的伤害性体验，是传统 web 无法解决的</p><p>如何追踪变化？如何按需更新？</p></li><li><p>组件化，解决协作，复用问题</p><ul><li>VirtualDOM JS 版的 DOM ，高效渲染 DOM ，允许 diff ，允许服务端渲染</li><li>diff 两个 VirtualDOM 树</li><li>改变节点类型，会略过 diff</li></ul></li><li><p>函数就是组件</p><ul><li>组件内任意嵌套组件</li></ul></li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">c1</span> <span class="token operator">=</span> <span class="token parameter">props</span> <span class="token operator">=&gt;</span> <span class="token operator">&lt;</span>h1 <span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span><span class="token operator">&gt;</span>hello<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>\n\n<span class="token operator">&lt;</span>c1 style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> color<span class="token operator">:</span> <span class="token string">&#39;red&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><blockquote><p>React 再加上函数式编程技巧，项目可以无往而不利</p></blockquote><ul><li><p>显示和状态分离</p><p>用 stateless 组件来负责显示，class 组件来负责状态和逻辑</p></li></ul><h2 id="学习参考" tabindex="-1"><a class="header-anchor" href="#学习参考" aria-hidden="true">#</a> 学习参考</h2>',6),L={href:"http://developer.telerik.com/featured/5-steps-for-learning-react-application-development/",target:"_blank",rel:"noopener noreferrer"},N=o("5 Steps for Learning React Application Development - Telerik Developer Network"),E=l('<h2 id="virtual-dom" tabindex="-1"><a class="header-anchor" href="#virtual-dom" aria-hidden="true">#</a> Virtual DOM</h2><ul><li>两个前提：JS 高效，DOM 操作慢</li><li>生成虚拟 ODM 树，对比虚拟 DOM 树，用最少的操作更新视图</li></ul><h2 id="issues" tabindex="-1"><a class="header-anchor" href="#issues" aria-hidden="true">#</a> Issues</h2><ul><li><p>state 计算依赖，依赖值</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> counter<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>counter <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// won&#39;t update</span>\n<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token parameter">previousState</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> counter<span class="token operator">:</span> previousState<span class="token punctuation">.</span>counter <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li><li><p>state 可作为 props 向下传递，props 按组件树向下传递，而 state 由组件单独管理和由函数冒泡改变</p></li></ul><h2 id="布局总结" tabindex="-1"><a class="header-anchor" href="#布局总结" aria-hidden="true">#</a> 布局总结</h2><ol><li>react 宽度基于 pt 为单位， 可以通过 Dimensions 来获取宽高，PixelRatio 获取密度，如果想使用百分比，可以通过获取屏幕宽度手动计算。</li><li>基于 flex 的布局 <ol><li>view 默认宽度为 100%</li><li>水平居中用 alignItems, 垂直居中用 justifyContent</li><li>基于 flex 能够实现现有的网格系统需求，且网格能够各种嵌套无 bug</li></ol></li><li>图片布局 <ol><li>通过 Image.resizeMode 来适配图片布局，包括 contain, cover, stretch</li><li>默认不设置模式等于 cover 模式</li><li>contain 模式自适应宽高，给出高度值即可</li><li>cover 铺满容器，但是会做截取</li><li>stretch 铺满容器，拉伸</li></ol></li><li>定位 <ol><li>定位相对于父元素，父元素不用设置 position 也行</li><li>padding 设置在 Text 元素上的时候会存在 bug。所有 padding 变成了 marginBottom</li></ol></li><li>文本元素 <ol><li>文字必须放在 Text 元素里边</li><li>Text 元素可以相互嵌套，且存在样式继承关系</li><li>numberOfLines 需要放在最外层的 Text 元素上，且虽然截取了文字但是还是会占用空间</li></ol></li></ol><h2 id="jsx" tabindex="-1"><a class="header-anchor" href="#jsx" aria-hidden="true">#</a> JSX</h2><h3 id="定义" tabindex="-1"><a class="header-anchor" href="#定义" aria-hidden="true">#</a> 定义</h3><p>像 XML 的 JavaScript 语法扩展，用于描述包含属性的树状结构</p><p>我们只要记住 HTML 只是代码创建 DOM 的一种语法形式，就很容易理解 JSX。而这种使用代码构建界面的方式，完全消除了业务逻辑和界面元素之间的隔阂，让代码更加直观和易于维护。</p><ul><li>组件(首字母大写)</li><li>HTML 标签(首字母小写)</li></ul><h3 id="创建和使用组件" tabindex="-1"><a class="header-anchor" href="#创建和使用组件" aria-hidden="true">#</a> 创建和使用组件</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 创建</span>\n<span class="token keyword">var</span> MyComponent <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createClass</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token comment">/*...*/</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 使用</span>\n<span class="token keyword">var</span> myElement <span class="token operator">=</span> <span class="token operator">&lt;</span>MyComponent someProperty<span class="token operator">=</span><span class="token punctuation">{</span><span class="token boolean">true</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span>\nReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>myElement<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;example&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>命名组件解决子组件较多的情况</p><ul><li>如何使用混合子表达式</li><li>如何添加注释</li></ul><p>特殊属性:</p><ul><li>className 替换 class</li><li>htmlFor 替换 for</li></ul><p>可使用点号对象访问方式，构成组件名</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> MyComponents <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token function-variable function">DatePicker</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token function">DatePicker</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>Imagine a <span class="token punctuation">{</span>props<span class="token punctuation">.</span>color<span class="token punctuation">}</span> datepicker here<span class="token punctuation">.</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">BlueDatePicker</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token operator">&lt;</span>MyComponents<span class="token punctuation">.</span>DatePicker color<span class="token operator">=</span><span class="token string">&quot;blue&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>首字母大写才会被解析为用户定义组件，否则会认为是普通 HTML 标签</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> components <span class="token operator">=</span> <span class="token punctuation">{</span>\n  photo<span class="token operator">:</span> PhotoStory<span class="token punctuation">,</span>\n  video<span class="token operator">:</span> VideoStory\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">Story</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> SpecificStory <span class="token operator">=</span> components<span class="token punctuation">[</span>props<span class="token punctuation">.</span>storyType<span class="token punctuation">]</span>\n  <span class="token keyword">return</span> <span class="token operator">&lt;</span>SpecificStory story<span class="token operator">=</span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>story<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>扩展属性</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">App1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token operator">&lt;</span>Greeting firstName<span class="token operator">=</span><span class="token string">&quot;Ben&quot;</span> lastName<span class="token operator">=</span><span class="token string">&quot;Hector&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">App2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> props <span class="token operator">=</span> <span class="token punctuation">{</span> firstName<span class="token operator">:</span> <span class="token string">&#39;Ben&#39;</span><span class="token punctuation">,</span> lastName<span class="token operator">:</span> <span class="token string">&#39;Hector&#39;</span> <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> <span class="token operator">&lt;</span>Greeting <span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p><code>0</code>会被渲染，使用逻辑表达式前要确保条件类型是布尔值</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>\n  <span class="token punctuation">{</span>props<span class="token punctuation">.</span>messages<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span>\n    <span class="token operator">&lt;</span>MessageList messages<span class="token operator">=</span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>messages<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span>\n  <span class="token punctuation">}</span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>\n\n<span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>\n  <span class="token punctuation">{</span>props<span class="token punctuation">.</span>messages<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span>\n    <span class="token operator">&lt;</span>MessageList messages<span class="token operator">=</span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>messages<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span>\n  <span class="token punctuation">}</span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="render-中绑定函数提到外面" tabindex="-1"><a class="header-anchor" href="#render-中绑定函数提到外面" aria-hidden="true">#</a> render 中绑定函数提到外面</h2><p>官方解答，使用箭头函数是 OK 的，在你遇到性能问题之前</p>',27),H={href:"https://reactjs.org/docs/faq-functions.html",target:"_blank",rel:"noopener noreferrer"},I=o("Passing Functions to Components – React"),T=l('<p>原理：创建新函数，意味着 prop 值每次变化，进而不必要地 re render 子组件</p><ol><li>外提箭头函数赋值</li></ol><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function-variable function">handleClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;clickity&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ol start="2"><li>在构造器中统一绑定</li></ol><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">this</span><span class="token punctuation">.</span>handleClick <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handleClick</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;clickity&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div>',5),z={start:"3"},J=e("p",null,"解决绑定传参，拆分组件",-1),B={href:"https://daveceddia.com/avoid-bind-when-passing-props/",target:"_blank",rel:"noopener noreferrer"},A=o("Don't Use Bind When Passing Props"),F=e("h2",{id:"learn",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#learn","aria-hidden":"true"},"#"),o(" learn")],-1),U=e("p",null,"state 每个组件私有",-1),V=e("p",null,"当需要获取多个子组件数据，或两个组件需要相互通讯，state 提升到父组件",-1),X=e("p",null,"受控组件",-1),G=o("受控”与“非受控”两个概念，区别在于这个组件的状态是否可以被外部修改。一个设计得当的组件应该同时支持“受控”与“非受控”两种形式，即当开发者不控制组件属性时，组件自己管理状态，而当开发者控制组件属性时，组件该由属性控制。而开发一个复杂组件更需要注意这点，以避免只有部分属性受控，使其变成一个半受控组件。 "),K={href:"https://www.yuque.com/ant-design/course/goozth",target:"_blank",rel:"noopener noreferrer"},Q=o("受控组件与非受控组件 · 语雀"),W=l('<p>不可变数据：</p><ul><li><p>跟踪更容易</p></li><li><p>优势，帮助创建 pure components，变化时机 --&gt; 确定重新渲染</p></li><li><p>只有 render，不含私有数据(state)，写成函数组件更简单</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">NoStateComp</span> <span class="token operator">=</span> <span class="token parameter">props</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>\n  <span class="token operator">&lt;</span>div onClick<span class="token operator">=</span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>onClick<span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>children<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>\n<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><p>React 元素 对象 一等公民 参数传递</p></li><li><p>动态列表，指定 key，且 key 一般不要用数组索引</p></li><li><p>组合，no 继承</p></li><li><p>大型 webapp 首选</p></li><li><p>组件划分原则，单一职责</p></li><li><p>渲染 UI vs 添加交互</p><p>大量编码 vs 大量细节</p></li><li><p>prop vs state</p><p>构建静态版本时，不需要 state</p></li><li><p>小型 vs 大型</p><p>自下而上 vs 自上而下</p></li></ul><p>state 需要定义的最少数据</p><p>创建新上层组件理由，需要存放共同 state</p><ul><li>class ==&gt; hook why <ul><li>组件复用，抽象层嵌套地域</li><li>生命周期，不相关逻辑分散</li><li>class this 理解难度大</li></ul></li></ul><h2 id="hooks" tabindex="-1"><a class="header-anchor" href="#hooks" aria-hidden="true">#</a> hooks</h2><ul><li>hooks 是一种在函数式组件内使用 state 逻辑，消除写 classes 的必要。</li><li>vue 可以结合 mixin 来写无状态的函数式组件。mixin 的缺点是无法消费或使用另一个 mixin。导致链式逻辑难以实现。</li><li>更清晰定义和共享逻辑、传递 state</li></ul>',7),Y={href:"https://blog.logrocket.com/hooks-are-coming-to-vue/",target:"_blank",rel:"noopener noreferrer"},Z=o("Hooks are coming to Vue.js version 3.0 - LogRocket Blog"),$={href:"https://zhuanlan.zhihu.com/p/66170210",target:"_blank",rel:"noopener noreferrer"},nn=o("useHooks~小窍门 - 知乎"),sn=e("h3",{id:"usestate",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#usestate","aria-hidden":"true"},"#"),o(" useState")],-1),an=e("p",null,"use 设置对象或数组时替换， 有别于 class 合并",-1),en=e("p",null,"除非需要替换更新的一类数据，否则都应该分开定义",-1),pn={href:"https://zh-hans.reactjs.org/docs/hooks-faq.html#should-i-use-one-or-many-state-variables",target:"_blank",rel:"noopener noreferrer"},tn=o("Hooks FAQ – React"),on={href:"https://blog.solutotlv.com/react-class-to-hooks/",target:"_blank",rel:"noopener noreferrer"},ln=o("React Class features vs. Hooks equivalents • Soluto Engineering Blog"),cn={href:"https://github.com/shanggqm/blog/issues/4",target:"_blank",rel:"noopener noreferrer"},rn=o("无意识设计-复盘 React Hook 的创造过程 · Issue #4 · shanggqm/blog"),un=l('<ul><li><p>调用限制：</p><ul><li><p>只在 top level 调用 Hooks，而不能在循环、条件或嵌套函数中使用</p></li><li><p>只在 React 函数组件或自定义 Hooks 中调用，而不能在普通 JS 函数中</p></li></ul></li><li><p>useState 里数据务必为 immutable</p></li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>        <span class="token comment">// bad 这样无法触发更新</span>\n        <span class="token function">setList</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">-</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// good 必须传入一个新的对象</span>\n        <span class="token function">setList</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">-</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="useeffect" tabindex="-1"><a class="header-anchor" href="#useeffect" aria-hidden="true">#</a> useEffect</h3>',3),kn=e("li",null,[e("p",null,"async 要用 IIFE 包起来")],-1),dn=e("p",null,[o("组件渲染后执行，不阻塞绘制。"),e("code",null,"componentDidMount"),o(" and "),e("code",null,"componentDidUpdate"),o("是同步")],-1),bn={href:"https://frezc.github.io/2019/03/23/react-hooks-traps/",target:"_blank",rel:"noopener noreferrer"},mn=o("react hooks 踩坑记录 | Code for fun"),hn=e("li",null,[e("p",null,[o("什么情况下不用？操作 DOM 且每次渲染不一样，DOM 更新后又触发 effect。用户会看到界面闪烁，只有这一种情况需要使用"),e("code",null,"useLayoutEffect"),o("，执行在 dom 更新后，绘制前")])],-1),fn={href:"https://kentcdodds.com/blog/useeffect-vs-uselayouteffect",target:"_blank",rel:"noopener noreferrer"},gn=o("useEffect vs useLayoutEffect"),vn=l('<p>Fragment 相当于 vue 的 template</p><p>加空格方式 <code>{&#39; &#39;}</code></p><p>setState 更新回调</p><ol><li>componentDidUpdate</li><li><code>setState(updater, callback)</code></li></ol><p>render return 里可直接定义变量<code>const ChapterName = &lt;h2&gt;{chapterName}&lt;/h2&gt;;</code></p><h2 id="生命周期" tabindex="-1"><a class="header-anchor" href="#生命周期" aria-hidden="true">#</a> 生命周期</h2>',6),yn={href:"https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/",target:"_blank",rel:"noopener noreferrer"},jn=o("React lifecycle methods diagram"),xn=l('<h3 id="componentdidupdate" tabindex="-1"><a class="header-anchor" href="#componentdidupdate" aria-hidden="true">#</a> componentDidUpdate</h3><ul><li>组件更新后立即调用，首次渲染不调用</li><li>用于网络请求导致 props 变化等</li><li>注意，执行操作要有条件，避免死循环</li></ul><h2 id="组件演化" tabindex="-1"><a class="header-anchor" href="#组件演化" aria-hidden="true">#</a> 组件演化</h2><p><img src="http://ww1.sinaimg.cn/large/4e5d3ea7ly1gikjo188z2j21q80x8gs0.jpg" alt="image.png"></p><h2 id="proptypes" tabindex="-1"><a class="header-anchor" href="#proptypes" aria-hidden="true">#</a> PropTypes</h2><p>默认非必须，即允许 null / undefined</p><h2 id="portal" tabindex="-1"><a class="header-anchor" href="#portal" aria-hidden="true">#</a> Portal</h2><p>仅影响 DOM 结构，不影响事件、生命周期、组件树</p><h2 id="react-memo-vs-usememo" tabindex="-1"><a class="header-anchor" href="#react-memo-vs-usememo" aria-hidden="true">#</a> React.memo vs useMemo</h2><p>类型，顶层 api，hooks 第二参数，比较函数（是否相等），依赖数组</p><p>避免受</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">propsAreEqual</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">prevProp<span class="token operator">:</span> any<span class="token punctuation">,</span> nextProp<span class="token operator">:</span> any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>prevProp<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>nextProp<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> result<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\nReact<span class="token punctuation">.</span><span class="token function">memo</span><span class="token punctuation">(</span>Comp<span class="token punctuation">,</span> propsAreEqual<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>useMemo 缓存计算值，仅依赖变化时重新计算</p><h2 id="react-diff-算法" tabindex="-1"><a class="header-anchor" href="#react-diff-算法" aria-hidden="true">#</a> React diff 算法</h2><ul><li>不同元素类型，旧元素卸载，挂载新元素</li><li>相同类型的 DOM 元素，只更新属性</li><li>相同类型的 Component 元素，更新 prop</li><li>DOM 子元素遍历比较，顺序发生变化会全部认为 diff，可用 key 显式指明是否是同一元素</li></ul>',15),wn={href:"https://reactjs.org/docs/reconciliation.html",target:"_blank",rel:"noopener noreferrer"},_n=o("Reconciliation – React"),Mn={href:"http://benweizhu.github.io/blog/2018/04/22/deep-thinking-in-react-5/",target:"_blank",rel:"noopener noreferrer"},Dn=o("React的思考（五）- Reconciliation - NO END FOR LEARNING"),Rn=o("不可变数据优势 "),Sn={href:"https://zh-hans.reactjs.org/tutorial/tutorial.html#why-immutability-is-important",target:"_blank",rel:"noopener noreferrer"},On=o("入门教程: 认识 React – React"),Cn=e("ul",null,[e("li",null,"易于实现复杂特性，如撤销和恢复")],-1),qn=e("h2",{id:"懒加载",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#懒加载","aria-hidden":"true"},"#"),o(" 懒加载")],-1),Pn=e("p",null,"React.lazy 配合 Suspense",-1);c.render=function(o,l){const c=n("RouterLink"),Ln=n("OutboundLink");return s(),a(t,null,[r,e("nav",i,[e("ul",null,[e("li",null,[e(c,{to:"#为什么用"},{default:p((()=>[u])),_:1})]),e("li",null,[e(c,{to:"#学习参考"},{default:p((()=>[k])),_:1})]),e("li",null,[e(c,{to:"#virtual-dom"},{default:p((()=>[d])),_:1})]),e("li",null,[e(c,{to:"#issues"},{default:p((()=>[b])),_:1})]),e("li",null,[e(c,{to:"#布局总结"},{default:p((()=>[m])),_:1})]),e("li",null,[e(c,{to:"#jsx"},{default:p((()=>[h])),_:1}),e("ul",null,[e("li",null,[e(c,{to:"#定义"},{default:p((()=>[f])),_:1})]),e("li",null,[e(c,{to:"#创建和使用组件"},{default:p((()=>[g])),_:1})])])]),e("li",null,[e(c,{to:"#render-中绑定函数提到外面"},{default:p((()=>[v])),_:1})]),e("li",null,[e(c,{to:"#learn"},{default:p((()=>[y])),_:1})]),e("li",null,[e(c,{to:"#hooks"},{default:p((()=>[j])),_:1}),e("ul",null,[e("li",null,[e(c,{to:"#usestate"},{default:p((()=>[x])),_:1})]),e("li",null,[e(c,{to:"#useeffect"},{default:p((()=>[w])),_:1})])])]),e("li",null,[e(c,{to:"#生命周期"},{default:p((()=>[_])),_:1}),e("ul",null,[e("li",null,[e(c,{to:"#componentdidupdate"},{default:p((()=>[M])),_:1})])])]),e("li",null,[e(c,{to:"#组件演化"},{default:p((()=>[D])),_:1})]),e("li",null,[e(c,{to:"#proptypes"},{default:p((()=>[R])),_:1})]),e("li",null,[e(c,{to:"#portal"},{default:p((()=>[S])),_:1})]),e("li",null,[e(c,{to:"#react-memo-vs-usememo"},{default:p((()=>[O])),_:1})]),e("li",null,[e(c,{to:"#react-diff-算法"},{default:p((()=>[C])),_:1})]),e("li",null,[e(c,{to:"#懒加载"},{default:p((()=>[q])),_:1})])])]),P,e("p",null,[e("a",L,[N,e(Ln)])]),E,e("p",null,[e("a",H,[I,e(Ln)])]),T,e("ol",z,[e("li",null,[J,e("p",null,[e("a",B,[A,e(Ln)])])])]),F,U,V,X,e("blockquote",null,[e("p",null,[G,e("a",K,[Q,e(Ln)])])]),W,e("p",null,[e("a",Y,[Z,e(Ln)]),e("a",$,[nn,e(Ln)])]),sn,an,en,e("p",null,[e("a",pn,[tn,e(Ln)]),e("a",on,[ln,e(Ln)]),e("a",cn,[rn,e(Ln)])]),un,e("ul",null,[kn,e("li",null,[dn,e("p",null,[e("a",bn,[mn,e(Ln)])])]),hn]),e("p",null,[e("a",fn,[gn,e(Ln)])]),vn,e("p",null,[e("a",yn,[jn,e(Ln)])]),xn,e("p",null,[e("a",wn,[_n,e(Ln)]),e("a",Mn,[Dn,e(Ln)])]),e("p",null,[Rn,e("a",Sn,[On,e(Ln)])]),Cn,qn,Pn],64)};export default c;
