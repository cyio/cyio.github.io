import{r as e,o as n,c as s,a,w as t,F as l,b as o,d as p}from"./app.26466922.js";const c={},r=a("h1",{id:"dom-事件",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#dom-事件","aria-hidden":"true"},"#"),o(" Dom 事件")],-1),i={class:"table-of-contents"},u=o("基础"),d=o("事件委托（代理）"),m=o("scroll"),v=o("mouseout vs mouseleave"),b=o("mouseenter vs mouseover"),h=o("dispatchEvent"),k=p('<h2 id="基础" tabindex="-1"><a class="header-anchor" href="#基础" aria-hidden="true">#</a> 基础</h2><ul><li>事件阶段(eventPhase )：捕获 -&gt; (到达)目标 -&gt; 冒泡</li><li>现代浏览器默认冒泡，如果不希望这样，<code>e.stopPropagation()</code></li><li>默认不使用捕获，如果想捕获，<code>addEventListener()</code>第三个参数(useCapture)设为<code>true</code></li><li>冒泡允许我们利用事件委托，避免在每个子节点单独设置事件监听器<div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>propagation 传播，传播路径，停止传播\npreventDefault 取消事件\nCustomEvent carry data\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><blockquote><p>历史，IE 实现成冒泡，NetScape 实现成捕获，后期浏览器都支持了这两种事件机制</p></blockquote></li></ul>',2),g={href:"https://www.w3.org/TR/DOM-Level-3-Events/#event-flow",target:"_blank",rel:"noopener noreferrer"},f=o("UI Events"),x=p('<h2 id="事件委托-代理" tabindex="-1"><a class="header-anchor" href="#事件委托-代理" aria-hidden="true">#</a> 事件委托（代理）</h2><ul><li>问题：比如列表，如果列表项挨个绑定，内存消耗大，存在动态绑定删减问题</li><li>利用冒泡的原理，把事件加到父级上，触发执行效果。</li><li>有一个列表页，页面结构是外面一个 BODY， 里面有一万个子 DIV，每个 DIV 里面有一些文字，这些文字都不相同。需求是，点击一个 DIV，要求弹个 alert 框，将 DIV 里的文字显示出来。你会怎么做。 <blockquote><p>只用给外面的元素（本题是 BODY）添加点击事件，在点击时，可以获取到引发点击事件的源元素（如某 DIV），将这个元素的文本内容弹出来即可。</p></blockquote></li><li>documentFragment 一个列表页，需要你往里面插入一千个 DOM，你怎么做？ <blockquote><p>很多时候，你往页面中加一个 DOM，就会引起页面的重构。如果你使用遍历来逐一添加，每添加一次，页面都会重新渲染一次，这种做法会带来性能的下降。好的方式是把要添加的元素先缓存起来， 要添加时一次性添加。一般会使用 documentFragment 来进行缓存，还有些使用长的字符串（HTML 代码串）来缓存</p></blockquote></li></ul><h2 id="scroll" tabindex="-1"><a class="header-anchor" href="#scroll" aria-hidden="true">#</a> scroll</h2><p><code>scroll</code>的<code>event.target</code>是<code>document</code>，只能在<code>window/document</code>上监听到</p><h2 id="mouseout-vs-mouseleave" tabindex="-1"><a class="header-anchor" href="#mouseout-vs-mouseleave" aria-hidden="true">#</a> mouseout vs mouseleave</h2><ul><li>mouseout 会冒泡，mouseleave 不会<div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>parent\n  &gt; child\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ol><li>鼠标移出 child 会触发</li><li>鼠标从 parent 可见区域移到 child 会触发</li></ol></li></ul>',6),E={href:"https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseleave_event",target:"_blank",rel:"noopener noreferrer"},w=o("Element: mouseleave event - Web APIs | MDN"),D={href:"https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md",target:"_blank",rel:"noopener noreferrer"},I=o("EventListenerOptions/explainer.md at gh-pages · WICG/EventListenerOptions"),_=p('<h2 id="mouseenter-vs-mouseover" tabindex="-1"><a class="header-anchor" href="#mouseenter-vs-mouseover" aria-hidden="true">#</a> mouseenter vs mouseover</h2><ul><li>如果目标包含子元素、且与子元素存在间距, over 会在经过间距时触发</li><li>enter 只关心目标整体，触发一次</li></ul><h2 id="dispatchevent" tabindex="-1"><a class="header-anchor" href="#dispatchevent" aria-hidden="true">#</a> dispatchEvent</h2><ul><li>兼容性很好</li><li>自定义事件与原生事件同名时，都能接收到，但触发互不影响</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>$<span class="token number">0.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;hi&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n$<span class="token number">0.</span><span class="token function">dispatchEvent</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Event</span><span class="token punctuation">(</span><span class="token string">&#39;hi&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 支持传递自定义数据</span>\n<span class="token keyword">const</span> event <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CustomEvent</span><span class="token punctuation">(</span><span class="token string">&#39;build&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> detail<span class="token operator">:</span> elem<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>time <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>  <span class="token comment">// event loop</span>\n  <span class="token comment">// 同步任务 异步任务</span>\n  <span class="token comment">// 主线程，事件队列（微任务，宏任务）</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>',6);c.render=function(o,p){const c=e("RouterLink"),L=e("OutboundLink");return n(),s(l,null,[r,a("nav",i,[a("ul",null,[a("li",null,[a(c,{to:"#基础"},{default:t((()=>[u])),_:1})]),a("li",null,[a(c,{to:"#事件委托-代理"},{default:t((()=>[d])),_:1})]),a("li",null,[a(c,{to:"#scroll"},{default:t((()=>[m])),_:1})]),a("li",null,[a(c,{to:"#mouseout-vs-mouseleave"},{default:t((()=>[v])),_:1})]),a("li",null,[a(c,{to:"#mouseenter-vs-mouseover"},{default:t((()=>[b])),_:1})]),a("li",null,[a(c,{to:"#dispatchevent"},{default:t((()=>[h])),_:1})])])]),k,a("p",null,[a("a",g,[f,a(L)])]),x,a("p",null,[a("a",E,[w,a(L)]),a("a",D,[I,a(L)])]),_],64)};export default c;
