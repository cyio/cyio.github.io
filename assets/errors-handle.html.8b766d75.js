import{r as n,o as s,c as a,a as e,w as t,F as p,b as o,d as r}from"./app.09b8f80a.js";const l={},c=e("h1",{id:"错误处理",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#错误处理","aria-hidden":"true"},"#"),o(" 错误处理")],-1),u={class:"table-of-contents"},i=o("throw"),d=o("Vue"),k=o("Image"),b=o("Sentry"),h=o("错误模拟"),m=o("实践"),g=o("1px gif"),f=o("cdn 脚本错误"),v=r('<h2 id="throw" tabindex="-1"><a class="header-anchor" href="#throw" aria-hidden="true">#</a> throw</h2><ul><li>什么情况下用 throw，即不满足继续执行条件，继续执行没意义，只会显示更多无用错误，甚至可能是死循环</li><li>中断函数执行，抛出一个 exception 对象，包含 name 和 message 两个属性，也可以添加其它的属性 <code>try ... catch (e) {console.log(e.name, e.message)}</code> catch 从句可捕获异常错误</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">divide</span><span class="token punctuation">(</span><span class="token parameter">num1<span class="token punctuation">,</span> num2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> num1 <span class="token operator">!=</span> <span class="token string">&#39;number&#39;</span> <span class="token operator">||</span> <span class="token keyword">typeof</span> num2 <span class="token operator">!=</span> <span class="token string">&#39;number&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;divide(): Both arguments must be numbers.&#39;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> num1 <span class="token operator">/</span> num2\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>可抽象成断言函数，简化错误输出</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">assert</span><span class="token punctuation">(</span><span class="token parameter">conditon<span class="token punctuation">,</span> message</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>condition<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">divide</span><span class="token punctuation">(</span><span class="token parameter">num1<span class="token punctuation">,</span> num2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">assert</span><span class="token punctuation">(</span>\n    <span class="token keyword">typeof</span> num1 <span class="token operator">!=</span> <span class="token string">&#39;number&#39;</span> <span class="token operator">||</span> <span class="token keyword">typeof</span> num2 <span class="token operator">!=</span> <span class="token string">&#39;number&#39;</span><span class="token punctuation">,</span>\n    <span class="token string">&#39;divide(): Both arguments must be numbers.&#39;</span>\n  <span class="token punctuation">)</span>\n  <span class="token keyword">return</span> num1 <span class="token operator">/</span> num2\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div>',5),w={href:"https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onerror",target:"_blank",rel:"noopener noreferrer"},y=o("GlobalEventHandlers.onerror | MDN"),E={href:"https://developers.google.com/web/tools/chrome-devtools/console/track-exceptions?hl=zh-cn",target:"_blank",rel:"noopener noreferrer"},j=o("异常和错误处理  |  Tools for Web Developers  |  Google Developers"),_={href:"https://gist.github.com/nevergiveup-j/f8df2b1854492e0f80b6",target:"_blank",rel:"noopener noreferrer"},x=o("前端代码异常日志收集与监控"),A={href:"http://bitcoin-on-nodejs.ebookchain.org/2-Node.js%25E5%2585%25A5%25E9%2597%25A8%25E6%258C%2587%25E5%258D%2597/4-%25E6%2582%25A8%25E5%25BF%2585%25E9%25A1%25BB%25E7%259F%25A5%25E9%2581%2593%25E7%259A%2584%25E5%2587%25A0%25E4%25B8%25AANodejs%25E7%25BC%2596%25E7%25A0%2581%25E4%25B9%25A0%25E6%2583%25AF.html",target:"_blank",rel:"noopener noreferrer"},B=o("您必须知道的几个 Nodejs 编码习惯 · GitBook"),C=e("h2",{id:"vue",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#vue","aria-hidden":"true"},"#"),o(" Vue")],-1),S=e("ul",null,[e("li",null,[e("code",null,"Vue.config.errorHandler"),o("在这里设置上报")]),e("li",null,[e("code",null,"Vue.config.warnHandler"),o("在 production 会忽略")]),e("li",null,[e("code",null,"errorCaptured"),o(" hook 可以用来做 error-boundary 组件，2.5+ 可用，捕获子孙组件 vue render 错误，捕获不了 click 等事件函数错误")])],-1),F={href:"https://cn.vuejs.org/v2/guide/deployment.html#%25E8%25B7%259F%25E8%25B8%25AA%25E8%25BF%2590%25E8%25A1%258C%25E6%2597%25B6%25E9%2594%2599%25E8%25AF%25AF",target:"_blank",rel:"noopener noreferrer"},D=o("生产环境部署 — Vue.js"),V={href:"https://catchjs.com/Docs/Vue",target:"_blank",rel:"noopener noreferrer"},G=o("Error handling with Vue.js (a story of rental cars and Destinys Child) | CatchJS"),L={href:"https://github.com/CatChen/catchen.me/blob/c622f7c49e5b603cb4d768c189e1c2e0436bebcf/public/_layout.jade#L87",target:"_blank",rel:"noopener noreferrer"},I=o("catchen.me/_layout.jade at c622f7c49e5b603cb4d768c189e1c2e0436bebcf · CatChen/catchen.me"),N={href:"http://www.cnblogs.com/hustskyking/p/fe-monitor.html",target:"_blank",rel:"noopener noreferrer"},q=o("前端代码异常日志收集与监控 - Barret Lee - 博客园"),z={href:"https://github.com/happylindz/blog/issues/5",target:"_blank",rel:"noopener noreferrer"},H=o("前端代码异常监控实战 · Issue #5 · happylindz/blog"),P=r('<h2 id="image" tabindex="-1"><a class="header-anchor" href="#image" aria-hidden="true">#</a> Image</h2><ol><li>在 img 标签上设置 <code>v-on:error=&quot;&quot;</code></li><li>设置替换图片，要保证替换图片存在，否则可能造成死循环</li></ol><h2 id="sentry" tabindex="-1"><a class="header-anchor" href="#sentry" aria-hidden="true">#</a> Sentry</h2><p>手动上报 <code>Sentry.captureMessage(&#39;Something went wrong&#39;);</code></p><p>Capturing Events - Docs https://docs.sentry.io/error-reporting/capturing/?platform=javascript</p><h2 id="错误模拟" tabindex="-1"><a class="header-anchor" href="#错误模拟" aria-hidden="true">#</a> 错误模拟</h2><ul><li>dev tool block，忽略这种情况，意义不大</li><li>mock 500，这种常见，onError 能捕获到</li></ul><h2 id="实践" tabindex="-1"><a class="header-anchor" href="#实践" aria-hidden="true">#</a> 实践</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>\n    <span class="token comment">// 监控js错误</span>\n    window<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">msg<span class="token punctuation">,</span> _url<span class="token punctuation">,</span> line<span class="token punctuation">,</span> col<span class="token punctuation">,</span> error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 采用异步的方式,避免阻塞</span>\n      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>\n      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// 监控资源加载错误(img,script,css,以及jsonp)</span>\n    window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;error&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    \n    window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;unhandledrejection&#39;</span><span class="token punctuation">,</span> <span class="token parameter">event</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="_1px-gif" tabindex="-1"><a class="header-anchor" href="#_1px-gif" aria-hidden="true">#</a> 1px gif</h2><ol><li>没有跨域问题，一般这种上报数据，代码要写通用的；（排除ajax）</li><li>不会阻塞页面加载，影响用户的体验，只要new Image对象就好了；（排除JS/CSS文件资源方式上报）</li><li>在所有图片中，体积最小；（比较PNG/JPG）</li></ol><h2 id="cdn-脚本错误" tabindex="-1"><a class="header-anchor" href="#cdn-脚本错误" aria-hidden="true">#</a> cdn 脚本错误</h2><p>脚本由于跨域的问题，错误监控拿到的错误信息里面只有Script Error</p><p>What the heck is &quot;Script error&quot;? | Product Blog • Sentry https://blog.sentry.io/2016/05/17/what-is-script-error https://html.spec.whatwg.org/multipage/scripting.html#attr-script-crossorigin</p>',14);l.render=function(o,r){const l=n("RouterLink"),J=n("OutboundLink");return s(),a(p,null,[c,e("nav",u,[e("ul",null,[e("li",null,[e(l,{to:"#throw"},{default:t((()=>[i])),_:1})]),e("li",null,[e(l,{to:"#vue"},{default:t((()=>[d])),_:1})]),e("li",null,[e(l,{to:"#image"},{default:t((()=>[k])),_:1})]),e("li",null,[e(l,{to:"#sentry"},{default:t((()=>[b])),_:1})]),e("li",null,[e(l,{to:"#错误模拟"},{default:t((()=>[h])),_:1})]),e("li",null,[e(l,{to:"#实践"},{default:t((()=>[m])),_:1})]),e("li",null,[e(l,{to:"#_1px-gif"},{default:t((()=>[g])),_:1})]),e("li",null,[e(l,{to:"#cdn-脚本错误"},{default:t((()=>[f])),_:1})])])]),v,e("p",null,[e("a",w,[y,e(J)]),e("a",E,[j,e(J)]),e("a",_,[x,e(J)]),e("a",A,[B,e(J)])]),C,S,e("p",null,[e("a",F,[D,e(J)])]),e("p",null,[e("a",V,[G,e(J)])]),e("p",null,[e("a",L,[I,e(J)])]),e("p",null,[e("a",N,[q,e(J)])]),e("p",null,[e("a",z,[H,e(J)])]),P],64)};export default l;
