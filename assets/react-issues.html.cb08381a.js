import{r as a,o as n,c as e,a as s,w as t,F as l,b as r,d as o}from"./app.09b8f80a.js";const p={},i=s("h1",{id:"react-issues",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#react-issues","aria-hidden":"true"},"#"),r(" react issues")],-1),c={class:"table-of-contents"},u=r("页面结构"),d=r("注意"),h=r("page bare template"),m=r("TypeScript"),b=r("JSON 快速生成 TS"),k=r("影响效率因素"),f=r("新建页面"),g=r("表格实现"),v=r("路径 routes"),x=r("connect"),y=r("解构对象内容"),_=r("checkbox.group"),w=r("classNames"),j=r("umi requestType 默认是 json，可选 form"),S=r("iconfont.cn use in antd"),R=r("hover exclude"),q=r("useEffect 反复执行"),C=r("数据联动"),E=r("antd form onFinished"),P=r("hook state 拆分合并原则"),I=r("可以在函数内直接申明普通常量或普通函数吗？"),T=r("useEffect 不要用 async, use useCallback instead"),M=r("list virtualized"),D=r("生命周期模拟 useEffect"),F=r("calc px 计算"),L=r("播放器能支持哪些文件类型"),z=r("使用多个 useState 或 useReducer"),H=r("复杂 state 逻辑建议用 React 自带 useReducer"),U=r("自定义 hook"),A=r("RangePicker 没有样式"),O=r("dva 使用"),N=r("antd 权限组件"),W=r("hook dva snip"),J=r("umi ui"),V=r("自定义左侧菜单 icon"),B=r("动态 menu"),G=r("参数路由"),Y=r("layouts"),Q=r("视图无关的数据"),K=r("re-render"),Z=r("why mapState mapDispatch"),X=r("容器组件模式"),$=r("umi 简化数据流方案"),aa=r("class 组件不能用 hooks"),na=r("form 表单数据存储到上层组件"),ea=r("Warning: [antd: Upload] value is not a valid prop, do you mean fileList?"),sa=r("Unhandled Rejection (TypeError): Object(...) is not a function"),ta=r("使用 upload 组件上传图片提示：Uncaught Error: must set key for <rc-animate> children"),la=r("Error: Too many re-renders. React limits the number of renders to prevent an infinite loop."),ra=r("自定义表单控件"),oa=r("useModel 是否会触发 redux 插件"),pa=r("给定深层数据 id，tree 结构定位"),ia=r("antd 官方 dragger 丢失文件"),ca=r("useEffect 函数惰性，绑定函数记忆的可以是旧的依赖值"),ua=r("切换素材时，Form.item 下发的 value 不更新，故改为手动传"),da=r("react props 默认值使用非基础类型 引起不必要更新"),ha=r("Failed to execute 'clone' on 'Response' umi"),ma=r("antd layout"),ba=r("menu"),ka=r("useModel 持久化，浅拷贝数据里如果有对象 对象经修改，会保持"),fa=r("异步权限"),ga=r("关闭菜单国际化"),va=r("对象意外修改"),xa=r("总结自己使用过的 Hooks 数据流方式 - 掘金"),ya=r("CSS module 局部作用域"),_a=r("权限控制"),wa=r("模块模式"),ja=r("记忆 memo"),Sa=r("file.type 不可靠"),Ra=r("动态样式"),qa=r("undefined 未赋值 null 值为空"),Ca=r("less alpha"),Ea=r("antd 日期选择 预设日期"),Pa=r("特殊选中需求"),Ia=r("使用 传递对象，修改时，注意提前 clone，不要影响原对象"),Ta=r("审核自动切换"),Ma=r("css hover 不适用内容有间距场景"),Da=r("antd 日期组件返回的时间是当时时间"),Fa=r("replace DesignLayout with ProLayout"),La=r("权限处理"),za=r("ts demo"),Ha=r("percent 事件频繁导致 多个组件过度 render"),Ua=r("跨代数据共享"),Aa=r("我是如何无缝的扩展 antd 组件 - 知乎"),Oa=r("ant design repo"),Na=r("高阶组件"),Wa=r("Antd 强烈风格，不适合较大定制"),Ja=r("线上 设计素材浏览有个 bug，切换二级菜单时，列表数据某些场景会互相影响"),Va=r("图标替换"),Ba=r("require 文件不存在"),Ga=r("React 如何点击页面空白处关闭弹窗"),Ya=r("umi env 页面内不要解构 p"),Qa=s("wbr",null,null,-1),Ka=r("rocess.env"),Za=r("form field 避免下标访问，不利于扩展"),Xa=r("公共组件样式"),$a=r("husky"),an=r("antd range-picker blur hide 如何实现"),nn=r("stylelint 异常输出"),en=r("umi-request requestType 生效条件"),sn=r("createPortal，左右切换时，生成多余 div"),tn=r("todo material-lib"),ln=r("React Hooks(四): immutable - 知乎"),rn=r("caches 操作要求 https"),on=r("请求优化，token 是否存在或在有效期内"),pn=r("static propTypes"),cn=r("何时单独用 xhr"),un=r("ImmerJS 优于使用 lodash 创建拷贝"),dn=r("竞速 race"),hn=r("upload drag 扩大区域"),mn=r("定位代码最快方式"),bn=r("开发阶段 eslint 影响初期效率"),kn=r("临时禁用 lint"),fn=r("空数组约定"),gn=r("map key"),vn=r("HMR => Fast Refresh"),xn=r("dan note"),yn=r("constructor 里发请求？"),_n=r("自定义 Tag"),wn=r("jsx map join => reduce"),jn=r("pages 重复渲染，尤其 audio 有动画明显"),Sn=r("effect 相关函数处理："),Rn=r("modal router"),qn=r("鼠标进入触发 lottie"),Cn=r("antd table"),En=r("state 派生自 prop，组件内又修改 state"),Pn=r("第二层弹窗问题"),In=r("redux dev tool crash"),Tn=r("无效组件"),Mn=r("点击文本复制"),Dn=r("半受控，props 变化，需要更新部分 state"),Fn=r("缓存计算"),Ln=r("ripple btn"),zn=r("跨组件引用可变对象"),Hn=r("webpack CPU占用高"),Un=r("表格踩坑，最佳实践"),An=r("URL hash 变化，如何更新页面"),On=o('<h2 id="页面结构" tabindex="-1"><a class="header-anchor" href="#页面结构" aria-hidden="true">#</a> 页面结构</h2><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>page =&gt; connect\n\ncomponents\n\ndva model\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="注意" tabindex="-1"><a class="header-anchor" href="#注意" aria-hidden="true">#</a> 注意</h2><ul><li><p>不能缺少文件，文件不能为空</p><p>样式占位</p><div class="language-css ext-css line-numbers-mode"><pre class="language-css"><code><span class="token selector">.xx</span> <span class="token punctuation">{</span>\n  <span class="token property">background</span><span class="token punctuation">:</span> initial<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><p>modal 可以用别的页面复制一个</p></li><li><p>routes -&gt; config -&gt; index</p></li></ul><h2 id="page-bare-template" tabindex="-1"><a class="header-anchor" href="#page-bare-template" aria-hidden="true">#</a> page bare template</h2><ol><li>export function</li></ol><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span>\n<span class="token comment">// import &#39;./index.less&#39;;</span>\n<span class="token comment">// import styles from &#39;./index.less&#39;;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">Comp</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>\n      <span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span>detail hello<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>\n    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> Comp\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><ol start="2"><li>export component</li></ol><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span>\n<span class="token comment">// import styles from &#39;./index.less&#39;;</span>\n<span class="token keyword">const</span> propTypes <span class="token operator">=</span> <span class="token punctuation">{</span>\n  id<span class="token operator">:</span> PropTypes<span class="token punctuation">.</span>number<span class="token punctuation">.</span>isRequired<span class="token punctuation">,</span>\n  url<span class="token operator">:</span> PropTypes<span class="token punctuation">.</span>string<span class="token punctuation">.</span>isRequired<span class="token punctuation">,</span>\n  text<span class="token operator">:</span> PropTypes<span class="token punctuation">.</span>string\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> defaultProps <span class="token operator">=</span> <span class="token punctuation">{</span>\n  text<span class="token operator">:</span> <span class="token string">&#39;Hello World&#39;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Comp</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>\n  state <span class="token operator">=</span> <span class="token punctuation">{</span>\n    hello<span class="token operator">:</span> <span class="token string">&#39;world&#39;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> <span class="token punctuation">{</span> hello <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state\n    <span class="token keyword">return</span> <span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span><span class="token punctuation">{</span>hello<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\nComp<span class="token punctuation">.</span>propTypes <span class="token operator">=</span> propTypes\nComp<span class="token punctuation">.</span>defaultProps <span class="token operator">=</span> defaultProps\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><ul><li><p>提示：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Each record in table should have a unique `key` prop,or set `rowKey` to an unique primary key. #7623\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>mock 数据，id 重了</p></li><li><p>全局安装 <code>yarn global add typescript</code></p></li></ul><h2 id="typescript" tabindex="-1"><a class="header-anchor" href="#typescript" aria-hidden="true">#</a> TypeScript</h2><p>校验：</p>',12),Nn=s("li",null,[s("p",null,"antd 引入应该在 interface 之前")],-1),Wn=s("li",null,[s("p",null,"命名不要重名"),s("p",null,"组件 -> model(数据) -> interface(TS)"),s("p",null,"dva model 小写"),s("p",null,"interface 单独命名，辅助性的，重要性低"),s("p",null,"组件名只定义一次，没啥问题"),s("p",null,"批量重命名踩坑，替换时正则需要使用大小写敏感")],-1),Jn=o('<p>event 定义</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">onUpdatingServerName</span><span class="token punctuation">(</span><span class="token parameter">event<span class="token operator">:</span> React<span class="token punctuation">.</span>ChangeEvent<span class="token operator">&lt;</span>HTMLInputElement<span class="token operator">&gt;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>newserverName <span class="token operator">=</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>',2),Vn={href:"https://stackoverflow.com/questions/44321326/property-value-does-not-exist-on-type-eventtarget-in-typescript/44321394",target:"_blank",rel:"noopener noreferrer"},Bn=r("javascript - Property 'value' does not exist on type EventTarget in TypeScript - Stack Overflow"),Gn=o('<h3 id="json-快速生成-ts" tabindex="-1"><a class="header-anchor" href="#json-快速生成-ts" aria-hidden="true">#</a> JSON 快速生成 TS</h3><ol><li>vscode 新建文件</li><li>复制有效的 JSON，需要带上括号</li><li>执行<code>Paste JSON as TYPE</code></li></ol><ul><li><p>any 慎用，那什么时候用呢？a. 用户输入 b. 不知道数组内数据类型</p></li><li><p>拆分粒度</p></li><li><p>render 不能用 async，不能 setState</p></li><li><p>?</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token punctuation">{</span>\n  curPaymentMethod <span class="token operator">===</span> <span class="token string">&#39;1&#39;</span> <span class="token operator">?</span> <span class="token punctuation">(</span>\n    <span class="token operator">&lt;</span>AliPayModal\n      visible<span class="token operator">=</span><span class="token punctuation">{</span>modalVisible<span class="token punctuation">}</span>\n      onCancel<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>closeModal<span class="token punctuation">}</span>\n      onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>onPayDone<span class="token punctuation">}</span>\n    <span class="token operator">/</span><span class="token operator">&gt;</span>\n  <span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span>\n    <span class="token operator">&lt;</span>WechatPayModal\n      visible<span class="token operator">=</span><span class="token punctuation">{</span>modalVisible<span class="token punctuation">}</span>\n      onCancel<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>closeModal<span class="token punctuation">}</span>\n      onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>onPayDone<span class="token punctuation">}</span>\n      qrCodeStr<span class="token operator">=</span><span class="token string">&quot;hahajl&quot;</span>\n    <span class="token operator">/</span><span class="token operator">&gt;</span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><blockquote><p>Uncaught Invariant Violation: Objects are not valid as a React child (found: [object Promise]). If you meant to render a collection of children, use an array instead. in WechatPayModal (created by Pay)</p></blockquote></li><li><p>路由 components 与子 routes 互 chi？</p></li><li><p>func comp 在父层处理 async，请求后或 dismount</p></li><li><p>antd ts 在 node_modules 中找</p></li><li><p>只检验 stashed</p></li><li><p>ts 函数要写明返回</p></li></ul><h2 id="影响效率因素" tabindex="-1"><a class="header-anchor" href="#影响效率因素" aria-hidden="true">#</a> 影响效率因素</h2><ul><li>熟练手写 ts，类型补全或自定义 snip</li><li>dom 闭合补全 &gt; emmet 可以用</li><li>timeout ts number window.setTimeout</li><li>obj / array 如果有内容，内容也要 ts 定义</li><li>serve:no-mock</li></ul><h2 id="新建页面" tabindex="-1"><a class="header-anchor" href="#新建页面" aria-hidden="true">#</a> 新建页面</h2><ol><li><p>验证路由配置是否正确，最小步骤</p><ol><li>add route</li><li>add pages index.js，不要创建其它文件，会报错</li></ol></li><li><p>新建 service，确认需要使用的全部接口，有多少接口写多少 model</p></li><li><p>新建 model，写这个时与 service side by side，入参需要看下 showDoc</p></li></ol><h2 id="表格实现" tabindex="-1"><a class="header-anchor" href="#表格实现" aria-hidden="true">#</a> 表格实现</h2><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>~/Projects/work/AiJianZiPlatform/src/routes/Useradmin/BSchool/b-school.js\n\nCard(title=&quot;filter node&quot;) // col - formItem - select\n  StandardTable\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ol start="2"><li>SearchList</li></ol><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>~/Projects/work/ajz-admin-agency/src/pages/student-manage/student-account/index.tsx\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ol start="3"><li>自己拼装 searchList 上面不能加东西 course-limit</li></ol><h2 id="路径-routes" tabindex="-1"><a class="header-anchor" href="#路径-routes" aria-hidden="true">#</a> 路径 routes</h2><ol><li>下级必须是上级子路径</li></ol>',14),Yn=s("li",null,[s("p",null,"提交操作，总是要考虑防止过快多次点击")],-1),Qn={href:"https://stackoverflow.com/questions/55265604/uncaught-invariant-violation-too-many-re-renders-react-limits-the-number-of-re",target:"_blank",rel:"noopener noreferrer"},Kn=r("javascript - Uncaught Invariant Violation: Too many re-renders. React limits the number of renders to prevent an infinite loop - Stack Overflow"),Zn=r(" setState 被直接调用了"),Xn=s("li",null,[s("p",null,"classNames 样式类合并")],-1),$n=s("li",null,[s("p",null,"TS 不处理提交会影响别人，一定要处理、熟悉，提高效率")],-1),ae=s("li",null,[s("p",null,"原型、设计，找别人确认，有疑问要早问，后续改成本高")],-1),ne=s("li",null,[s("p",null,"我们把这个版本的 identity 函数叫做泛型，因为它可以适用于多个类型。 不同于使用 any，它不会丢失信息，像第一个例子那像保持准确性，传入数值类型并返回数值类型。")],-1),ee=o('<h2 id="connect" tabindex="-1"><a class="header-anchor" href="#connect" aria-hidden="true">#</a> connect</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">mapStateToProps</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">state<span class="token operator">:</span> ConnectState</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> classes<span class="token punctuation">,</span> loading <span class="token punctuation">}</span> <span class="token operator">=</span> state\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    classes<span class="token punctuation">,</span>\n    loading<span class="token operator">:</span> loading<span class="token punctuation">.</span>effects<span class="token punctuation">[</span>queryBaseStatApi<span class="token punctuation">]</span><span class="token punctuation">,</span>\n    saveLoading<span class="token operator">:</span> loading<span class="token punctuation">.</span>effects<span class="token punctuation">[</span>createClassApi<span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">connect</span><span class="token punctuation">(</span>mapStateToProps<span class="token punctuation">)</span><span class="token punctuation">(</span>Page<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>React.FC 新类型，可以处理 state</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> React <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span>\n\n<span class="token keyword">interface</span> <span class="token class-name">IProps</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ... props interface</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// NEW syntax for typing function components</span>\n<span class="token keyword">const</span> MyNewComponent<span class="token operator">:</span> React<span class="token punctuation">.</span><span class="token constant">FC</span><span class="token operator">&lt;</span>IProps<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> React <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span>\n<span class="token keyword">const</span> FunctionComponent<span class="token operator">:</span> React<span class="token punctuation">.</span><span class="token function-variable function">FC</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// The useState hook</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>hooks 返回 return undefined or a function</p>',5),se={href:"https://levelup.gitconnected.com/usetypescript-a-complete-guide-to-react-hooks-and-typescript-db1858d1fb9c",target:"_blank",rel:"noopener noreferrer"},te=r("useTypescript — A Complete Guide to React Hooks and TypeScript"),le=s("p",null,"max-length 会阻止输入，进而不触发验证提示",-1),re=s("p",null,"searchList ts 定义来自，tableColumns dataIndex",-1),oe=s("p",null,"ts 参数用尖括号",-1),pe=s("p",null,"ts 单独文件定义，跳转很方便",-1),ie=s("p",null,"反击自动化",-1),ce=r("加验证头，能解决插件下载吗？ "),ue={href:"https://github.com/videojs/http-streaming/issues/357#issuecomment-374889346",target:"_blank",rel:"noopener noreferrer"},de=r("Prevent downloading encrypted content with Firefox video download helper extension · Issue #357 · videojs/http-streaming"),he=o('<h2 id="解构对象内容" tabindex="-1"><a class="header-anchor" href="#解构对象内容" aria-hidden="true">#</a> 解构对象内容</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> body <span class="token punctuation">}</span> <span class="token operator">=</span> ctx<span class="token punctuation">.</span>request <span class="token keyword">as</span> <span class="token punctuation">{</span> body<span class="token operator">:</span> CreateOperation <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="checkbox-group" tabindex="-1"><a class="header-anchor" href="#checkbox-group" aria-hidden="true">#</a> checkbox.group</h2><p>比较特殊，需要在 group 级控制子内容 checked 属性</p><p>defaultValue 设置后就不再变，列表条目切换会相互影响</p><p><s>value 设置后，点击状态不变，需要 onChange 把变化向上传递，再传回响应变化</s></p><h2 id="classnames" tabindex="-1"><a class="header-anchor" href="#classnames" aria-hidden="true">#</a> classNames</h2><p>这里 styles.disabled 是动态类名，要用数组下标方式包起来。字符串不需要</p><p><code>&lt;a className={classNames({ [styles.disabled]: !haveRoles })}</code></p><h2 id="umi-requesttype-默认是-json-可选-form" tabindex="-1"><a class="header-anchor" href="#umi-requesttype-默认是-json-可选-form" aria-hidden="true">#</a> umi requestType 默认是 json，可选 form</h2><h2 id="iconfont-cn-use-in-antd" tabindex="-1"><a class="header-anchor" href="#iconfont-cn-use-in-antd" aria-hidden="true">#</a> iconfont.cn use in antd</h2><p>createFromIconfontCN</p><h2 id="hover-exclude" tabindex="-1"><a class="header-anchor" href="#hover-exclude" aria-hidden="true">#</a> hover exclude</h2><p>Pointer events to the rescue!</p>',14),me={href:"https://techstacker.com/css-remove-hover-pointer-events-none/",target:"_blank",rel:"noopener noreferrer"},be=r("How to ignore Hover/Mouseover events on specific element in CSS with the pointer-events property – Techstacker"),ke=o('<h2 id="useeffect-反复执行" tabindex="-1"><a class="header-anchor" href="#useeffect-反复执行" aria-hidden="true">#</a> useEffect 反复执行</h2><p>trick 第二参数不变，只执行一次</p><p>配合第二参数、返回函数，相当于三个生命周期</p><h2 id="数据联动" tabindex="-1"><a class="header-anchor" href="#数据联动" aria-hidden="true">#</a> 数据联动</h2><ul><li>输入关键字 提交</li><li>标签选择 选中 提交 <ul><li>选中 不支持 反选</li><li>仅素材类型 限单选</li></ul></li><li>筛选 过滤回显 数据包含类型关系 <ul><li>顺序要求</li><li>删除、如何修改对应值</li></ul></li></ul><p>同级组件需要伟递事件，只能依靠 model 了？</p><p>searchParams</p><p>Function components cannot be given refs</p><h2 id="antd-form-onfinished" tabindex="-1"><a class="header-anchor" href="#antd-form-onfinished" aria-hidden="true">#</a> antd form onFinished</h2><p>通过时提交</p><h2 id="hook-state-拆分合并原则" tabindex="-1"><a class="header-anchor" href="#hook-state-拆分合并原则" aria-hidden="true">#</a> hook state 拆分合并原则</h2><ol><li>将完全不相关的 state 拆分为多组 state。比如 size 和 position。</li><li>如果某些 state 是相互关联的，或者需要一起发生改变，就可以把它们合并为一组 state。比如 left 和 top。</li></ol><p>依赖数组依赖的值最好不要超过 3 个，否则会导致代码会难以维护。 如果发现依赖数组依赖的值过多，我们应该采取一些方法来减少它。 去掉不必要的依赖。 将 Hook 拆分为更小的单元，每个 Hook 依赖于各自的依赖数组。 通过合并相关的 state，将多个依赖值聚合为一个。 通过 setState 回调函数获取最新的 state，以减少外部依赖。 通过 ref 来读取可变变量的值，不过需要注意控制修改它的途径。</p>',13),fe={href:"https://zhuanlan.zhihu.com/p/85969406",target:"_blank",rel:"noopener noreferrer"},ge=r("React Hooks 你真的用对了吗？ - 知乎"),ve=s("h2",{id:"可以在函数内直接申明普通常量或普通函数吗",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#可以在函数内直接申明普通常量或普通函数吗","aria-hidden":"true"},"#"),r(" 可以在函数内直接申明普通常量或普通函数吗？")],-1),xe=s("p",null,"可以但不建议，Function Component 每次渲染都会重新执行，常量推荐放到函数外层避免性能问题，函数推荐使用 useCallback 申明。",-1),ye=s("p",null,"简单的组件间通信使用透传 Props 变量的方式，而频繁组件间通信使用 React.useContext",-1),_e={href:"https://zhuanlan.zhihu.com/p/81752821",target:"_blank",rel:"noopener noreferrer"},we=r("精读《React Hooks 最佳实践》 - 知乎"),je={href:"https://zhuanlan.zhihu.com/p/94949118",target:"_blank",rel:"noopener noreferrer"},Se=r("《蚂蚁前端研发最佳实践》文字稿 - 知乎"),Re=s("p",null,"hook class 转换，多个 render 函数，里面是 return",-1),qe=s("p",null,"getDerivedStateFromProps 介于 contructor 和 render 之间，响应 props 变化，返回 state",-1),Ce=s("h2",{id:"useeffect-不要用-async-use-usecallback-instead",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#useeffect-不要用-async-use-usecallback-instead","aria-hidden":"true"},"#"),r(" useEffect 不要用 async, use useCallback instead")],-1),Ee={href:"https://stackoverflow.com/questions/53332321/react-hook-warnings-for-async-function-in-useeffect-useeffect-function-must-ret",target:"_blank",rel:"noopener noreferrer"},Pe=r("javascript - React Hook Warnings for async function in useEffect: useEffect function must return a cleanup function or nothing - Stack Overflow"),Ie=o('<p>useEffect 应该什么都不返回，而 async 隐式返回 promise</p><h2 id="list-virtualized" tabindex="-1"><a class="header-anchor" href="#list-virtualized" aria-hidden="true">#</a> list virtualized</h2><p>为大数据列表，性能优化，非必须</p><h2 id="生命周期模拟-useeffect" tabindex="-1"><a class="header-anchor" href="#生命周期模拟-useeffect" aria-hidden="true">#</a> 生命周期模拟 useEffect</h2><p>因为生命周期处理的都是副作用，在 hook 里就是用 useEffect</p><p>可以写多个 useEffect，给 effect fn 命名以区分职责</p><p>useEffect 每次渲染（DOM 更新）完执行 effect fn</p><blockquote><p>不用再去考虑“挂载”还是“更新”。React 保证了每次运行 effect 的同时，DOM 都已经更新完毕</p></blockquote><p>生命周期对应 useEffect 用法：</p><ul><li>componentDidMount []</li><li>componentDidUpdate [states.count | props.count] 仅变化时调用，减少不必要执行</li><li>componentWillUnmount return function cleanup</li></ul><p>getDerivedStateFromProps 渲染中赋值，如果需要对比差异，可以增加缓存值</p><p>shouldComponentUpdate React.memo</p><p>什么是副作用，数据获取，browser api</p><p>render （提升成）函数本身，函数组件就是一个 render 函数</p>',14),Te={href:"https://juejin.im/post/5d3db4da518825016f644561",target:"_blank",rel:"noopener noreferrer"},Me=r("Hooks 与 React 生命周期的关系 - 掘金"),De=s("p",null,"hook 在最顶层调用，如果需要有条件执行，在 hook 内部判断",-1),Fe=s("h2",{id:"calc-px-计算",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#calc-px-计算","aria-hidden":"true"},"#"),r(" calc px 计算")],-1),Le={href:"https://stackoverflow.com/questions/42548630/css3-calc-minus-vh-with-pixel/42556033",target:"_blank",rel:"noopener noreferrer"},ze=r("css - Css3 calc minus vh with pixel - Stack Overflow"),He=s("h2",{id:"播放器能支持哪些文件类型",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#播放器能支持哪些文件类型","aria-hidden":"true"},"#"),r(" 播放器能支持哪些文件类型")],-1),Ue=s("p",null,"第三方播放器取决于浏览器支持",-1),Ae={href:"https://developer.mozilla.org/en-US/docs/Web/Media/Formats/Containers",target:"_blank",rel:"noopener noreferrer"},Oe=r("Media container formats (file types) - Web media technologies | MDN"),Ne=o('<h2 id="使用多个-usestate-或-usereducer" tabindex="-1"><a class="header-anchor" href="#使用多个-usestate-或-usereducer" aria-hidden="true">#</a> 使用多个 useState 或 useReducer</h2><p>Should I use multiple useState or useReducer?</p><p>For independent things (isHovering and textInput), multiple useState. 独立状态，使用多个 useState</p><p>For things that change together (isFetching and fetchedItems), or if their next state depends on previous (todos), I prefer useReducer. 状态一起改变，或状态前后依赖，更倾向用 useReducer</p><h2 id="复杂-state-逻辑建议用-react-自带-usereducer" tabindex="-1"><a class="header-anchor" href="#复杂-state-逻辑建议用-react-自带-usereducer" aria-hidden="true">#</a> 复杂 state 逻辑建议用 React 自带 useReducer</h2><p>如果从组件状态上升到应用状态，用 Redux redux 不仅是状态管理，是一种架构 出了 bug，好定位</p><blockquote><p>我新开发的应用几乎都用到了 Redux，以前做选择是很简单的：几乎所有项目都用 Redux 就行了！ 当你向 Redux 状态添加内容时，加进来的是一个抽象层以及随之而来的复杂度。 换句话说，你大可放心使用 Redux，但是每次用到它时应该有合适的理由。</p></blockquote><p>使用理由：</p><ul><li>使用网络之类的 I/O 或设备 API。</li><li>保存或加载状态。</li><li>与非子组件共享其状态。 （如素材库的查找参数，多个组件更新，可以做为一个抽象层，不要跟别的逻辑混在一起）</li><li>需要与应用程序的其他部分共享业务逻辑或数据处理过程。</li></ul>',9),We={href:"https://medium.com/javascript-scene/do-react-hooks-replace-redux-210bab340672",target:"_blank",rel:"noopener noreferrer"},Je=r("Do React Hooks Replace Redux? - JavaScript Scene - Medium"),Ve=s("h2",{id:"自定义-hook",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#自定义-hook","aria-hidden":"true"},"#"),r(" 自定义 hook")],-1),Be=s("li",null,"逻辑抽象",-1),Ge=r("复用 "),Ye={href:"https://juejin.im/post/5df8b978e51d45584006e1f5",target:"_blank",rel:"noopener noreferrer"},Qe=r("基用 React Hooks + Antd 快速实现一个列表页 - 掘金"),Ke=o('<h2 id="rangepicker-没有样式" tabindex="-1"><a class="header-anchor" href="#rangepicker-没有样式" aria-hidden="true">#</a> RangePicker 没有样式</h2><p>重启服务后正常</p><h2 id="dva-使用" tabindex="-1"><a class="header-anchor" href="#dva-使用" aria-hidden="true">#</a> dva 使用</h2><h2 id="antd-权限组件" tabindex="-1"><a class="header-anchor" href="#antd-权限组件" aria-hidden="true">#</a> antd 权限组件</h2><ul><li>layout 级的 authority 不起作用？</li><li>可以嵌套 layout，SecurityLayout &gt; BasicLayout &gt; page</li></ul><h2 id="hook-dva-snip" tabindex="-1"><a class="header-anchor" href="#hook-dva-snip" aria-hidden="true">#</a> hook dva snip</h2><h2 id="umi-ui" tabindex="-1"><a class="header-anchor" href="#umi-ui" aria-hidden="true">#</a> umi ui</h2>',7),Ze=r("可视化配置工具，用处不大 查看模板可访问 "),Xe={href:"https://preview.pro.ant.design/dashboard/analysis",target:"_blank",rel:"noopener noreferrer"},$e=r(" 关闭参考"),as=s("code",null,"start:no-ui",-1),ns=r("命令"),es=s("h2",{id:"自定义左侧菜单-icon",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#自定义左侧菜单-icon","aria-hidden":"true"},"#"),r(" 自定义左侧菜单 icon")],-1),ss=s("ol",null,[s("li",null,"defaultSettings iconfontUrl"),s("li",null,"修改 router config")],-1),ts={href:"https://prolayout.ant.design/",target:"_blank",rel:"noopener noreferrer"},ls=r("配置 api 介绍"),rs=o('<h2 id="动态-menu" tabindex="-1"><a class="header-anchor" href="#动态-menu" aria-hidden="true">#</a> 动态 menu</h2><p>setMenuData</p><h2 id="参数路由" tabindex="-1"><a class="header-anchor" href="#参数路由" aria-hidden="true">#</a> 参数路由</h2><h2 id="layouts" tabindex="-1"><a class="header-anchor" href="#layouts" aria-hidden="true">#</a> layouts</h2><p>UserLayout 就是上方有个 logo、下方留空，如给登录使用</p><h2 id="视图无关的数据" tabindex="-1"><a class="header-anchor" href="#视图无关的数据" aria-hidden="true">#</a> 视图无关的数据</h2><p>定义在 RFC 外面</p><h2 id="re-render" tabindex="-1"><a class="header-anchor" href="#re-render" aria-hidden="true">#</a> re-render</h2><p>每次 re-render，<strong>异步函数</strong>会创建新实例，原始版本不再指向正确的实例</p><p>使用 useCallback，并提供依赖值</p><h2 id="why-mapstate-mapdispatch" tabindex="-1"><a class="header-anchor" href="#why-mapstate-mapdispatch" aria-hidden="true">#</a> why mapState mapDispatch</h2><p>任何能在组件外以 redux action 方式生存的异步业务逻辑，考虑到使操作不受组件生命周期影响，仅定义为容器的 mapDispatchToProps 并传递给组件，这样意味着你的组件可免除异步逻辑、而变得相当简单，业务逻辑不再与视图紧耦合</p>',12),os=r("展示组件唯一依赖来源 prop，不关心数据怎么来、不关心什么是 dispatch "),ps={href:"https://stackoverflow.com/questions/39419237/what-is-mapdispatchtoprops",target:"_blank",rel:"noopener noreferrer"},is=r("reactjs - What is mapDispatchToProps? - Stack Overflow"),cs=s("h2",{id:"容器组件模式",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#容器组件模式","aria-hidden":"true"},"#"),r(" 容器组件模式")],-1),us=s("p",null,"容器处理数据获取，然后渲染相应的子组件，就是这样",-1),ds=s("p",null,[r("相应组件意味着同名，如 "),s("code",null,"StockWidgetContainer => StockWidget")],-1),hs=s("p",null,"数据获取和渲染职责分离、渲染组件可复用，渲染组件依靠 PropTypes 显式失败",-1),ms={href:"https://medium.com/@learnreact/container-components-c0e67432e005#.1a9j3w1jl",target:"_blank",rel:"noopener noreferrer"},bs=r("Container Components - Learn React with chantastic - Medium"),ks=s("h2",{id:"umi-简化数据流方案",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#umi-简化数据流方案","aria-hidden":"true"},"#"),r(" umi 简化数据流方案")],-1),fs={href:"https://umijs.org/zh-CN/plugins/plugin-model",target:"_blank",rel:"noopener noreferrer"},gs=r("@umijs/plugin-model"),vs=o('<div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>页面 pattern model/\\*_/_ 或 \\*.model.ts\npages/user/counter.model.js\npages/user/models/counter.js\nuseModel(&#39;user.counter&#39;)\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>namespace 小写命名，跟其它类型变量区分</p><p>有哪些 namespace 可用，编辑器会提示</p><p>发现还是全局请求了，意思是只支持全局，支持不同的放置位置</p><p>或者可以把方法导出去，只在需要的页面调用</p>',5),xs=r("https://github.com/umijs/umi/issues/5195#issuecomment-672527326 "),ys={href:"https://github.com/ant-design/ant-design-pro/issues/6605",target:"_blank",rel:"noopener noreferrer"},_s=r("Ant Design Pro V5 已经支持预览 · Issue #6605 · ant-design/ant-design-pro"),ws=s("blockquote",null,[s("p",null,"对于轻量级的数据流我们都推荐这种方案。")],-1),js={href:"https://zhuanlan.zhihu.com/p/103150605",target:"_blank",rel:"noopener noreferrer"},Ss=r("Umi Hooks - 助力拥抱 React Hooks - 知乎"),Rs={href:"https://juejin.im/post/5ee081e551882543221d8b42",target:"_blank",rel:"noopener noreferrer"},qs=r("Umi Hooks 实用代码片段整理 - 掘金"),Cs=o('<div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>import {useMouse, useWindowSize, useScroll} from &#39;react-use&#39;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="class-组件不能用-hooks" tabindex="-1"><a class="header-anchor" href="#class-组件不能用-hooks" aria-hidden="true">#</a> class 组件不能用 hooks</h2><blockquote><p>你可以用 hoc 包一层 数据逻辑极端复杂时，用 class</p></blockquote><p>React hooks 我也在项目中使用了一段时间，确实有它的优势的地方但是好像也没你文章里说的这么好，它确实是将逻辑复用变得更简单纯粹，但是我平时业务开发的时候，复用的不只是逻辑，ui 也需要复用。所以平时封装的时候，封装你文中这种和业务结合交大的自定义 hook 会比较少，大多数时候还是会封装那种 ui 和状态并存的常规组件，当然为了兼容差异化 ui 需求，会通过 render props 配合默认 render，或者使用内部 Context 实现的 Compound component，来将组件拆离成合理的 ui 粒度，同时保留内部逻辑，通过这两种方式来满足你文中提到的差异化 ui 的需求。使用自定义 hook，感觉还是那种工具类型的更合适些</p><h2 id="form-表单数据存储到上层组件" tabindex="-1"><a class="header-anchor" href="#form-表单数据存储到上层组件" aria-hidden="true">#</a> form 表单数据存储到上层组件</h2><p>fields</p><h2 id="warning-antd-upload-value-is-not-a-valid-prop-do-you-mean-filelist" tabindex="-1"><a class="header-anchor" href="#warning-antd-upload-value-is-not-a-valid-prop-do-you-mean-filelist" aria-hidden="true">#</a> Warning: [antd: Upload] <code>value</code> is not a valid prop, do you mean <code>fileList</code>?</h2><p>上传是比较特殊组件，放在 form 里，要特殊设置</p><p>需要同时使用?</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>valuePropName <span class="token operator">=</span> <span class="token string">&#39;fileList&#39;</span> <span class="token comment">// 指明特殊组件类型</span>\ngetValueFromEvent <span class="token operator">=</span> <span class="token punctuation">{</span> normFile <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="unhandled-rejection-typeerror-object-is-not-a-function" tabindex="-1"><a class="header-anchor" href="#unhandled-rejection-typeerror-object-is-not-a-function" aria-hidden="true">#</a> Unhandled Rejection (TypeError): Object(...) is not a function</h2><p>function 没有导出</p><h2 id="使用-upload-组件上传图片提示-uncaught-error-must-set-key-for-rc-animate-children" tabindex="-1"><a class="header-anchor" href="#使用-upload-组件上传图片提示-uncaught-error-must-set-key-for-rc-animate-children" aria-hidden="true">#</a> 使用 upload 组件上传图片提示：Uncaught Error: must set key for &lt;rc-animate&gt; children</h2><p>没有设置 uid</p><h2 id="error-too-many-re-renders-react-limits-the-number-of-renders-to-prevent-an-infinite-loop" tabindex="-1"><a class="header-anchor" href="#error-too-many-re-renders-react-limits-the-number-of-renders-to-prevent-an-infinite-loop" aria-hidden="true">#</a> Error: Too many re-renders. React limits the number of renders to prevent an infinite loop.</h2><p><code>onClick={setSideIndex(index)}</code></p><h2 id="自定义表单控件" tabindex="-1"><a class="header-anchor" href="#自定义表单控件" aria-hidden="true">#</a> 自定义表单控件</h2><p>完全受控</p><div class="language-jsx ext-jsx line-numbers-mode"><pre class="language-jsx"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Dragger</span></span> <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>uploadProps<span class="token punctuation">}</span></span> <span class="token attr-name">fileList</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>value<span class="token punctuation">}</span></span> <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>onChange<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ant-upload-text<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">拖入或点击添加工程文件</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Dragger</span></span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="usemodel-是否会触发-redux-插件" tabindex="-1"><a class="header-anchor" href="#usemodel-是否会触发-redux-插件" aria-hidden="true">#</a> useModel 是否会触发 redux 插件</h2><h2 id="给定深层数据-id-tree-结构定位" tabindex="-1"><a class="header-anchor" href="#给定深层数据-id-tree-结构定位" aria-hidden="true">#</a> 给定深层数据 id，tree 结构定位</h2><p>转换 tree 为 dict，并添加 parentId 和 index</p><h2 id="antd-官方-dragger-丢失文件" tabindex="-1"><a class="header-anchor" href="#antd-官方-dragger-丢失文件" aria-hidden="true">#</a> antd 官方 dragger 丢失文件</h2><h2 id="useeffect-函数惰性-绑定函数记忆的可以是旧的依赖值" tabindex="-1"><a class="header-anchor" href="#useeffect-函数惰性-绑定函数记忆的可以是旧的依赖值" aria-hidden="true">#</a> useEffect 函数惰性，绑定函数记忆的可以是旧的依赖值</h2><ul><li>如果<code>useEffect</code>第一个函数参数直接或者间接用上某个变量，就请把这个变量放在<code>useEffect</code>的第二个参数里</li><li>使用<code>useEffect</code>，不要调用函数层次太多，代码应该一眼看清楚哪些函数会被<code>useEffect</code>调用。</li><li>只要是访问了<code>state</code>的函数，都应该用<code>useCallback</code>来保证 state 变化时生成一个新函数</li></ul><blockquote><p>明确或潜在依赖 state 的函数，都需要指明依赖，以便在 re-render 时重新生成正确依赖的函数</p></blockquote><h2 id="切换素材时-form-item-下发的-value-不更新-故改为手动传" tabindex="-1"><a class="header-anchor" href="#切换素材时-form-item-下发的-value-不更新-故改为手动传" aria-hidden="true">#</a> 切换素材时，Form.item 下发的 value 不更新，故改为手动传</h2><h2 id="react-props-默认值使用非基础类型-引起不必要更新" tabindex="-1"><a class="header-anchor" href="#react-props-默认值使用非基础类型-引起不必要更新" aria-hidden="true">#</a> react props 默认值使用非基础类型 引起不必要更新</h2><p>因此使用 ES 默认值时，如果是非基础属性，建议放一个常量在外面：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token constant">EMPTY_ITEMS</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">Foo</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> items <span class="token operator">=</span> <span class="token constant">EMPTY_ITEMS</span> <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token operator">&lt;</span>Bar dataSource<span class="token operator">=</span><span class="token punctuation">{</span>items<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>https://www.zhihu.com/question/403260687/answer/1306841252</p>',31),Es={href:"https://gist.github.com/otakustay/9b59153da2e124f0637732fef5c71c6a",target:"_blank",rel:"noopener noreferrer"},Ps=r("React hook to control table selection"),Is={href:"https://zhuanlan.zhihu.com/p/55546844",target:"_blank",rel:"noopener noreferrer"},Ts=r("React 模式（中文版） - 知乎"),Ms=o('<h2 id="failed-to-execute-clone-on-response-umi" tabindex="-1"><a class="header-anchor" href="#failed-to-execute-clone-on-response-umi" aria-hidden="true">#</a> Failed to execute &#39;clone&#39; on &#39;Response&#39; umi</h2><p>要读取 resonse 里内容， clone 一份再处理</p><h2 id="antd-layout" tabindex="-1"><a class="header-anchor" href="#antd-layout" aria-hidden="true">#</a> antd layout</h2><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>layouts/SecurityLayout  是否登录\n  component: &#39;../layouts/BasicLayout&#39;, 权限\n  authority: [&#39;admin&#39;, &#39;user&#39;],\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="menu" tabindex="-1"><a class="header-anchor" href="#menu" aria-hidden="true">#</a> menu</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> menuList <span class="token operator">=</span> <span class="token punctuation">[</span>\n  <span class="token punctuation">{</span>\n    path<span class="token operator">:</span> <span class="token string">&#39;/design/personal&#39;</span><span class="token punctuation">,</span>\n    name<span class="token operator">:</span> <span class="token string">&#39;个人中心&#39;</span><span class="token punctuation">,</span>\n    key<span class="token operator">:</span> <span class="token string">&#39;personal&#39;</span><span class="token punctuation">,</span>\n    icon<span class="token operator">:</span> <span class="token operator">&lt;</span>IconFont type<span class="token operator">=</span><span class="token string">&quot;icon-mine&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    path<span class="token operator">:</span> <span class="token string">&#39;/design/audit&#39;</span><span class="token punctuation">,</span>\n    name<span class="token operator">:</span> <span class="token string">&#39;审核中心&#39;</span><span class="token punctuation">,</span>\n    key<span class="token operator">:</span> <span class="token string">&#39;audit&#39;</span><span class="token punctuation">,</span>\n    icon<span class="token operator">:</span> <span class="token operator">&lt;</span>IconFont type<span class="token operator">=</span><span class="token string">&quot;icon-mine&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">]</span>\n<span class="token keyword">const</span> <span class="token function-variable function">RenderMenuItem</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> data <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> path<span class="token punctuation">,</span> key<span class="token punctuation">,</span> icon <span class="token punctuation">}</span> <span class="token operator">=</span> data\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token operator">&lt;</span>Menu<span class="token punctuation">.</span>Item key<span class="token operator">=</span><span class="token punctuation">{</span>key<span class="token punctuation">}</span> icon<span class="token operator">=</span><span class="token punctuation">{</span>icon<span class="token punctuation">}</span><span class="token operator">&gt;</span>\n      <span class="token operator">&lt;</span>Link to<span class="token operator">=</span><span class="token punctuation">{</span>path<span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>Link<span class="token operator">&gt;</span>\n    <span class="token operator">&lt;</span><span class="token operator">/</span>Menu<span class="token punctuation">.</span>Item<span class="token operator">&gt;</span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token punctuation">{</span>\n  menuList<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token operator">&lt;</span>RenderMenuItem data<span class="token operator">=</span><span class="token punctuation">{</span>item<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><h2 id="usemodel-持久化-浅拷贝数据里如果有对象-对象经修改-会保持" tabindex="-1"><a class="header-anchor" href="#usemodel-持久化-浅拷贝数据里如果有对象-对象经修改-会保持" aria-hidden="true">#</a> useModel 持久化，浅拷贝数据里如果有对象 对象经修改，会保持</h2><p>解决，深拷贝后，再修改</p><h2 id="异步权限" tabindex="-1"><a class="header-anchor" href="#异步权限" aria-hidden="true">#</a> 异步权限</h2><ol><li>request loading</li><li>setAuthority 更新 localStorage</li><li>reloadAuthority</li></ol><h2 id="关闭菜单国际化" tabindex="-1"><a class="header-anchor" href="#关闭菜单国际化" aria-hidden="true">#</a> 关闭菜单国际化</h2><p>defaultSettings</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>  menu<span class="token operator">:</span> <span class="token punctuation">{</span>\n    locale<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="对象意外修改" tabindex="-1"><a class="header-anchor" href="#对象意外修改" aria-hidden="true">#</a> 对象意外修改</h2><p>pageNum 与需要响应更新列表数据的值分离</p>',15),Ds={id:"总结自己使用过的-hooks-数据流方式-掘金",tabindex:"-1"},Fs=s("a",{class:"header-anchor",href:"#总结自己使用过的-hooks-数据流方式-掘金","aria-hidden":"true"},"#",-1),Ls=r(),zs={href:"https://juejin.im/post/5e9148f76fb9a03c8966daf8",target:"_blank",rel:"noopener noreferrer"},Hs=r("总结自己使用过的 Hooks 数据流方式 - 掘金"),Us={href:"https://github.com/jamiebuilds/unstated-next",target:"_blank",rel:"noopener noreferrer"},As=r("jamiebuilds/unstated-next: 200 bytes to never think about React state management libraries ever again"),Os=o('<h2 id="css-module-局部作用域" tabindex="-1"><a class="header-anchor" href="#css-module-局部作用域" aria-hidden="true">#</a> CSS module 局部作用域</h2><p>局部样式与覆盖 global</p><p>书写上与一般 CSS 无异</p><p>导入使用时有差异</p><p>global 即是用来声明传统的 class，方便混用。首先少写全局样式，其次使用时应该包裹起来</p><div class="language-less ext-less line-numbers-mode"><pre class="language-less"><code><span class="token selector">.override-ant-btn</span> <span class="token punctuation">{</span>\n  <span class="token selector">:global(.ant-btn)</span> <span class="token punctuation">{</span>\n    <span class="token property">border-radius</span><span class="token punctuation">:</span> 16px<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>',6),Ns={href:"https://antd-course.ulivz.com/customized_styles.html#%25E5%25AE%259A%25E4%25B9%2589%25E6%25A0%25B7%25E5%25BC%258F",target:"_blank",rel:"noopener noreferrer"},Ws=r("自定义样式 | Ant Design 实战教程"),Js=o('<h2 id="权限控制" tabindex="-1"><a class="header-anchor" href="#权限控制" aria-hidden="true">#</a> 权限控制</h2><p>对于权限控制，首先需要明白一点：“权限的真正控制都必须是在服务端负责的”。</p><h2 id="模块模式" tabindex="-1"><a class="header-anchor" href="#模块模式" aria-hidden="true">#</a> 模块模式</h2><p>定义工具函数时，可以把需要的私有变量包起来，不污染 utils 等文件</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 除了 double 外界无法访问 a</span>\n<span class="token keyword">function</span> <span class="token function">double</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">2</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">realFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> x <span class="token operator">*</span> a\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="记忆-memo" tabindex="-1"><a class="header-anchor" href="#记忆-memo" aria-hidden="true">#</a> 记忆 memo</h2><ul><li>用数组或对象，将历史计算结果存储</li><li>实现方式，闭包。模式提炼</li></ul><h2 id="file-type-不可靠" tabindex="-1"><a class="header-anchor" href="#file-type-不可靠" aria-hidden="true">#</a> file.type 不可靠</h2><p>有的文件类型，如 psd、rar，<code>file.type</code>值是<code>&quot;&quot;</code> 直接拿<code>file.name</code>扩展名判断比较好</p><h2 id="动态样式" tabindex="-1"><a class="header-anchor" href="#动态样式" aria-hidden="true">#</a> 动态样式</h2><p>如<code>width</code>数值，用<code>style=</code>就可以</p>',11),Vs={href:"https://github.com/ant-design/ant-design/issues/1418",target:"_blank",rel:"noopener noreferrer"},Bs=r("RangePicker『此刻』建议配置成可选时间范围。 · Issue #1418 · ant-design/ant-design"),Gs={href:"https://www.cnblogs.com/liuyanxia/p/9099947.html",target:"_blank",rel:"noopener noreferrer"},Ys=r("解决——CSS :before、:after ，当 content 使用中文时有时候会出现乱码 - SophiaLiu - 博客园"),Qs=s("h2",{id:"undefined-未赋值-null-值为空",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#undefined-未赋值-null-值为空","aria-hidden":"true"},"#"),r(" undefined 未赋值 null 值为空")],-1),Ks={href:"https://github.com/ant-design/ant-design/issues/2367",target:"_blank",rel:"noopener noreferrer"},Zs=r("Select 控件为什么会把 null 当做有 value 而不显示 placeholder ，必须要为 undefined 才可以？ · Issue #2367 · ant-design/ant-design"),Xs=s("h2",{id:"less-alpha",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#less-alpha","aria-hidden":"true"},"#"),r(" less alpha")],-1),$s=s("p",null,"fade",-1),at=s("h2",{id:"antd-日期选择-预设日期",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#antd-日期选择-预设日期","aria-hidden":"true"},"#"),r(" antd 日期选择 预设日期")],-1),nt={href:"https://bz0iy.csb.app/",target:"_blank",rel:"noopener noreferrer"},et=r("Sandbox - CodeSandbox"),st=o('<ul><li>footer 反转</li><li>不需要标题栏、关闭<div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>ant-picker-panel-container\ndisplay: flex;\nflex-direction: column-reverse;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li></ul><h2 id="特殊选中需求" tabindex="-1"><a class="header-anchor" href="#特殊选中需求" aria-hidden="true">#</a> 特殊选中需求</h2><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>    .ant-menu-item:not(.ant-menu-item-selected) {\n      a[href^=&#39;/design/audit&#39;] .anticon {\n        color: #00BE7B;\n      }\n    }\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="使用-传递对象-修改时-注意提前-clone-不要影响原对象" tabindex="-1"><a class="header-anchor" href="#使用-传递对象-修改时-注意提前-clone-不要影响原对象" aria-hidden="true">#</a> 使用 传递对象，修改时，注意提前 clone，不要影响原对象</h2><p>留意外部传入的 object，然后<code>.</code>语法访问，意外修改了引用</p><p>lodash cloneDeep</p><h2 id="审核自动切换" tabindex="-1"><a class="header-anchor" href="#审核自动切换" aria-hidden="true">#</a> 审核自动切换</h2><ul><li>移除项</li><li>不要后台拉取数据，会扰乱 index，使用 filter</li><li>filter 不会改变顺序</li><li>使用 filter，切换下一项，不需要移动 index，如果当前 index 无值，即到尾部</li></ul><h2 id="css-hover-不适用内容有间距场景" tabindex="-1"><a class="header-anchor" href="#css-hover-不适用内容有间距场景" aria-hidden="true">#</a> css hover 不适用内容有间距场景</h2><h2 id="antd-日期组件返回的时间是当时时间" tabindex="-1"><a class="header-anchor" href="#antd-日期组件返回的时间是当时时间" aria-hidden="true">#</a> antd 日期组件返回的时间是当时时间</h2><p>实际需求，应该是 start 0.00 end 23.59</p><h2 id="replace-designlayout-with-prolayout" tabindex="-1"><a class="header-anchor" href="#replace-designlayout-with-prolayout" aria-hidden="true">#</a> replace DesignLayout with ProLayout</h2><p>1ffb95756ab39c9538affd24c09d7cfe278127a3</p><h2 id="权限处理" tabindex="-1"><a class="header-anchor" href="#权限处理" aria-hidden="true">#</a> 权限处理</h2><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>setUser(data)\nStorage.setItem(&#39;user&#39;, data);\nreloadAuthorized()\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="ts-demo" tabindex="-1"><a class="header-anchor" href="#ts-demo" aria-hidden="true">#</a> ts demo</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>type SuperUlMode <span class="token operator">=</span> <span class="token string">&#39;horizontal&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;vertial&#39;</span><span class="token punctuation">;</span>\ntype SelctCallBackParams <span class="token operator">=</span> <span class="token punctuation">{</span> index<span class="token operator">:</span> number <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> name<span class="token operator">:</span> string <span class="token operator">|</span> <span class="token keyword">undefined</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\ntype <span class="token function-variable function">SelectCallBack</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>index<span class="token punctuation">,</span> name<span class="token punctuation">}</span><span class="token operator">:</span> SelctCallBackParams</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span>\n\n<span class="token keyword">interface</span> <span class="token class-name">SuperUlProps</span> <span class="token punctuation">{</span>\n  defaultIndex<span class="token operator">?</span><span class="token operator">:</span> number<span class="token punctuation">,</span>\n  mode<span class="token operator">?</span><span class="token operator">:</span> SuperUlMode<span class="token punctuation">,</span>\n  style<span class="token operator">?</span><span class="token operator">:</span> React<span class="token punctuation">.</span>CSSProperties<span class="token punctuation">,</span>\n  onSelect<span class="token operator">?</span><span class="token operator">:</span> SelectCallBack\n<span class="token punctuation">}</span>\n\n<span class="token keyword">interface</span> <span class="token class-name">ISuperUlContext</span> <span class="token punctuation">{</span>\n  index<span class="token operator">:</span> number<span class="token punctuation">,</span>\n  onSelect<span class="token operator">?</span><span class="token operator">:</span> SelectCallBack<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>node_modules/antd/es/</p><h2 id="percent-事件频繁导致-多个组件过度-render" tabindex="-1"><a class="header-anchor" href="#percent-事件频繁导致-多个组件过度-render" aria-hidden="true">#</a> percent 事件频繁导致 多个组件过度 render</h2><p>分析： percent 事件 3-7 次/s emit 给父组件 fileList，变化导致所有依赖 fileList 的组件 render。但外部并不关心这个事件</p><p>解决： 内部维护一份 fileList，仅非 percent 事件时，向外 emit 变化</p><h2 id="跨代数据共享" tabindex="-1"><a class="header-anchor" href="#跨代数据共享" aria-hidden="true">#</a> 跨代数据共享</h2><ul><li>依赖反转、组件合成</li><li>动态数据传递，要格外注意显式声明依赖</li></ul>',23),tt={id:"我是如何无缝的扩展-antd-组件-知乎",tabindex:"-1"},lt=s("a",{class:"header-anchor",href:"#我是如何无缝的扩展-antd-组件-知乎","aria-hidden":"true"},"#",-1),rt=r(),ot={href:"https://zhuanlan.zhihu.com/p/111850451",target:"_blank",rel:"noopener noreferrer"},pt=r("我是如何无缝的扩展 antd 组件 - 知乎"),it=s("ul",null,[s("li",null,"扩展组件、但保持旧的引用"),s("li",null,"编辑器能识别吗")],-1),ct=s("h2",{id:"ant-design-repo",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#ant-design-repo","aria-hidden":"true"},"#"),r(" ant design repo")],-1),ut=s("p",null,"install use node 8 start use node 14",-1),dt=s("h2",{id:"高阶组件",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#高阶组件","aria-hidden":"true"},"#"),r(" 高阶组件")],-1),ht={href:"https://gist.github.com/sebmarkbage/ef0bf1f338a7182b6775",target:"_blank",rel:"noopener noreferrer"},mt=r("Higher-order Components"),bt={href:"https://medium.com/@dan_abramov/mixins-are-dead-long-live-higher-order-components-94a0d2f9e750#.eeu8q01s1",target:"_blank",rel:"noopener noreferrer"},kt=r("Mixins Are Dead. Long Live Composition | by Dan Abramov | Medium"),ft=s("blockquote",null,[s("p",null,"A higher-order component is just a function that takes an existing component and returns another component that wraps it.")],-1),gt=s("h2",{id:"antd-强烈风格-不适合较大定制",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#antd-强烈风格-不适合较大定制","aria-hidden":"true"},"#"),r(" Antd 强烈风格，不适合较大定制")],-1),vt=r("推荐主色定制 "),xt={href:"https://github.com/ant-design/ant-design/issues/1241",target:"_blank",rel:"noopener noreferrer"},yt=r("有关主题设计的建议 · Issue #1241 · ant-design/ant-design"),_t=r(" 样式覆盖、非常麻烦"),wt=s("p",null,"最常用的通用变量",-1),jt=r("读 "),St={href:"https://ant.design/docs/react/faq-cn",target:"_blank",rel:"noopener noreferrer"},Rt=r("FAQ - Ant Design"),qt=o('<h2 id="线上-设计素材浏览有个-bug-切换二级菜单时-列表数据某些场景会互相影响" tabindex="-1"><a class="header-anchor" href="#线上-设计素材浏览有个-bug-切换二级菜单时-列表数据某些场景会互相影响" aria-hidden="true">#</a> 线上 设计素材浏览有个 bug，切换二级菜单时，列表数据某些场景会互相影响</h2><p>bug 原因，</p><ol><li>URL 参数变化，组件仅 update，需要重置 state</li><li>菜单切换，会触发 infiniteLoading，超出最大页数判断有问题</li></ol><h2 id="图标替换" tabindex="-1"><a class="header-anchor" href="#图标替换" aria-hidden="true">#</a> 图标替换</h2><ol><li>需要 JS 操作</li><li>fork 图标库，单独维护 以 anticon-down 为例，搜索 down，替换 svg，build</li></ol><p>生成文件 node_modules/@ant-design/icons-svg/lib/asn/DownOutlined.js</p><p>ant-design-icons/packages/icons-svg/docs/ContributionGuide.zh-CN.md</p><h2 id="require-文件不存在" tabindex="-1"><a class="header-anchor" href="#require-文件不存在" aria-hidden="true">#</a> require 文件不存在</h2>',8),Ct={href:"https://stackoverflow.com/questions/55213560/javascript-check-if-file-exists-if-not-then",target:"_blank",rel:"noopener noreferrer"},Et=r("reactjs - JavaScript Check if File exists, if not then - Stack Overflow"),Pt=r(" ─"),It=o('<p>使用 import，报错 Unhandled Rejection (Error): Cannot find module &#39;./sketch.svg&#39; webpack:/src/assets/project lazy ^./.*.svg$ namespace object:45</p><h2 id="react-如何点击页面空白处关闭弹窗" tabindex="-1"><a class="header-anchor" href="#react-如何点击页面空白处关闭弹窗" aria-hidden="true">#</a> React 如何点击页面空白处关闭弹窗</h2><ol><li>给 body 绑定事件 关闭</li><li>给弹窗等元素绑定点击事件 <code>onClick={e =&gt; e.stopPropagation()}</code></li></ol><h2 id="umi-env-页面内不要解构-process-env" tabindex="-1"><a class="header-anchor" href="#umi-env-页面内不要解构-process-env" aria-hidden="true">#</a> umi env 页面内不要解构 p<wbr>rocess.env</h2><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>const { NODE_ENV, SERVER_ENV } = p<wbr>rocess.env;\n\nconsole.error(p<wbr>rocess.env.SERVER_ENV, SERVER_ENV) // test undefined\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>node config/config.ts 可以完整读取 p<wbr>rocess.env，而 global.tsx 明显是页面层面，读到的是 define 植入，不是真实的 object，不一定能解构出来。所以最好不要用解构语法。</p><h2 id="form-field-避免下标访问-不利于扩展" tabindex="-1"><a class="header-anchor" href="#form-field-避免下标访问-不利于扩展" aria-hidden="true">#</a> form field 避免下标访问，不利于扩展</h2><p>可以用 find name 方式</p><h2 id="公共组件样式" tabindex="-1"><a class="header-anchor" href="#公共组件样式" aria-hidden="true">#</a> 公共组件样式</h2><p>避免传值写死，不利于响应式</p><h2 id="husky" tabindex="-1"><a class="header-anchor" href="#husky" aria-hidden="true">#</a> husky</h2><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">npm</span> i -D husky lint-staged prettier\nnpx mrm lint-staged\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>antd 项目已默认配置</p><h2 id="antd-range-picker-blur-hide-如何实现" tabindex="-1"><a class="header-anchor" href="#antd-range-picker-blur-hide-如何实现" aria-hidden="true">#</a> antd range-picker blur hide 如何实现</h2><p>基于已有组件定制，可以单独使用</p><p>失焦如何同时支持 input 和 div</p>',16),Tt=r("time-picker date-picker "),Mt={href:"https://www.npmjs.com/package/rc-picker",target:"_blank",rel:"noopener noreferrer"},Dt=r("rc-picker - npm"),Ft=r(" rc-picker/src/RangePicker.tsx triggerInnerOpen rc-trigger/src/index.tsx class -hidden {trigger} onBlur input {portal} onMouseLeave div 必 delay onMouseEnter 先清除定时器"),Lt=o('<h2 id="stylelint-异常输出" tabindex="-1"><a class="header-anchor" href="#stylelint-异常输出" aria-hidden="true">#</a> stylelint 异常输出</h2><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>单独运行 npm run stylelint 提示未安装\n检查 node_modules/.bin 确实没装\n可能是 eslint 全局安装，带来的问题？避免全局安装，因为不同项目依赖可能不一样，再加上 ts 等规则依赖，会很麻烦\nnpm install --no-save stylelint\n\nnpx stylelint --help\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="umi-request-requesttype-生效条件" tabindex="-1"><a class="header-anchor" href="#umi-request-requesttype-生效条件" aria-hidden="true">#</a> umi-request requestType 生效条件</h2><p>&#39;requestType&#39; when the type of data is object or array.</p><h2 id="createportal-左右切换时-生成多余-div" tabindex="-1"><a class="header-anchor" href="#createportal-左右切换时-生成多余-div" aria-hidden="true">#</a> createPortal，左右切换时，生成多余 div</h2><p>避免创建新的 div？不行</p><p>只能是创建时，先把旧的删掉</p><h2 id="todo-material-lib" tabindex="-1"><a class="header-anchor" href="#todo-material-lib" aria-hidden="true">#</a> todo material-lib</h2><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>.ant-menu-item:active, .ant-menu-submenu-title:active {\n    /* background: aliceblue; */\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>',9),zt={id:"react-hooks-四-immutable-知乎",tabindex:"-1"},Ht=s("a",{class:"header-anchor",href:"#react-hooks-四-immutable-知乎","aria-hidden":"true"},"#",-1),Ut=r(),At={href:"https://zhuanlan.zhihu.com/p/163590288",target:"_blank",rel:"noopener noreferrer"},Ot=r("React Hooks(四): immutable - 知乎"),Nt=s("p",null,"更新有两个阶段：1. render: compute diff 2. commit diff to real dom",-1),Wt=r("存在问题的是 1，执行计算开销 "),Jt={href:"https://codesandbox.io/s/child-overload-render-p5p6t",target:"_blank",rel:"noopener noreferrer"},Vt=r("child overload render - CodeSandbox"),Bt=o("<p>期望：</p><ul><li>值变化，引用变化</li><li>值不变，引用不变 问题：</li><li>!!!机制：父组件重渲染会递归重渲染所有子组件，即使子组件依赖的 props 没有变化</li><li>性能：可避免的重渲染，有的子组件渲染开销很大</li><li>行为：无用的副作用重执行，无限循环</li><li>需要重请求保持数据最新场景，而重渲染开销大，返回数据每次创建新对象</li><li>parse 会创建新对象</li><li>对子组件来说，依赖的父组件应避免意外变化</li><li>引用相等，值发生了变化，UI 不更新</li><li>深拷贝问题，包含对象值不变，引用变了，</li></ul><p>结论：</p>",3),Gt=s("p",null,"React.memo 包裹组件， 适用 prop 仅原始类型，复杂类型，可以指定比较函数，只适用函数组件",-1),Yt={href:"https://dmitripavlutin.com/use-react-memo-wisely/",target:"_blank",rel:"noopener noreferrer"},Qt=r("Use React.memo() wisely"),Kt=s("p",null,"使用 immer",-1),Zt={href:"https://zhuanlan.zhihu.com/p/34691516",target:"_blank",rel:"noopener noreferrer"},Xt=r("精读《Immer.js》源码 - 知乎"),$t=s("li",null,[s("p",null,"record 和 tuple，JS 引入不可变数据结构 未来")],-1),al=s("li",null,[s("p",null,"useRef 适用于父组件内要定义包含常量的对象")],-1),nl=s("li",null,[s("p",null,"避免在 render 中创建对象，或者使用 useMemo 只能是无副作用的高计算开销操作，指定依赖项，仅依赖更新时重新计算")],-1),el=s("li",null,[s("p",null,"hook state 要求不可变，深层嵌套如果配合 ES6，spread hell")],-1),sl=s("p",null,"根源：对象的值比较和引用比较的不一致性 值比较计算开销大",-1),tl=r("很全的文章，不仅是介绍 record tuples "),ll={href:"https://dev.to/sebastienlorber/records-tuples-for-react-way-more-than-immutability-2iic",target:"_blank",rel:"noopener noreferrer"},rl=r("Records & Tuples for React, way more than immutability"),ol=s("p",null,"官方性能优化指南：",-1),pl=s("li",null,[s("p",null,"把存在依赖项的函数，移到 useEffect 内")],-1),il=s("li",null,[s("p",null,"不需要考虑函数重复创建的开销，除非是确定开销比较大的函数")],-1),cl=s("p",null,[r("setState 传入函数更新 state，如果返回值不变，render 会跳过更新 搜"),s("code",null,"setRows")],-1),ul={href:"https://codepen.io/cyio/pen/WNwpGJW?editors=1010",target:"_blank",rel:"noopener noreferrer"},dl=r("useState: lazy initial state"),hl={href:"https://reactjs.org/docs/hooks-faq.html#how-can-i-measure-a-dom-node",target:"_blank",rel:"noopener noreferrer"},ml=r("Hooks FAQ – React"),bl=s("h2",{id:"caches-操作要求-https",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#caches-操作要求-https","aria-hidden":"true"},"#"),r(" caches 操作要求 https")],-1),kl=s("p",null,"if (window.caches && window.caches.keys) {",-1),fl=s("p",null,"SecurityError: Failed to execute 'keys' on 'CacheStorage': Only secure origins are allowed (see: https://goo.gl/Y0ZkNV).",-1),gl={href:"https://developer.mozilla.org/en-US/docs/Web/API/CacheStorage",target:"_blank",rel:"noopener noreferrer"},vl=r("CacheStorage - Web APIs | MDN"),xl=r("安全源定义 "),yl={href:"https://www.chromium.org/Home/chromium-security/prefer-secure-origins-for-powerful-new-features",target:"_blank",rel:"noopener noreferrer"},_l=r("Prefer Secure Origins For Powerful New Features - The Chromium Projects"),wl=s("h2",{id:"请求优化-token-是否存在或在有效期内",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#请求优化-token-是否存在或在有效期内","aria-hidden":"true"},"#"),r(" 请求优化，token 是否存在或在有效期内")],-1),jl={href:"https://www.cnblogs.com/qkstart/p/11856168.html",target:"_blank",rel:"noopener noreferrer"},Sl=r("React-umi-request 动态刷新 Token 功能实现及 node.js 代码逻辑 - qkstart - 博客园"),Rl=s("h2",{id:"static-proptypes",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#static-proptypes","aria-hidden":"true"},"#"),r(" static propTypes")],-1),ql=r("适用没有 typescript 时，老代码用得多 "),Cl={href:"https://stackoverflow.com/questions/40514574/react-why-static-proptypes",target:"_blank",rel:"noopener noreferrer"},El=r("reactjs - react: why static propTypes - Stack Overflow"),Pl=s("h2",{id:"何时单独用-xhr",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#何时单独用-xhr","aria-hidden":"true"},"#"),r(" 何时单独用 xhr")],-1),Il=s("p",null,"跨域？不带 cookie？",-1),Tl=s("h2",{id:"immerjs-优于使用-lodash-创建拷贝",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#immerjs-优于使用-lodash-创建拷贝","aria-hidden":"true"},"#"),r(" ImmerJS 优于使用 lodash 创建拷贝")],-1),Ml=r("无需遍历，借用 proxy，仅针对变化的对象属性进行深拷贝 "),Dl={href:"https://dev.to/sebastienlorber/insight-3-use-immerjs-over-lodash-set-immutablejs-or-plain-js-36bl",target:"_blank",rel:"noopener noreferrer"},Fl=r("Insight #3 - Use ImmerJS over lodash/set, ImmutableJS or plain JS - DEV"),Ll={href:"https://redux-toolkit.js.org/introduction/quick-start",target:"_blank",rel:"noopener noreferrer"},zl=r("官方类似 dva 解决方案 Quick Start | Redux Toolkit"),Hl=s("h2",{id:"竞速-race",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#竞速-race","aria-hidden":"true"},"#"),r(" 竞速 race")],-1),Ul=s("li",null,"useRef 判断",-1),Al=s("li",null,"取消请求",-1),Ol=s("li",null,"saga takeLatest",-1),Nl=r("建议硬编码增加请求延时，更容易复现和发现问题 "),Wl={href:"https://dev.to/sebastienlorber/handling-api-request-race-conditions-in-react-4j5b",target:"_blank",rel:"noopener noreferrer"},Jl=r("Handling API request race conditions in React - DEV"),Vl={href:"https://github.com/slorber/react-async-hook",target:"_blank",rel:"noopener noreferrer"},Bl=r("slorber/react-async-hook: React hook to handle any async operation in React components"),Gl=r("makeCancelable 为 promise 添加伪取消功能 "),Yl={href:"https://reactjs.org/blog/2015/12/16/ismounted-antipattern.html",target:"_blank",rel:"noopener noreferrer"},Ql=r("isMounted is an Antipattern – React Blog"),Kl=s("h2",{id:"upload-drag-扩大区域",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#upload-drag-扩大区域","aria-hidden":"true"},"#"),r(" upload drag 扩大区域")],-1),Zl=s("li",null,[s("code",null,":focue outline"),r("浏览器原生样式，列表界面点击时出现 focus 样式并不合适")],-1),Xl=r("非文件也能 drag "),$l={href:"https://medium.com/@ralzohairi/how-to-drag-drop-html-elements-and-files-using-javascript-d31d15279369",target:"_blank",rel:"noopener noreferrer"},ar=r("How to Drag & Drop HTML Elements and Files using Javascript | by Reema | Medium"),nr={href:"https://codepen.io/tech_query/pen/MqGgap?editors=1000",target:"_blank",rel:"noopener noreferrer"},er=r("DataTransfer test"),sr=o('<h2 id="定位代码最快方式" tabindex="-1"><a class="header-anchor" href="#定位代码最快方式" aria-hidden="true">#</a> 定位代码最快方式</h2><ol><li>react dev tools 组件名称</li><li>css 类</li></ol><p>数据流，从上到下传递，嵌套可能很深，找数据定义从上往下找</p><h2 id="开发阶段-eslint-影响初期效率" tabindex="-1"><a class="header-anchor" href="#开发阶段-eslint-影响初期效率" aria-hidden="true">#</a> 开发阶段 eslint 影响初期效率</h2><ul><li>开发新功能初期，可能有很多临时代码</li><li>可以对新文件，添加 eslint 忽略标记。后期再放开</li></ul><h2 id="临时禁用-lint" tabindex="-1"><a class="header-anchor" href="#临时禁用-lint" aria-hidden="true">#</a> 临时禁用 lint</h2><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>// @ts-nocheck\n/* eslint-disable */\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="空数组约定" tabindex="-1"><a class="header-anchor" href="#空数组约定" aria-hidden="true">#</a> 空数组约定</h2><p>2.【强制】前后端数据列表相关的接口返回，如果为空，则返回空数组[]或空集合{}。说明：此条约定有利于数据层面上的协作更加高效，减少前端很多琐碎的 null 判断。</p><p>alibaba Java开发手册（嵩山版）.pdf</p><h2 id="map-key" tabindex="-1"><a class="header-anchor" href="#map-key" aria-hidden="true">#</a> map key</h2><p>要求：稳定，列表内惟一</p><p>稳定是说一个页面操作内，保持稳定</p><p>不指定 key 时，默认使用 index，index 存在不稳定</p><p>内容 hash 不行，不惟一</p><p>所以，只要提前生成一个惟一值就行。可以基于一个常量，累加生成 <code>key={genUniqKey()}</code></p><h2 id="hmr-fast-refresh" tabindex="-1"><a class="header-anchor" href="#hmr-fast-refresh" aria-hidden="true">#</a> HMR =&gt; Fast Refresh</h2>',17),tr={href:"https://medium.com/javascript-in-plain-english/what-is-react-fast-refresh-f3d1e8401333",target:"_blank",rel:"noopener noreferrer"},lr=r("What is React Fast Refresh?. This library is going to change your… | by Mallik Cheripally | JavaScript In Plain English | Medium"),rr=o('<p>存在问题：</p><ul><li>有时变更后，刷新很慢</li><li>出现错误后，需要手动刷新</li></ul><h2 id="dan-note" tabindex="-1"><a class="header-anchor" href="#dan-note" aria-hidden="true">#</a> dan note</h2><p>react 中 props state 是不可变的（至少强烈建议如此）</p><p>避免闭包的原因是很难思考一个值可以随着时间被改变</p><p>Function components capture the rendered values.</p><p>函数组件保持了触发请求时的 prop。可变 this 模拟 ref.current 而 class 会由于在请求中，重渲染，this 变化，读取最新的 prop。React 会改变 this</p><p>In all cases I’ve seen so far, the “stale closures” problems happen due to a mistaken assumption that “functions don’t change” or that “props are always the same”. This is not the case, as I hope this post has helped to clarify.</p>',8),or=r("实际是因为闭包？ "),pr={href:"https://overreacted.io/how-are-function-components-different-from-classes/",target:"_blank",rel:"noopener noreferrer"},ir=r("How Are Function Components Different from Classes? — Overreacted"),cr=r("Dan 介绍 hooks 提案，演示 class 与 hook 对比 context custom hook "),ur={href:"https://www.youtube.com/watch?v=dpw9EHDh2bM",target:"_blank",rel:"noopener noreferrer"},dr=r("React Today and Tomorrow and 90% Cleaner React With Hooks - YouTube"),hr=s("h2",{id:"constructor-里发请求",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#constructor-里发请求","aria-hidden":"true"},"#"),r(" constructor 里发请求？")],-1),mr=s("ol",null,[s("li",null,"应该设置初始 state，给用户替代状态，如 loading"),s("li",null,"constructor 不能 async"),s("li",null,"componentWillMount 废弃，开发者可能漏掉设置初始 state，以为 render 会等待，实际请求中会执行一次"),s("li",null,"最佳实践，componentDidMount + isLoading，设置 isLoading 为 true 时，实际组件不会渲染")],-1),br={href:"https://daveceddia.com/where-fetch-data-componentwillmount-vs-componentdidmount/",target:"_blank",rel:"noopener noreferrer"},kr=r("Where to Fetch Data: componentWillMount vs componentDidMount"),fr={href:"https://stackoverflow.com/questions/55182526/fetching-data-in-constructor",target:"_blank",rel:"noopener noreferrer"},gr=r("javascript - Fetching data in constructor - Stack Overflow"),vr={href:"https://zh-hans.reactjs.org/docs/faq-ajax.html",target:"_blank",rel:"noopener noreferrer"},xr=r("AJAX and APIs – React"),yr=s("h2",{id:"自定义-tag",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#自定义-tag","aria-hidden":"true"},"#"),r(" 自定义 Tag")],-1),_r=s("p",null,"字符模板 + 大写 + keyof",-1),wr={href:"https://stackoverflow.com/questions/33471880/dynamic-tag-name-in-jsx-and-react",target:"_blank",rel:"noopener noreferrer"},jr=r("reactjs - Dynamic tag name in jsx and React - Stack Overflow"),Sr=s("h2",{id:"jsx-map-join-reduce",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#jsx-map-join-reduce","aria-hidden":"true"},"#"),r(" jsx map join => reduce")],-1),Rr={href:"https://stackoverflow.com/questions/34034038/how-to-render-react-components-by-using-map-and-join",target:"_blank",rel:"noopener noreferrer"},qr=r("reactjs - how to render react components by using map and join - Stack Overflow"),Cr=o('<h2 id="pages-重复渲染-尤其-audio-有动画明显" tabindex="-1"><a class="header-anchor" href="#pages-重复渲染-尤其-audio-有动画明显" aria-hidden="true">#</a> pages 重复渲染，尤其 audio 有动画明显</h2><p>14 MediaPiece.tsx:7 mediapiece render</p><p>areEqual 从第二次渲染开始，意味着不能有卸载，父级哪层导致了卸载，拆出去的代码是否需要包括 map，需要，因为要检查数据入口，自上而下，分层控制</p><p>如果整个列表都卸载了，key 无意义</p><p>一层 map，使用 memo，仅修改项会 re-render</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>key={genUniqKey()}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>两层 map key item 写混，误以为 uniq key 生成有问题</p><p>lodash uniqueId 生成位数个位数时，容易冲突</p><p>检测父组件是否发生了卸载，也可以在 react dev tools 选中组件，如果组件卸载，选中会往父级跳</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;child unmounted&#39;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>组件定义嵌套时，memo 失效？</p>',11),Er={href:"https://codesandbox.io/s/reactmemo-oi15s?file=/src/App.js",target:"_blank",rel:"noopener noreferrer"},Pr=r("React.memo - CodeSandbox"),Ir=o('<p>总结：</p><ul><li>state 更新，组件并不会卸载，除非删除？</li><li>memo 不能写到组件内 React Top-Level API，这个 level 实指 top level scope，官方文档译的顶层、不好理解</li><li>memo 包裹的组件如果使用了 children props，会不 work</li><li>key 里不要直接写函数，否则界面更新会执行</li></ul><p>React 函数组件优化只做了两点：</p><ol><li>state 浅比较，相等则不重渲染。所以不比较 prop？</li><li>DOM 树只重渲染变化部分</li></ol><h2 id="effect-相关函数处理" tabindex="-1"><a class="header-anchor" href="#effect-相关函数处理" aria-hidden="true">#</a> effect 相关函数处理：</h2><p>是否要把函数放入 effect 依赖数组，尽量避免</p><ol><li>提升到组件外面</li><li>移到 effect 内</li><li>useCallback</li></ol>',7),Tr={href:"https://overreacted.io/a-complete-guide-to-useeffect/",target:"_blank",rel:"noopener noreferrer"},Mr=r("A Complete Guide to useEffect — Overreacted"),Dr={href:"https://zhuanlan.zhihu.com/p/93824106",target:"_blank",rel:"noopener noreferrer"},Fr=r("深入浅出 useSWR 原理 - 知乎"),Lr=o('<h2 id="modal-router" tabindex="-1"><a class="header-anchor" href="#modal-router" aria-hidden="true">#</a> modal router</h2><p>在 modal withRouter 不行， 传不到子组件</p><h2 id="鼠标进入触发-lottie" tabindex="-1"><a class="header-anchor" href="#鼠标进入触发-lottie" aria-hidden="true">#</a> 鼠标进入触发 lottie</h2><p>mouseHover 没有</p><p>mouseOver 不行</p><p>mouseEnter / mouseLeave</p><p>解决误触，debounse 不行，延迟但还是会执行，throttle 也不行，因为 enter 触发并不频繁</p><p>通用解决方案：为调用增加延时，当误触发生时取消延时，hover 够久时正常调用</p><p>子组件 render 问题，有外在表现组件容易显现出来，如动画、发请求，否则就要打 log 才能看出来</p><p>el 绑定，用自定义 id 即可。不需要实时 Dom，因此没必要用 ref</p><p>翻页集中 setState，否则可能多次渲染，原因是先设置了 index，然后又设置 data</p><h2 id="antd-table" tabindex="-1"><a class="header-anchor" href="#antd-table" aria-hidden="true">#</a> antd table</h2><ul><li>data 不需要 concat, 无限加载才需要</li><li>弹窗表格优化<div class="language-css ext-css line-numbers-mode"><pre class="language-css"><code>// 小屏\n<span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">max-height</span><span class="token punctuation">:</span> 800px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>\n  <span class="token selector">.ant-modal</span> <span class="token punctuation">{</span>\n    <span class="token property">top</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 固定高度内滚动</span>\nscroll<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> y<span class="token operator">:</span> clientHeight <span class="token operator">-</span> <span class="token number">450</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li></ul><h2 id="state-派生自-prop-组件内又修改-state" tabindex="-1"><a class="header-anchor" href="#state-派生自-prop-组件内又修改-state" aria-hidden="true">#</a> state 派生自 prop，组件内又修改 state</h2><p>数据变更源成了两个，增加了数据意外变化定位难度</p><p>是否能通过通知父组件更新数据</p><h2 id="第二层弹窗问题" tabindex="-1"><a class="header-anchor" href="#第二层弹窗问题" aria-hidden="true">#</a> 第二层弹窗问题</h2><p>用了 absolute，需要计算容器高度</p><p>将一层内容 hide，并改将二层内容用 transfrom 移动到目标位置</p><h2 id="redux-dev-tool-crash" tabindex="-1"><a class="header-anchor" href="#redux-dev-tool-crash" aria-hidden="true">#</a> redux dev tool crash</h2>',20),zr={href:"https://github.com/reduxjs/redux-devtools/issues/643#issuecomment-697398278",target:"_blank",rel:"noopener noreferrer"},Hr=r('"redux-devtools-extension" gets laggy and eventually crashes when I try to open it. · Issue #643 · reduxjs/redux-devtools'),Ur=o('<h2 id="无效组件" tabindex="-1"><a class="header-anchor" href="#无效组件" aria-hidden="true">#</a> 无效组件</h2><p>不能是 object，有的没有 props.children</p><p>暂时用 组件 map</p><p>可以打印出来，检查是否正确</p><blockquote><p>Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: object. #13445 元素类型，有两种，内置组件 string，合成组件 class/function</p></blockquote><p>组件不能是 el，需要是函数</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> CompanyIconInHeader <span class="token operator">=</span> <span class="token operator">&lt;</span>span<span class="token operator">&gt;</span>y<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span>\n\n<span class="token comment">// wrong use</span>\n<span class="token punctuation">;</span><span class="token operator">&lt;</span>CompanyIconInHeader <span class="token operator">/</span><span class="token operator">&gt;</span>\n\n<span class="token comment">// right</span>\n<span class="token keyword">const</span> <span class="token function-variable function">CompanyIconInHeader</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token operator">&lt;</span>span<span class="token operator">&gt;</span>y<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="点击文本复制" tabindex="-1"><a class="header-anchor" href="#点击文本复制" aria-hidden="true">#</a> 点击文本复制</h2><p>react wrapper 引入问题</p><p>browser api 兼容性，需要请求权限</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>import copy from &#39;copy-to-clipboard&#39;;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="半受控-props-变化-需要更新部分-state" tabindex="-1"><a class="header-anchor" href="#半受控-props-变化-需要更新部分-state" aria-hidden="true">#</a> 半受控，props 变化，需要更新部分 state</h2><p>硬重置（不推荐、但可救急）</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>componentDidUpdate\n  this.setState({ ..._.cloneDeep(defaultStates) }, () =&gt; {\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>v15 componentWillReceiveProps or componentDidUpdate + setState v16 getDerivedStateFromProps</p><p>反模式：受控与非受控混合</p><p>官方建议：</p><ol><li>完全受控，数据提升</li><li>完全不受控，用 key 控制更新</li></ol><h2 id="缓存计算" tabindex="-1"><a class="header-anchor" href="#缓存计算" aria-hidden="true">#</a> 缓存计算</h2><p>类 Vue computed，场景高开销计算，入参作为依赖，缓存最后一次计算值</p>',20),Ar=r("memoize-one "),Or={href:"https://juejin.cn/post/6844903894061940750",target:"_blank",rel:"noopener noreferrer"},Nr=r("memoize-one 在 React 中的应用"),Wr=o('<p>拓展：斐波那契数列</p><h2 id="ripple-btn" tabindex="-1"><a class="header-anchor" href="#ripple-btn" aria-hidden="true">#</a> ripple btn</h2><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>demo a&gt;text\nantd button&gt;span text\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>多个 span 标签，导致事件 target 会变，当 target 为 span 时，计算坐标有误</p><p>span antd 有设置 absolute</p><h2 id="跨组件引用可变对象" tabindex="-1"><a class="header-anchor" href="#跨组件引用可变对象" aria-hidden="true">#</a> 跨组件引用可变对象</h2><ul><li>多个修改源</li><li>深层数据变了，引用没变</li></ul><h2 id="webpack-cpu占用高" tabindex="-1"><a class="header-anchor" href="#webpack-cpu占用高" aria-hidden="true">#</a> webpack CPU占用高</h2><p>在 MacOS Catalina 中，Vue 项目在运行 node run dev 时，webpack server 会调用 fsevents 模块进行监控文件变化。如果没有这个模块，就会一直遍历所有的文件。</p><p>https://www.jianshu.com/p/f7769e01aa9c</p><h2 id="表格踩坑-最佳实践" tabindex="-1"><a class="header-anchor" href="#表格踩坑-最佳实践" aria-hidden="true">#</a> 表格踩坑，最佳实践</h2><p>查询参数和分页，应该用一个 state，合并更新 query</p><p>这么写，会有冲突，比如筛选重置同时回第一页</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token function">fetchList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>curQuery<span class="token punctuation">,</span> pagination<span class="token punctuation">]</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="url-hash-变化-如何更新页面" tabindex="-1"><a class="header-anchor" href="#url-hash-变化-如何更新页面" aria-hidden="true">#</a> URL hash 变化，如何更新页面</h2>',15),Jr={href:"https://stackoverflow.com/questions/48139281/react-doesnt-reload-component-data-on-route-param-change-or-query-change",target:"_blank",rel:"noopener noreferrer"},Vr=r("javascript - React doesn't reload component data on route param change or query change - Stack Overflow");p.render=function(r,o){const p=a("RouterLink"),Br=a("OutboundLink");return n(),e(l,null,[i,s("nav",c,[s("ul",null,[s("li",null,[s(p,{to:"#页面结构"},{default:t((()=>[u])),_:1})]),s("li",null,[s(p,{to:"#注意"},{default:t((()=>[d])),_:1})]),s("li",null,[s(p,{to:"#page-bare-template"},{default:t((()=>[h])),_:1})]),s("li",null,[s(p,{to:"#typescript"},{default:t((()=>[m])),_:1}),s("ul",null,[s("li",null,[s(p,{to:"#json-快速生成-ts"},{default:t((()=>[b])),_:1})])])]),s("li",null,[s(p,{to:"#影响效率因素"},{default:t((()=>[k])),_:1})]),s("li",null,[s(p,{to:"#新建页面"},{default:t((()=>[f])),_:1})]),s("li",null,[s(p,{to:"#表格实现"},{default:t((()=>[g])),_:1})]),s("li",null,[s(p,{to:"#路径-routes"},{default:t((()=>[v])),_:1})]),s("li",null,[s(p,{to:"#connect"},{default:t((()=>[x])),_:1})]),s("li",null,[s(p,{to:"#解构对象内容"},{default:t((()=>[y])),_:1})]),s("li",null,[s(p,{to:"#checkbox-group"},{default:t((()=>[_])),_:1})]),s("li",null,[s(p,{to:"#classnames"},{default:t((()=>[w])),_:1})]),s("li",null,[s(p,{to:"#umi-requesttype-默认是-json-可选-form"},{default:t((()=>[j])),_:1})]),s("li",null,[s(p,{to:"#iconfont-cn-use-in-antd"},{default:t((()=>[S])),_:1})]),s("li",null,[s(p,{to:"#hover-exclude"},{default:t((()=>[R])),_:1})]),s("li",null,[s(p,{to:"#useeffect-反复执行"},{default:t((()=>[q])),_:1})]),s("li",null,[s(p,{to:"#数据联动"},{default:t((()=>[C])),_:1})]),s("li",null,[s(p,{to:"#antd-form-onfinished"},{default:t((()=>[E])),_:1})]),s("li",null,[s(p,{to:"#hook-state-拆分合并原则"},{default:t((()=>[P])),_:1})]),s("li",null,[s(p,{to:"#可以在函数内直接申明普通常量或普通函数吗"},{default:t((()=>[I])),_:1})]),s("li",null,[s(p,{to:"#useeffect-不要用-async-use-usecallback-instead"},{default:t((()=>[T])),_:1})]),s("li",null,[s(p,{to:"#list-virtualized"},{default:t((()=>[M])),_:1})]),s("li",null,[s(p,{to:"#生命周期模拟-useeffect"},{default:t((()=>[D])),_:1})]),s("li",null,[s(p,{to:"#calc-px-计算"},{default:t((()=>[F])),_:1})]),s("li",null,[s(p,{to:"#播放器能支持哪些文件类型"},{default:t((()=>[L])),_:1})]),s("li",null,[s(p,{to:"#使用多个-usestate-或-usereducer"},{default:t((()=>[z])),_:1})]),s("li",null,[s(p,{to:"#复杂-state-逻辑建议用-react-自带-usereducer"},{default:t((()=>[H])),_:1})]),s("li",null,[s(p,{to:"#自定义-hook"},{default:t((()=>[U])),_:1})]),s("li",null,[s(p,{to:"#rangepicker-没有样式"},{default:t((()=>[A])),_:1})]),s("li",null,[s(p,{to:"#dva-使用"},{default:t((()=>[O])),_:1})]),s("li",null,[s(p,{to:"#antd-权限组件"},{default:t((()=>[N])),_:1})]),s("li",null,[s(p,{to:"#hook-dva-snip"},{default:t((()=>[W])),_:1})]),s("li",null,[s(p,{to:"#umi-ui"},{default:t((()=>[J])),_:1})]),s("li",null,[s(p,{to:"#自定义左侧菜单-icon"},{default:t((()=>[V])),_:1})]),s("li",null,[s(p,{to:"#动态-menu"},{default:t((()=>[B])),_:1})]),s("li",null,[s(p,{to:"#参数路由"},{default:t((()=>[G])),_:1})]),s("li",null,[s(p,{to:"#layouts"},{default:t((()=>[Y])),_:1})]),s("li",null,[s(p,{to:"#视图无关的数据"},{default:t((()=>[Q])),_:1})]),s("li",null,[s(p,{to:"#re-render"},{default:t((()=>[K])),_:1})]),s("li",null,[s(p,{to:"#why-mapstate-mapdispatch"},{default:t((()=>[Z])),_:1})]),s("li",null,[s(p,{to:"#容器组件模式"},{default:t((()=>[X])),_:1})]),s("li",null,[s(p,{to:"#umi-简化数据流方案"},{default:t((()=>[$])),_:1})]),s("li",null,[s(p,{to:"#class-组件不能用-hooks"},{default:t((()=>[aa])),_:1})]),s("li",null,[s(p,{to:"#form-表单数据存储到上层组件"},{default:t((()=>[na])),_:1})]),s("li",null,[s(p,{to:"#warning-antd-upload-value-is-not-a-valid-prop-do-you-mean-filelist"},{default:t((()=>[ea])),_:1})]),s("li",null,[s(p,{to:"#unhandled-rejection-typeerror-object-is-not-a-function"},{default:t((()=>[sa])),_:1})]),s("li",null,[s(p,{to:"#使用-upload-组件上传图片提示-uncaught-error-must-set-key-for-rc-animate-children"},{default:t((()=>[ta])),_:1})]),s("li",null,[s(p,{to:"#error-too-many-re-renders-react-limits-the-number-of-renders-to-prevent-an-infinite-loop"},{default:t((()=>[la])),_:1})]),s("li",null,[s(p,{to:"#自定义表单控件"},{default:t((()=>[ra])),_:1})]),s("li",null,[s(p,{to:"#usemodel-是否会触发-redux-插件"},{default:t((()=>[oa])),_:1})]),s("li",null,[s(p,{to:"#给定深层数据-id-tree-结构定位"},{default:t((()=>[pa])),_:1})]),s("li",null,[s(p,{to:"#antd-官方-dragger-丢失文件"},{default:t((()=>[ia])),_:1})]),s("li",null,[s(p,{to:"#useeffect-函数惰性-绑定函数记忆的可以是旧的依赖值"},{default:t((()=>[ca])),_:1})]),s("li",null,[s(p,{to:"#切换素材时-form-item-下发的-value-不更新-故改为手动传"},{default:t((()=>[ua])),_:1})]),s("li",null,[s(p,{to:"#react-props-默认值使用非基础类型-引起不必要更新"},{default:t((()=>[da])),_:1})]),s("li",null,[s(p,{to:"#failed-to-execute-clone-on-response-umi"},{default:t((()=>[ha])),_:1})]),s("li",null,[s(p,{to:"#antd-layout"},{default:t((()=>[ma])),_:1})]),s("li",null,[s(p,{to:"#menu"},{default:t((()=>[ba])),_:1})]),s("li",null,[s(p,{to:"#usemodel-持久化-浅拷贝数据里如果有对象-对象经修改-会保持"},{default:t((()=>[ka])),_:1})]),s("li",null,[s(p,{to:"#异步权限"},{default:t((()=>[fa])),_:1})]),s("li",null,[s(p,{to:"#关闭菜单国际化"},{default:t((()=>[ga])),_:1})]),s("li",null,[s(p,{to:"#对象意外修改"},{default:t((()=>[va])),_:1})]),s("li",null,[s(p,{to:"#总结自己使用过的-hooks-数据流方式-掘金"},{default:t((()=>[xa])),_:1})]),s("li",null,[s(p,{to:"#css-module-局部作用域"},{default:t((()=>[ya])),_:1})]),s("li",null,[s(p,{to:"#权限控制"},{default:t((()=>[_a])),_:1})]),s("li",null,[s(p,{to:"#模块模式"},{default:t((()=>[wa])),_:1})]),s("li",null,[s(p,{to:"#记忆-memo"},{default:t((()=>[ja])),_:1})]),s("li",null,[s(p,{to:"#file-type-不可靠"},{default:t((()=>[Sa])),_:1})]),s("li",null,[s(p,{to:"#动态样式"},{default:t((()=>[Ra])),_:1})]),s("li",null,[s(p,{to:"#undefined-未赋值-null-值为空"},{default:t((()=>[qa])),_:1})]),s("li",null,[s(p,{to:"#less-alpha"},{default:t((()=>[Ca])),_:1})]),s("li",null,[s(p,{to:"#antd-日期选择-预设日期"},{default:t((()=>[Ea])),_:1})]),s("li",null,[s(p,{to:"#特殊选中需求"},{default:t((()=>[Pa])),_:1})]),s("li",null,[s(p,{to:"#使用-传递对象-修改时-注意提前-clone-不要影响原对象"},{default:t((()=>[Ia])),_:1})]),s("li",null,[s(p,{to:"#审核自动切换"},{default:t((()=>[Ta])),_:1})]),s("li",null,[s(p,{to:"#css-hover-不适用内容有间距场景"},{default:t((()=>[Ma])),_:1})]),s("li",null,[s(p,{to:"#antd-日期组件返回的时间是当时时间"},{default:t((()=>[Da])),_:1})]),s("li",null,[s(p,{to:"#replace-designlayout-with-prolayout"},{default:t((()=>[Fa])),_:1})]),s("li",null,[s(p,{to:"#权限处理"},{default:t((()=>[La])),_:1})]),s("li",null,[s(p,{to:"#ts-demo"},{default:t((()=>[za])),_:1})]),s("li",null,[s(p,{to:"#percent-事件频繁导致-多个组件过度-render"},{default:t((()=>[Ha])),_:1})]),s("li",null,[s(p,{to:"#跨代数据共享"},{default:t((()=>[Ua])),_:1})]),s("li",null,[s(p,{to:"#我是如何无缝的扩展-antd-组件-知乎"},{default:t((()=>[Aa])),_:1})]),s("li",null,[s(p,{to:"#ant-design-repo"},{default:t((()=>[Oa])),_:1})]),s("li",null,[s(p,{to:"#高阶组件"},{default:t((()=>[Na])),_:1})]),s("li",null,[s(p,{to:"#antd-强烈风格-不适合较大定制"},{default:t((()=>[Wa])),_:1})]),s("li",null,[s(p,{to:"#线上-设计素材浏览有个-bug-切换二级菜单时-列表数据某些场景会互相影响"},{default:t((()=>[Ja])),_:1})]),s("li",null,[s(p,{to:"#图标替换"},{default:t((()=>[Va])),_:1})]),s("li",null,[s(p,{to:"#require-文件不存在"},{default:t((()=>[Ba])),_:1})]),s("li",null,[s(p,{to:"#react-如何点击页面空白处关闭弹窗"},{default:t((()=>[Ga])),_:1})]),s("li",null,[s(p,{to:"#umi-env-页面内不要解构-process-env"},{default:t((()=>[Ya,Qa,Ka])),_:1})]),s("li",null,[s(p,{to:"#form-field-避免下标访问-不利于扩展"},{default:t((()=>[Za])),_:1})]),s("li",null,[s(p,{to:"#公共组件样式"},{default:t((()=>[Xa])),_:1})]),s("li",null,[s(p,{to:"#husky"},{default:t((()=>[$a])),_:1})]),s("li",null,[s(p,{to:"#antd-range-picker-blur-hide-如何实现"},{default:t((()=>[an])),_:1})]),s("li",null,[s(p,{to:"#stylelint-异常输出"},{default:t((()=>[nn])),_:1})]),s("li",null,[s(p,{to:"#umi-request-requesttype-生效条件"},{default:t((()=>[en])),_:1})]),s("li",null,[s(p,{to:"#createportal-左右切换时-生成多余-div"},{default:t((()=>[sn])),_:1})]),s("li",null,[s(p,{to:"#todo-material-lib"},{default:t((()=>[tn])),_:1})]),s("li",null,[s(p,{to:"#react-hooks-四-immutable-知乎"},{default:t((()=>[ln])),_:1})]),s("li",null,[s(p,{to:"#caches-操作要求-https"},{default:t((()=>[rn])),_:1})]),s("li",null,[s(p,{to:"#请求优化-token-是否存在或在有效期内"},{default:t((()=>[on])),_:1})]),s("li",null,[s(p,{to:"#static-proptypes"},{default:t((()=>[pn])),_:1})]),s("li",null,[s(p,{to:"#何时单独用-xhr"},{default:t((()=>[cn])),_:1})]),s("li",null,[s(p,{to:"#immerjs-优于使用-lodash-创建拷贝"},{default:t((()=>[un])),_:1})]),s("li",null,[s(p,{to:"#竞速-race"},{default:t((()=>[dn])),_:1})]),s("li",null,[s(p,{to:"#upload-drag-扩大区域"},{default:t((()=>[hn])),_:1})]),s("li",null,[s(p,{to:"#定位代码最快方式"},{default:t((()=>[mn])),_:1})]),s("li",null,[s(p,{to:"#开发阶段-eslint-影响初期效率"},{default:t((()=>[bn])),_:1})]),s("li",null,[s(p,{to:"#临时禁用-lint"},{default:t((()=>[kn])),_:1})]),s("li",null,[s(p,{to:"#空数组约定"},{default:t((()=>[fn])),_:1})]),s("li",null,[s(p,{to:"#map-key"},{default:t((()=>[gn])),_:1})]),s("li",null,[s(p,{to:"#hmr-fast-refresh"},{default:t((()=>[vn])),_:1})]),s("li",null,[s(p,{to:"#dan-note"},{default:t((()=>[xn])),_:1})]),s("li",null,[s(p,{to:"#constructor-里发请求"},{default:t((()=>[yn])),_:1})]),s("li",null,[s(p,{to:"#自定义-tag"},{default:t((()=>[_n])),_:1})]),s("li",null,[s(p,{to:"#jsx-map-join-reduce"},{default:t((()=>[wn])),_:1})]),s("li",null,[s(p,{to:"#pages-重复渲染-尤其-audio-有动画明显"},{default:t((()=>[jn])),_:1})]),s("li",null,[s(p,{to:"#effect-相关函数处理"},{default:t((()=>[Sn])),_:1})]),s("li",null,[s(p,{to:"#modal-router"},{default:t((()=>[Rn])),_:1})]),s("li",null,[s(p,{to:"#鼠标进入触发-lottie"},{default:t((()=>[qn])),_:1})]),s("li",null,[s(p,{to:"#antd-table"},{default:t((()=>[Cn])),_:1})]),s("li",null,[s(p,{to:"#state-派生自-prop-组件内又修改-state"},{default:t((()=>[En])),_:1})]),s("li",null,[s(p,{to:"#第二层弹窗问题"},{default:t((()=>[Pn])),_:1})]),s("li",null,[s(p,{to:"#redux-dev-tool-crash"},{default:t((()=>[In])),_:1})]),s("li",null,[s(p,{to:"#无效组件"},{default:t((()=>[Tn])),_:1})]),s("li",null,[s(p,{to:"#点击文本复制"},{default:t((()=>[Mn])),_:1})]),s("li",null,[s(p,{to:"#半受控-props-变化-需要更新部分-state"},{default:t((()=>[Dn])),_:1})]),s("li",null,[s(p,{to:"#缓存计算"},{default:t((()=>[Fn])),_:1})]),s("li",null,[s(p,{to:"#ripple-btn"},{default:t((()=>[Ln])),_:1})]),s("li",null,[s(p,{to:"#跨组件引用可变对象"},{default:t((()=>[zn])),_:1})]),s("li",null,[s(p,{to:"#webpack-cpu占用高"},{default:t((()=>[Hn])),_:1})]),s("li",null,[s(p,{to:"#表格踩坑-最佳实践"},{default:t((()=>[Un])),_:1})]),s("li",null,[s(p,{to:"#url-hash-变化-如何更新页面"},{default:t((()=>[An])),_:1})])])]),On,s("ul",null,[Nn,Wn,s("li",null,[Jn,s("p",null,[s("a",Vn,[Bn,s(Br)])])])]),Gn,s("ul",null,[Yn,s("li",null,[s("p",null,[s("a",Qn,[Kn,s(Br)]),Zn])]),Xn,$n,ae,ne]),ee,s("p",null,[s("a",se,[te,s(Br)])]),le,re,oe,pe,ie,s("p",null,[ce,s("a",ue,[de,s(Br)])]),he,s("p",null,[s("a",me,[be,s(Br)])]),ke,s("p",null,[s("a",fe,[ge,s(Br)])]),ve,xe,ye,s("p",null,[s("a",_e,[we,s(Br)])]),s("p",null,[s("a",je,[Se,s(Br)])]),Re,qe,Ce,s("p",null,[s("a",Ee,[Pe,s(Br)])]),Ie,s("p",null,[s("a",Te,[Me,s(Br)])]),De,Fe,s("p",null,[s("a",Le,[ze,s(Br)])]),He,Ue,s("p",null,[s("a",Ae,[Oe,s(Br)])]),Ne,s("p",null,[s("a",We,[Je,s(Br)])]),Ve,s("ul",null,[Be,s("li",null,[Ge,s("a",Ye,[Qe,s(Br)])])]),Ke,s("p",null,[Ze,s("a",Xe,[s(Br)]),$e,as,ns]),es,ss,s("p",null,[s("a",ts,[ls,s(Br)])]),rs,s("p",null,[os,s("a",ps,[is,s(Br)])]),cs,us,ds,hs,s("p",null,[s("a",ms,[bs,s(Br)])]),ks,s("p",null,[s("a",fs,[gs,s(Br)])]),vs,s("p",null,[xs,s("a",ys,[_s,s(Br)])]),ws,s("p",null,[s("a",js,[Ss,s(Br)]),s("a",Rs,[qs,s(Br)])]),Cs,s("p",null,[s("a",Es,[Ps,s(Br)])]),s("p",null,[s("a",Is,[Ts,s(Br)])]),Ms,s("h2",Ds,[Fs,Ls,s("a",zs,[Hs,s(Br)])]),s("p",null,[s("a",Us,[As,s(Br)])]),Os,s("p",null,[s("a",Ns,[Ws,s(Br)])]),Js,s("p",null,[s("a",Vs,[Bs,s(Br)]),s("a",Gs,[Ys,s(Br)])]),Qs,s("p",null,[s("a",Ks,[Zs,s(Br)])]),Xs,$s,at,s("p",null,[s("a",nt,[et,s(Br)])]),st,s("h2",tt,[lt,rt,s("a",ot,[pt,s(Br)])]),it,ct,ut,dt,s("p",null,[s("a",ht,[mt,s(Br)]),s("a",bt,[kt,s(Br)])]),ft,gt,s("p",null,[vt,s("a",xt,[yt,s(Br)]),_t]),wt,s("p",null,[jt,s("a",St,[Rt,s(Br)])]),qt,s("p",null,[s("a",Ct,[Et,s(Br)]),Pt]),It,s("p",null,[Tt,s("a",Mt,[Dt,s(Br)]),Ft]),Lt,s("h2",zt,[Ht,Ut,s("a",At,[Ot,s(Br)])]),Nt,s("p",null,[Wt,s("a",Jt,[Vt,s(Br)])]),Bt,s("ol",null,[s("li",null,[Gt,s("p",null,[s("a",Yt,[Qt,s(Br)])])]),s("li",null,[Kt,s("p",null,[s("a",Zt,[Xt,s(Br)])])]),$t,al,nl,el]),sl,s("p",null,[tl,s("a",ll,[rl,s(Br)])]),ol,s("ul",null,[pl,il,s("li",null,[cl,s("p",null,[s("a",ul,[dl,s(Br)])])])]),s("p",null,[s("a",hl,[ml,s(Br)])]),bl,kl,fl,s("p",null,[s("a",gl,[vl,s(Br)])]),s("p",null,[xl,s("a",yl,[_l,s(Br)])]),wl,s("p",null,[s("a",jl,[Sl,s(Br)])]),Rl,s("p",null,[ql,s("a",Cl,[El,s(Br)])]),Pl,Il,Tl,s("ul",null,[s("li",null,[Ml,s("a",Dl,[Fl,s(Br)]),s("a",Ll,[zl,s(Br)])])]),Hl,s("ol",null,[Ul,Al,Ol,s("li",null,[Nl,s("a",Wl,[Jl,s(Br)]),s("a",Vl,[Bl,s(Br)])])]),s("p",null,[Gl,s("a",Yl,[Ql,s(Br)])]),Kl,s("ul",null,[Zl,s("li",null,[Xl,s("a",$l,[ar,s(Br)]),s("a",nr,[er,s(Br)])])]),sr,s("p",null,[s("a",tr,[lr,s(Br)])]),rr,s("p",null,[or,s("a",pr,[ir,s(Br)])]),s("p",null,[cr,s("a",ur,[dr,s(Br)])]),hr,mr,s("p",null,[s("a",br,[kr,s(Br)])]),s("p",null,[s("a",fr,[gr,s(Br)])]),s("p",null,[s("a",vr,[xr,s(Br)])]),yr,_r,s("p",null,[s("a",wr,[jr,s(Br)])]),Sr,s("p",null,[s("a",Rr,[qr,s(Br)])]),Cr,s("p",null,[s("a",Er,[Pr,s(Br)])]),Ir,s("p",null,[s("a",Tr,[Mr,s(Br)]),s("a",Dr,[Fr,s(Br)])]),Lr,s("p",null,[s("a",zr,[Hr,s(Br)])]),Ur,s("p",null,[Ar,s("a",Or,[Nr,s(Br)])]),Wr,s("p",null,[s("a",Jr,[Vr,s(Br)])])],64)};export default p;
