import{r as n,o as s,c as a,a as e,F as t,d as p,b as o}from"./app.26466922.js";const c={},l=p('<h1 id="dom-计算" tabindex="-1"><a class="header-anchor" href="#dom-计算" aria-hidden="true">#</a> DOM 计算</h1><h2 id="坐标、距离" tabindex="-1"><a class="header-anchor" href="#坐标、距离" aria-hidden="true">#</a> 坐标、距离</h2><ul><li>clientX/Y</li><li>screenX/Y</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token doc-comment comment">/**\n * 获取鼠标相对于canvas画布的位置\n **/</span>\n<span class="token keyword">function</span> <span class="token function">getPosition</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> rect <span class="token operator">=</span> e<span class="token punctuation">.</span>currentTarget<span class="token punctuation">.</span><span class="token function">getBoundingClientRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    touch<span class="token punctuation">,</span>\n    po\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>clientType <span class="token operator">===</span> <span class="token string">&#39;mobile&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    touch <span class="token operator">=</span> e<span class="token punctuation">.</span>touches<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>\n    <span class="token comment">//console.log(touch);</span>\n    po <span class="token operator">=</span> <span class="token punctuation">{</span>\n      x<span class="token operator">:</span> touch<span class="token punctuation">.</span>clientX <span class="token operator">-</span> rect<span class="token punctuation">.</span>left<span class="token punctuation">,</span>\n      y<span class="token operator">:</span> touch<span class="token punctuation">.</span>clientY <span class="token operator">-</span> rect<span class="token punctuation">.</span>top\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    po <span class="token operator">=</span> <span class="token punctuation">{</span>\n      x<span class="token operator">:</span> e<span class="token punctuation">.</span>clientX <span class="token operator">-</span> rect<span class="token punctuation">.</span>left<span class="token punctuation">,</span>\n      y<span class="token operator">:</span> e<span class="token punctuation">.</span>clientY <span class="token operator">-</span> rect<span class="token punctuation">.</span>top\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> po\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><p>这里我们也可以使用 offsetX/Y 来获取鼠标相对元素的位置信息，只不过需要注意一点的是，offsetX/Y 得到的是相对元素 padding box 的相对位置，和通过 clientX/Y-rect.left/top 得到的是相对元素 border box 得到的相对位置。</p><h2 id="getboundingclientrect和getclientrects异同" tabindex="-1"><a class="header-anchor" href="#getboundingclientrect和getclientrects异同" aria-hidden="true">#</a> <code>getBoundingClientRect</code>和<code>getClientRects</code>异同</h2>',6),r=e("li",null,"bounding 界限 rectangle 矩形",-1),u=e("li",null,"注意 right 和 bottom 是按左上边计算",-1),i=o("这两个函数对 block 元素得到的结果相同，只不过 getClientRects()得到的是一个数组。对于 inline 元素来说，如果 inline 元素跨行后，每行都会形成一个 DOMRect，因此 getClientRects()会得到多个 DOMRect 的位置大小信息组成的数组。而 getBoundingClientRect()会得到包围所有 DOMRect 的最小矩形的位置大小信息。 "),k={href:"https://www.quirksmode.org/dom/tests/rectangles.html",target:"_blank",rel:"noopener noreferrer"},b=o("DOM tests - rectangles");c.render=function(p,o){const c=n("OutboundLink");return s(),a(t,null,[l,e("ul",null,[r,u,e("li",null,[i,e("a",k,[b,e(c)])])])],64)};export default c;
