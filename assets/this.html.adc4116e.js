import{r as n,o as s,c as a,a as p,w as t,F as e,b as c,d as o}from"./app.0e74f851.js";const l={},i=p("h1",{id:"this",tabindex:"-1"},[p("a",{class:"header-anchor",href:"#this","aria-hidden":"true"},"#"),c(" this")],-1),u={class:"table-of-contents"},r=c("basic"),k=c("this 继承"),d=c("易错题"),b=o('<h2 id="basic" tabindex="-1"><a class="header-anchor" href="#basic" aria-hidden="true">#</a> basic</h2><ul><li>function 调用时，有隐式参数 this</li><li>function 可以在调用时，改变 this，箭头函数不行，总是定义时 context 所指</li><li>function 作为对象方法调用时，隐式传入对象作为 this</li></ul><h2 id="this-继承" tabindex="-1"><a class="header-anchor" href="#this-继承" aria-hidden="true">#</a> this 继承</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token punctuation">{</span>\n  <span class="token operator">...</span>\n  <span class="token function-variable function">add</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token function-variable function">addAll</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token function">addAll</span><span class="token punctuation">(</span><span class="token parameter">pieces</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> self <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>\n    _<span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span>pieces<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">piece</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      self<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>piece<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token operator">...</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><blockquote><p>在这里，你希望在内层函数里写的是<code>this.add(piece)</code>，不幸的是，内层函数并未从外层函数继承 this 的值。在内层函数里，this 会是 window 或 undefined， 临时变量 self 用来将外部的 this 值导入内部函数。（另一种方式是在内部函数上执行<code>.bind(this)</code>，两种方法都不甚美观。）</p></blockquote><p>箭头函数内的 this 值继承自外围作用域</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// ES6</span>\n<span class="token punctuation">{</span>\n  <span class="token operator">...</span>\n  <span class="token function-variable function">addAll</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token function">addAll</span><span class="token punctuation">(</span><span class="token parameter">pieces</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    _<span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span>pieces<span class="token punctuation">,</span> <span class="token parameter">piece</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>piece<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token operator">...</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><blockquote><p>在 ES6 的版本中，注意 addAll 方法从它的调用者处获取了 this 值，内部函数是一个箭头函数，所以它继承了外围作用域的 this 值。</p></blockquote>',8),m=c("结论：箭头函数和 function 要配合使用，无法完全弃用 function "),h={href:"http://2ality.com/2017/12/alternate-this.html",target:"_blank",rel:"noopener noreferrer"},f=c("A different way of understanding "),v=p("code",null,"this",-1),w=c(" in JavaScript"),g={href:"https://www.tslang.cn/docs/handbook/functions.html",target:"_blank",rel:"noopener noreferrer"},y=c("函数 · TypeScript中文网 · TypeScript——JavaScript的超集"),j=c(" 参看 this和箭头函数 一节，有助理解"),x=o('<blockquote><p>this的值在函数被调用的时候才会指定 顶级的非方法式调用会将 this视为window</p></blockquote><h2 id="易错题" tabindex="-1"><a class="header-anchor" href="#易错题" aria-hidden="true">#</a> 易错题</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>  <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">&#39;mike&#39;</span>\n  <span class="token keyword">var</span> people <span class="token operator">=</span> <span class="token punctuation">{</span>\n    name<span class="token operator">:</span> <span class="token string">&#39;jordan&#39;</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">say</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">function</span> <span class="token function">d</span><span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token function">i</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">d</span><span class="token punctuation">(</span>people<span class="token punctuation">.</span>say<span class="token punctuation">)</span> <span class="token comment">// mike</span>\n  <span class="token comment">// 参数，按值传递，复制过来一个函数，与原对象无关系</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div>',3);l.render=function(c,o){const l=n("RouterLink"),_=n("OutboundLink");return s(),a(e,null,[i,p("nav",u,[p("ul",null,[p("li",null,[p(l,{to:"#basic"},{default:t((()=>[r])),_:1})]),p("li",null,[p(l,{to:"#this-继承"},{default:t((()=>[k])),_:1})]),p("li",null,[p(l,{to:"#易错题"},{default:t((()=>[d])),_:1})])])]),b,p("p",null,[m,p("a",h,[f,v,w,p(_)])]),p("p",null,[p("a",g,[y,p(_)]),j]),x],64)};export default l;
