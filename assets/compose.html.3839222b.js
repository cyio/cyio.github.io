import{_ as a,r as p,o as t,c as e,a as n,b as o,F as c,e as l,d as u}from"./app.83a133fc.js";const r={},k=l(`<h1 id="\u51FD\u6570\u5408\u6210" tabindex="-1"><a class="header-anchor" href="#\u51FD\u6570\u5408\u6210" aria-hidden="true">#</a> \u51FD\u6570\u5408\u6210</h1><p>\u5C06\u591A\u4E2A\u51FD\u6570\u5408\u6210\u4E00\u4E2A\u51FD\u6570</p><p>\u7B80\u5355\u793A\u4F8B\uFF0C\u53EA\u5408\u6210\u4E24\u4E2A</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">toUpperCase</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> x<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">hello</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token string">&#39;HELLO, &#39;</span> <span class="token operator">+</span> x<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// \u539F\u59CB\u5408\u6210</span>
<span class="token comment">// \u8FD4\u56DE\u503C\u5728\u5B50\u51FD\u6570\u95F4\u4F20\u9012</span>
<span class="token comment">// const greet = function(x){</span>
    <span class="token comment">// return hello(toUpperCase(x));</span>
<span class="token comment">// };</span>

<span class="token comment">// \u5408\u6210\u51FD\u6570\uFF0C\u8FD4\u56DE\u7684\u662F\u51FD\u6570\uFF0C\u771F\u6B63\u53C2\u6570\u5728\u8FD4\u56DE\u51FD\u6570\u4E2D</span>
<span class="token keyword">const</span> <span class="token function-variable function">compose</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">fn1<span class="token punctuation">,</span> fn2</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token function">fn2</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// function compose(fn1, fn2) {</span>
  <span class="token comment">// return function(x) {</span>
    <span class="token comment">// return fn1(fn2(x))</span>
  <span class="token comment">// }</span>
<span class="token comment">// }</span>
greet <span class="token operator">=</span> <span class="token function">compose</span><span class="token punctuation">(</span>hello<span class="token punctuation">,</span> toUpperCase<span class="token punctuation">)</span>

<span class="token keyword">let</span> r <span class="token operator">=</span> <span class="token function">greet</span><span class="token punctuation">(</span><span class="token string">&#39;kevin&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>\u5408\u6210\u591A\u4E2A</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token comment">// underscore</span>
<span class="token keyword">function</span> <span class="token function">compose</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> args <span class="token operator">=</span> arguments<span class="token punctuation">;</span>
  <span class="token keyword">var</span> start <span class="token operator">=</span> args<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> i <span class="token operator">=</span> start<span class="token punctuation">;</span>
    <span class="token keyword">var</span> result <span class="token operator">=</span> args<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">--</span><span class="token punctuation">)</span> result <span class="token operator">=</span> args<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div>`,6),i={href:"https://www.html.cn/archives/7833",target:"_blank",rel:"noopener noreferrer"},m=u("JavaScript \u51FD\u6570\u5F0F\u7F16\u7A0B\u672F\u8BED\u5927\u5168-WEB\u524D\u7AEF\u5F00\u53D1");function b(d,f){const s=p("ExternalLinkIcon");return t(),e(c,null,[k,n("p",null,[n("a",i,[m,o(s)])])],64)}var h=a(r,[["render",b],["__file","compose.html.vue"]]);export{h as default};
