import{r as n,o as s,c as a,a as p,F as t,d as e,b as o}from"./app.26466922.js";const c={},l=e('<h1 id="setinterval" tabindex="-1"><a class="header-anchor" href="#setinterval" aria-hidden="true">#</a> setInterval</h1><p>应用场景：通过模拟解决 setInterval 不准问题</p><p>考察:</p><ul><li>递归</li><li>api 返回值是什么</li><li>内部函数 this 保持</li><li>如何停止</li></ul><p>如何拿到最新的 tId 进行清除，解法是用引用？</p><blockquote><p>setInterval能够保证以固定频率向事件队列放入回调，setTimeout不能保证。两个都不能保证固定的回调执行频率，因为存在主线程阻塞的可能</p></blockquote>',6),u={href:"https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/259#issuecomment-687007642",target:"_blank",rel:"noopener noreferrer"},i=o("第 133 题：用 setTimeout 实现 setInterval，阐述实现的效果与setInterval的差异 · Issue #259 · Advanced-Frontend/Daily-Interview-Question"),r=e('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>  <span class="token comment">// setInterval(fn, 3000)</span>\n\n  <span class="token keyword">function</span> <span class="token function">mySetInterval</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> wait</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> tId <span class="token operator">=</span> <span class="token keyword">null</span>\n    <span class="token keyword">let</span> self  <span class="token operator">=</span> <span class="token keyword">this</span>\n    <span class="token keyword">function</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token parameter">_fn<span class="token punctuation">,</span> _wait</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n      tId <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span>\n        <span class="token function">inner</span><span class="token punctuation">(</span>_fn<span class="token punctuation">,</span> _wait<span class="token punctuation">)</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span> wait<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token function">inner</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span> wait<span class="token punctuation">)</span>\n\n    <span class="token keyword">return</span> tId\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">let</span> id <span class="token operator">=</span> <span class="token function">mySetInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>\n  <span class="token function">clearTimeout</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>改进，加标记并对外提供修改方法，停止运行</p><p>考察闭包</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>  <span class="token keyword">function</span> <span class="token function">myInterval</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> wait</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> stop <span class="token operator">=</span> <span class="token boolean">false</span>\n    <span class="token keyword">function</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>stop<span class="token punctuation">)</span> <span class="token keyword">return</span>\n      <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      <span class="token function">setTimeout</span><span class="token punctuation">(</span>inner<span class="token punctuation">,</span> wait<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token function">setTimeout</span><span class="token punctuation">(</span>inner<span class="token punctuation">,</span> wait<span class="token punctuation">)</span>\n    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n      stop <span class="token operator">=</span> <span class="token boolean">true</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">let</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;haha&#39;</span><span class="token punctuation">)</span>\n  <span class="token keyword">let</span> clear <span class="token operator">=</span> <span class="token function">myInterval</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>\n  <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div>',4);c.render=function(e,o){const c=n("OutboundLink");return s(),a(t,null,[l,p("p",null,[p("a",u,[i,p(c)])]),r],64)};export default c;
