import{r as n,o as s,c as a,a as p,F as e,d as t,b as o}from"./app.31fc93bc.js";const c={},l=t('<h1 id="单例" tabindex="-1"><a class="header-anchor" href="#单例" aria-hidden="true">#</a> 单例</h1><p>特点：一个类只有一个实例</p><p>工厂模式：在创建对象时不会对客户端暴露创建逻辑，并且是通过使用一个共同的接口来指向新创建的对象。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> Singleton <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token keyword">var</span> instance<span class="token punctuation">;</span>\n  <span class="token keyword">class</span> <span class="token class-name">CreateSingleton</span> <span class="token punctuation">{</span> <span class="token comment">// 需要定义在内部，防止意外调用</span>\n    <span class="token function">constructor</span> <span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>instance<span class="token punctuation">)</span> <span class="token keyword">return</span> instance<span class="token punctuation">;</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>\n      <span class="token keyword">return</span> instance <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> CreateSingleton<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// IIFE，CreateSingleton 和 instance 提前生成。如果不用 IIFE，new 时会创建不同 instance</span>\n\n<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token string">&#39;instance1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// console.log(a.getName()); //输出instance1</span>\n<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token string">&#39;instance2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// console.log(b.getName()); //输出instance1，没有创建出新的实例</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">===</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输出true</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div>',4),u={href:"https://segmentfault.com/a/1190000021101281",target:"_blank",rel:"noopener noreferrer"},r=o("JavaScript设计模式第1篇：单例模式_前端学习 - SegmentFault 思否");c.render=function(t,o){const c=n("OutboundLink");return s(),a(e,null,[l,p("p",null,[p("a",u,[r,p(c)])])],64)};export default c;
