import{o as e,c as a,F as r,a as n,b as u}from"./app.31fc93bc.js";const o={},c=n("h1",{id:"读源码",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#读源码","aria-hidden":"true"},"#"),u(" 读源码")],-1),s=n("blockquote",null,[n("p",null,'看源码是很枯燥的，要让源码看起来有意思，造轮子有意思那么就需要你带着自己的问题去看去造。我以前看jQuery，看Backbone，看Underscore的时候，都是在自己熟练使用的情况下试着去"猜"他们怎么实现的，而不是直接看源码，猜得差不多了你就需要去实现猜的代码，然后再同这些源码做比较，实现过程中你知道遇到了哪些难以处理的或者想不到的地方，再去看源码你就会很有针对性，同时会知道自己哪里写得更好更差等等。但这里注意找的时候找一个低版本，比如vue 0.10/1.0/2.0来看，不然各种fix在里面你都不知道为啥。你看源码是要有目的的，看思想？看实现？看代码风格？不要胡乱看。如上，久而久之当你看到一个新的东西，你"猜"的习惯会让你很容易掌握这些新技术，就像我看vue的教程时候，稍加vue背景和设计，我就差不多能够知道他源码大约怎么写的，然后针对某些我觉得有意思的部分实现一下就七七八八了(前一两年我当时看的0.10.x')],-1);o.render=function(n,u){return e(),a(r,null,[c,s],64)};export default o;
