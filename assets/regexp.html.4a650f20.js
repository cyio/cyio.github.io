import{r as n,o as s,c as a,a as e,w as p,F as t,b as l,d as c}from"./app.09b8f80a.js";const o={},r=e("h1",{id:"正则表达式",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#正则表达式","aria-hidden":"true"},"#"),l(" 正则表达式")],-1),u={class:"table-of-contents"},i=l("match/exec/test"),k=l("基础"),d=l("创建方式"),b=l("元字符"),g=l("定位符"),m=l("选择分支"),x=l("补充"),h=l("常用匹配"),f=l("常用正则"),v=l("构造正则步骤"),w=l("案例与实战"),j=l("如何匹配电子邮件"),y=l("手机号"),_=l("汉字"),q={href:"https://github.com/any86/any-rule",target:"_blank",rel:"noopener noreferrer"},E=l("any86/any-rule: 🦕 常用正则大全, 支持 web / vscode / idea / Alfred Workflow 多平台"),R=c('<blockquote><p>学习目标：基础扎实，熟练运用 积累一些练习题，隔段时间回忆考察</p></blockquote><p>只能处理字符串，不能处理语法分析（语法表达示）</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> re <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">hello src=(.+) yes</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span> <span class="token comment">// 创建正则表达式对象，这里不是字符串</span>\n<span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&quot;hello src=value yes&quot;</span><span class="token punctuation">;</span>\nre<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回结果数组或null，如果只需要知道 true 或 false，用 test 或 String.search/indexOf</span>\n<span class="token function">alert</span><span class="token punctuation">(</span>RegExp<span class="token punctuation">.</span>$<span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//获取第一个分组匹配</span>\n\ng 表示执行多次，符合匹配的可能有多个\n匹配子字符串，从 lastIndex 开始\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="match-exec-test" tabindex="-1"><a class="header-anchor" href="#match-exec-test" aria-hidden="true">#</a> match/exec/test</h2><blockquote><p>RegExp.prototype.test() RegExp.prototype.exec() String.prototype.match()</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">bc</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">&#39;abc&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>index <span class="token operator">===</span> <span class="token string">&#39;abc&#39;</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token string">&#39;bc&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>index\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>查找第一个匹配索引，两个都可以，返回一致</p><p>exec 不支持 g</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token string">&#39;abcab&#39;</span>\ns<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">ab</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span>\n<span class="token comment">// [&quot;ab&quot;, &quot;ab&quot;]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>RegExp 是有状态的 lastIndex 会更新</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>  <span class="token keyword">function</span> <span class="token function">indexOfAll</span><span class="token punctuation">(</span><span class="token parameter">str<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n    <span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token string">&#39;g&#39;</span><span class="token punctuation">)</span>\n    <span class="token keyword">let</span> d <span class="token operator">=</span> reg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>\n    <span class="token keyword">while</span><span class="token punctuation">(</span>d <span class="token operator">&amp;&amp;</span> reg<span class="token punctuation">.</span>lastIndex <span class="token operator">&lt;=</span> str<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span>\n      res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>index<span class="token punctuation">)</span>\n      d <span class="token operator">=</span> reg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>\n    <span class="token keyword">return</span> res\n  <span class="token punctuation">}</span>\n\n  <span class="token function">matchAll</span><span class="token punctuation">(</span><span class="token string">&#39;abcdbc&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;bc&#39;</span><span class="token punctuation">)</span> <span class="token comment">// [1, 4]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>match 如果找不到，返回 null</p><h2 id="基础" tabindex="-1"><a class="header-anchor" href="#基础" aria-hidden="true">#</a> 基础</h2><h3 id="创建方式" tabindex="-1"><a class="header-anchor" href="#创建方式" aria-hidden="true">#</a> 创建方式</h3><p>字面量和构造器，如果正则内容是动态有变量，只能用构造器</p><h3 id="元字符" tabindex="-1"><a class="header-anchor" href="#元字符" aria-hidden="true">#</a> 元字符</h3><p><code>.</code>换行符外的任意字符，如果要包括换行符的话，在 JS 中，<code>\\s\\S</code>匹配任意字符</p><p><code>\\w</code>字母数字下划线，相当于<code>[a-zA-Z0-9_]</code>，注意包括数字和下划线</p><p><code>\\s</code>任意空白字符，空格、制表符、换行符</p><p>大写时求反，如<code>\\S</code>表示匹配任意非空白字符</p><p><code>()</code>分组</p><p><code>[]</code>字符组，如<code>[a-z]</code></p><p><code>{n}</code>量词</p><p><code>{n, m}</code>范围</p><h3 id="定位符" tabindex="-1"><a class="header-anchor" href="#定位符" aria-hidden="true">#</a> 定位符</h3><p><code>\\b</code>单词边界(word boundary) 放到待匹配字符前面</p><p><code>^</code>(在其它语言里是 A) 文本开头</p><p><code>$ (\\z \\Z)</code>文本结束，区别是<code>Z</code>会匹配到最后的换行符</p><h3 id="选择分支" tabindex="-1"><a class="header-anchor" href="#选择分支" aria-hidden="true">#</a> 选择分支</h3><p>| 管道，或</p><h3 id="补充" tabindex="-1"><a class="header-anchor" href="#补充" aria-hidden="true">#</a> 补充</h3><p>n 进制，即逢 n 进一位，如二进制，逢 2 变 10，逢 4 变 100。钟表是十二进制加六十进制，八卦是类八进制表示</p><h2 id="常用匹配" tabindex="-1"><a class="header-anchor" href="#常用匹配" aria-hidden="true">#</a> 常用匹配</h2><p>图片后缀</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>const s = &#39;afafad/a.jpg|233&#39; // 路径末尾有多余字符，需要去掉\ns.match(/(.+?).(jpe?g|png|webp)/g)\n// return [&quot;afafad/a.jpg&quot;]\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="常用正则" tabindex="-1"><a class="header-anchor" href="#常用正则" aria-hidden="true">#</a> 常用正则</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 多个字符串或关系</span>\n<span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">hello|world</span><span class="token regex-delimiter">/</span></span> <span class="token comment">// 是否存在 hello 或 world</span>\nreg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span> <span class="token comment">// return true</span>\nvue 表达式对正则支持不好，比如<span class="token constant">URL</span>地址转义<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\\/</span><span class="token template-punctuation string">`</span></span>会报表达式无效\n\n<span class="token comment">// 将等号左右词掉换</span>\n<span class="token keyword">let</span> t <span class="token operator">=</span> <span class="token string">&#39;2=1&#39;</span>\n<span class="token keyword">var</span> result <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\\w+)=(\\w+)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">&#39;$2=$1&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 匹配不成功，相当于赋值为 t</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>\n\n<span class="token comment">// 匹配 HTML 标签</span>\n<span class="token keyword">var</span> re <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&lt;[^&lt;&gt;]*&gt;</span><span class="token regex-delimiter">/</span></span>\n\n<span class="token comment">// 将加粗内容中的 before 替换为 after</span>\n<span class="token comment">// 一次替换不完</span>\n<span class="token keyword">var</span> t <span class="token operator">=</span> <span class="token string">&#39;before &lt;b&gt;first before&lt;/b&gt; test &lt;b&gt;before before&lt;/b&gt; then&#39;</span>\n<span class="token keyword">var</span> result <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&lt;b&gt;.*?&lt;\\/b&gt;</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">match</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 问号修饰星号，懒匹配，0 或更多，否则会匹配很长</span>\n\tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>match<span class="token punctuation">)</span>\n\t<span class="token keyword">return</span> match<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">before</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;after&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>\n\n<span class="token comment">// 替换数字为其2倍</span>\n<span class="token keyword">var</span> t <span class="token operator">=</span> <span class="token string">&#39;123&#39;</span>\n<span class="token keyword">var</span> re <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\d+</span><span class="token regex-delimiter">/</span></span> <span class="token comment">// 或者 /\\d/g 执行多次</span>\n<span class="token keyword">var</span> result <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\d+</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">match</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> match <span class="token operator">*</span> <span class="token number">2</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>\n\n<span class="token comment">// 日期，连接符可为 / . -</span>\n<span class="token comment">// 1. 连字符处避免点号滥用，否则会匹配 999999 这样</span>\n<span class="token comment">// 2. 最后一段后面没有短杠</span>\n<span class="token comment">// 3. 直白的写更简单？有优化意义吗？</span>\n<span class="token operator">/</span><span class="token punctuation">(</span>\\d<span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">.\\-]){2}\\d{2}</span><span class="token regex-delimiter">/</span></span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br></div></div><h2 id="构造正则步骤" tabindex="-1"><a class="header-anchor" href="#构造正则步骤" aria-hidden="true">#</a> 构造正则步骤</h2><ol><li>加载一些合法和不合法的样例数据</li><li>写一个正则匹配所有合法的数据</li><li>雕琢组成部分，直到不再匹配任何不合法的数据</li></ol><h2 id="案例与实战" tabindex="-1"><a class="header-anchor" href="#案例与实战" aria-hidden="true">#</a> 案例与实战</h2><ul><li>正则表达式<code>/^d+[^d]+/</code>能匹配的字符串？ <ul><li>A 123</li><li>B 123a</li><li>C d123</li><li>D 123def</li></ul></li></ul><p>这道题理解错误在一下几点：</p><ol><li>正则表达式的开头的 d+ 不是表示数字，表示数字是 \\d，此处要匹配的就是英文字母 d</li><li>中括号的意思是匹配其中某一个字符，比如 [123]要匹配 1 或 2 或 3</li><li>中口号中的 ^不是匹配单词开始，而是取反的意思，即要匹配的字符不能使中括号中的任意一个，比如 [^123]要匹配的字符是 1、2、3 之外的任意字符即可</li><li>所以题目中的正则表达式要匹配的是以英文字母 d 开头的字符，字母 d 有一个或多个，然后不是英文字母 d 的字符一个或多个（至少有一个）</li></ol><h3 id="如何匹配电子邮件" tabindex="-1"><a class="header-anchor" href="#如何匹配电子邮件" aria-hidden="true">#</a> 如何匹配电子邮件</h3><ul><li>两边非空白字符 1 到 N 个，中间 @</li><li>先写全法的构造，然后针对不合法情况，写细节</li></ul><h3 id="手机号" tabindex="-1"><a class="header-anchor" href="#手机号" aria-hidden="true">#</a> 手机号</h3>',46),S={href:"https://juejin.im/post/5965943ff265da6c30653879",target:"_blank",rel:"noopener noreferrer"},A=l("JS 正则表达式完整教程（略长） - 掘金"),D=c('<h3 id="汉字" tabindex="-1"><a class="header-anchor" href="#汉字" aria-hidden="true">#</a> 汉字</h3><p>匹配</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">&#39;[\\\\u4E00-\\\\u9FFF]+&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;g&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">;</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">.*[\\u4e00-\\u9fa5]+.*$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&#39;ab我&#39;</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',3),F={href:"https://regexr.com/",target:"_blank",rel:"noopener noreferrer"},z=l("RegExr: Learn, Build, & Test RegEx"),L={href:"https://github.com/regexhq",target:"_blank",rel:"noopener noreferrer"},$=l("社区规则集 RegexHQ"),M={href:"https://juejin.im/post/5965943ff265da6c30653879",target:"_blank",rel:"noopener noreferrer"},O=l("JS 正则表达式完整教程（略长） - 掘金"),C={href:"https://jex.im/regulex",target:"_blank",rel:"noopener noreferrer"},J=l("Regulex：JavaScript Regular Expression Visualizer"),Z=c('<p>边界模式 内容模式</p><ul><li>括号匹配</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token punctuation">;</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\((.*?)\\)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span>\n<span class="token comment">// (a, bc) bdbdb (1, 2)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>贪婪模式 字符串回溯 懒惰模式? 正则回溯 独占模式+，不回溯</p><p>过滤 Emoji：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>name = name.replace(/\\uD83C[\\uDF00-\\uDFFF]|\\uD83D[\\uDC00-\\uDE4F]/g, &quot;&quot;);\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>验证插件只支持正向 pattern</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>const validStrPattern = /^[\\u4e00-\\u9fa5_a-zA-Z0-9- ]+$/\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',8),H={href:"https://www.ituring.com.cn/article/500582",target:"_blank",rel:"noopener noreferrer"},I=l("当我问表单校验的面试题时，我期望得到什么样的答案-图灵社区"),U=c('<ul><li>URL 获取文件扩展</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">getUrlExtension</span><span class="token punctuation">(</span><span class="token parameter">url</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> url\n    <span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[#?]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>\n    <span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;.&#39;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div>',2),B={href:"https://stackoverflow.com/a/47767860/5657916",target:"_blank",rel:"noopener noreferrer"},T=l("How to pull url file extension out of url string using javascript - Stack Overflow"),N=c('<p>string trim</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token string">&#39; x y &#39;</span>\ns<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\s*|\\s*$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',2),P={href:"https://mp.weixin.qq.com/s?__biz=MzAxODE2MjM1MA==&mid=2651593792&idx=1&sn=3e7135683cad3910ac6381fe8e72729f&chksm=8022cb81b75542976b677380f91ac8562ac16ebefcefb82cda9c0474670cd5e534b574bc1c42#rd",target:"_blank",rel:"noopener noreferrer"},Q=l("就因为这三个知识点，我彻底学废了“正则表达式”");o.render=function(l,c){const o=n("RouterLink"),V=n("OutboundLink");return s(),a(t,null,[r,e("nav",u,[e("ul",null,[e("li",null,[e(o,{to:"#match-exec-test"},{default:p((()=>[i])),_:1})]),e("li",null,[e(o,{to:"#基础"},{default:p((()=>[k])),_:1}),e("ul",null,[e("li",null,[e(o,{to:"#创建方式"},{default:p((()=>[d])),_:1})]),e("li",null,[e(o,{to:"#元字符"},{default:p((()=>[b])),_:1})]),e("li",null,[e(o,{to:"#定位符"},{default:p((()=>[g])),_:1})]),e("li",null,[e(o,{to:"#选择分支"},{default:p((()=>[m])),_:1})]),e("li",null,[e(o,{to:"#补充"},{default:p((()=>[x])),_:1})])])]),e("li",null,[e(o,{to:"#常用匹配"},{default:p((()=>[h])),_:1})]),e("li",null,[e(o,{to:"#常用正则"},{default:p((()=>[f])),_:1})]),e("li",null,[e(o,{to:"#构造正则步骤"},{default:p((()=>[v])),_:1})]),e("li",null,[e(o,{to:"#案例与实战"},{default:p((()=>[w])),_:1}),e("ul",null,[e("li",null,[e(o,{to:"#如何匹配电子邮件"},{default:p((()=>[j])),_:1})]),e("li",null,[e(o,{to:"#手机号"},{default:p((()=>[y])),_:1})]),e("li",null,[e(o,{to:"#汉字"},{default:p((()=>[_])),_:1})])])])])]),e("p",null,[e("a",q,[E,e(V)])]),R,e("p",null,[e("a",S,[A,e(V)])]),D,e("p",null,[e("a",F,[z,e(V)])]),e("p",null,[e("a",L,[$,e(V)])]),e("p",null,[e("a",M,[O,e(V)])]),e("p",null,[e("a",C,[J,e(V)])]),Z,e("p",null,[e("a",H,[I,e(V)])]),U,e("p",null,[e("a",B,[T,e(V)])]),N,e("p",null,[e("a",P,[Q,e(V)])])],64)};export default o;
