import{r as n,o as s,c as a,a as p,F as t,b as e,d as o}from"./app.0e74f851.js";const c={},r=p("h2",{id:"转圈或进度",tabindex:"-1"},[p("a",{class:"header-anchor",href:"#转圈或进度","aria-hidden":"true"},"#"),e(" 转圈或进度")],-1),u=e("在http工具拦截器中设置 要考虑如何切换loading的显示与否，一种方案是用bus全局事件 参考第一条答案："),l={href:"https://segmentfault.com/q/1010000008214689",target:"_blank",rel:"noopener noreferrer"},i=e("vue.js - [vue2.0]在http intercepter加载loading组件，无法显示 - SegmentFault"),k=o('<p>https://github.com/greyby/vue-spinner</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> NProgress <span class="token keyword">from</span> <span class="token string">&#39;nprogress&#39;</span>\n<span class="token keyword">import</span> <span class="token string">&#39;nprogress/nprogress.css&#39;</span>\n\nVue<span class="token punctuation">.</span>http<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 请求发送前处理</span>\n    NProgress<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n        <span class="token comment">// 请求发送后处理</span>\n        NProgress<span class="token punctuation">.</span><span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> response\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div>',2);c.render=function(e,o){const c=n("OutboundLink");return s(),a(t,null,[r,p("p",null,[u,p("a",l,[i,p(c)])]),k],64)};export default c;
