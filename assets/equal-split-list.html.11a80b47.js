import{d as n}from"./app.0e74f851.js";const s={},a=n('<h1 id="平分数组" tabindex="-1"><a class="header-anchor" href="#平分数组" aria-hidden="true">#</a> 平分数组</h1><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>  <span class="token keyword">function</span> <span class="token function">toChineseNumber</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Number<span class="token punctuation">.</span><span class="token function">isInteger</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> n <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">throw</span> <span class="token function">Error</span><span class="token punctuation">(</span><span class="token string">&#39;请输入自然数&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">const</span> digits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;零&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;一&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;二&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;三&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;四&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;五&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;六&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;七&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;八&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;九&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> positions <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;十&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;百&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;千&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;万&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;十万&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;百万&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;千万&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;亿&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;十亿&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;百亿&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;千亿&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> charArray <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>\n    <span class="token keyword">let</span> prevIsZero <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n    <span class="token comment">// 处理0  deal zero</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> charArray<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> ch <span class="token operator">=</span> charArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">!==</span> <span class="token string">&#39;0&#39;</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>prevIsZero<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        result <span class="token operator">+=</span> digits<span class="token punctuation">[</span><span class="token function">parseInt</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+</span> positions<span class="token punctuation">[</span>charArray<span class="token punctuation">.</span>length <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">===</span> <span class="token string">&#39;0&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        prevIsZero <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">!==</span> <span class="token string">&#39;0&#39;</span> <span class="token operator">&amp;&amp;</span> prevIsZero<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">/* eslint prefer-template: 0 */</span>\n        result <span class="token operator">+=</span> <span class="token string">&#39;零&#39;</span> <span class="token operator">+</span> digits<span class="token punctuation">[</span><span class="token function">parseInt</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+</span> positions<span class="token punctuation">[</span>charArray<span class="token punctuation">.</span>length <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// 处理十 deal ten</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      result <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&#39;一十&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;十&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> result<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// 生成中文数字表格头</span>\n  <span class="token keyword">function</span> <span class="token function">initHeads</span><span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">v<span class="token punctuation">,</span>i</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token function">toChineseNumber</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// 每条数组第一列是得分，</span>\n  <span class="token comment">// 最后一条数组有效列后是总分,需要空列填充，空列有特殊样式</span>\n  <span class="token comment">// return 二维数组</span>\n  <span class="token comment">// rowLimit 不算得分列</span>\n  <span class="token keyword">function</span> <span class="token function">getTableData</span><span class="token punctuation">(</span><span class="token parameter">nums<span class="token punctuation">,</span> rowLimit<span class="token operator">=</span><span class="token number">11</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// const first = &#39;题号&#39;</span>\n    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n    <span class="token keyword">const</span> words <span class="token operator">=</span> <span class="token function">initHeads</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>\n    <span class="token comment">// words.push(&#39;总分&#39;)</span>\n    <span class="token keyword">let</span> tmpList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>words<span class="token punctuation">,</span> <span class="token string">&#39;总分&#39;</span><span class="token punctuation">]</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>tmpList<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> rowLimit<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>tmpList<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      result <span class="token operator">=</span> <span class="token function">equalSplitList</span><span class="token punctuation">(</span>tmpList<span class="token punctuation">,</span> rowLimit<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> result\n  <span class="token punctuation">}</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getTableData</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n  \n  <span class="token comment">// 题目：等分列表</span>\n  <span class="token comment">// 给定一个数组，切分输出二维数组，每条子数组长度为 m</span>\n  <span class="token comment">// input [&quot;一&quot;, &quot;二&quot;, &quot;三&quot;, &quot;四&quot;, &quot;五&quot;], m = 3</span>\n  <span class="token comment">// output [[&quot;一&quot;, &quot;二&quot;, &quot;三&quot;], [&quot;四&quot;, &quot;五&quot;, undefined]]</span>\n  <span class="token keyword">function</span> <span class="token function">equalSplitList</span><span class="token punctuation">(</span><span class="token parameter">list<span class="token punctuation">,</span> rowLimit</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n    <span class="token comment">// 1. 计算需要的行数</span>\n    <span class="token keyword">let</span> rowCount <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span>length <span class="token operator">/</span> rowLimit<span class="token punctuation">)</span>\n    <span class="token comment">// 2. 填充 length</span>\n    list<span class="token punctuation">.</span>length <span class="token operator">=</span> rowLimit <span class="token operator">*</span> rowCount\n    <span class="token comment">// 3. 分割</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> rowCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> cur <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>i <span class="token operator">*</span> rowLimit<span class="token punctuation">,</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> rowLimit<span class="token punctuation">)</span>\n      <span class="token comment">// 填充 null，以便 map 输出</span>\n      <span class="token comment">// 优化：% 取模</span>\n      <span class="token comment">//       if (i === rowCount - 1) {</span>\n      <span class="token comment">//         let n = cur.length - 1</span>\n      <span class="token comment">//         while (n &gt;= 0 &amp;&amp; cur[n] === undefined) {</span>\n      <span class="token comment">//           cur[n] = null</span>\n      <span class="token comment">//           n--</span>\n      <span class="token comment">//         }</span>\n      <span class="token comment">//       }</span>\n      result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> result\n  <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br></div></div>',2);s.render=function(n,s){return a};export default s;
