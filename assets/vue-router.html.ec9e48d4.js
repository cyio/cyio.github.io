import{r as n,o as s,c as a,a as t,w as e,F as p,b as l,d as o}from"./app.26466922.js";const c={},u=t("h1",{id:"vue-router",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#vue-router","aria-hidden":"true"},"#"),l(" vue-router")],-1),i={class:"table-of-contents"},r=l("路由原理"),k=l("basic"),d=l("数据获取时机"),b=l("路由懒加载"),m=t("h2",{id:"路由原理",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#路由原理","aria-hidden":"true"},"#"),l(" 路由原理")],-1),g=t("p",null,"hash / history",-1),h=t("p",null,"差异：",-1),v=t("ul",null,[t("li",null,"URL 显示，改变范围，历史记录显示"),t("li",null,"刷新问题"),t("li",null,"兼容性")],-1),f={href:"https://zhuanlan.zhihu.com/p/130995492",target:"_blank",rel:"noopener noreferrer"},x=l("深入理解前端中的 hash 和 history 路由 - 知乎"),q=t("h2",{id:"basic",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#basic","aria-hidden":"true"},"#"),l(" basic")],-1),w=t("li",null,[t("p",null,"为什么优先使用 router-link，首要原因是，写一次，兼容 history 和 hash 模式")],-1),y=t("li",null,[t("p",null,[l("跳转常规用法 "),t("code",null,'router-link.left(tag="div" to="/rule")')])],-1),j=t("li",null,[t("p",null,[l("模板中返回 "),t("code",null,'.left(@click="$router.go(-1)")')])],-1),V=t("li",null,[t("p",null,[l("router 非可点击元素，添加事件 "),t("code",null,'<router-link @mousedown.prevent.native="$router.push(...the path...)"></router-link>')])],-1),$=t("p",null,"history 模式，nginx 需要特殊配置，否则线上访问首页外的页面会 404",-1),_={href:"https://gist.github.com/szarapka/05ba804dfd1c10ad47bf",target:"_blank",rel:"noopener noreferrer"},S=l("NGiNX Configuration for Vue-Router in HTML5 Mode · GitHub"),z=t("li",null,[t("p",null,"导航守卫，就是页面权限处理，作用范围：全局 > 页面 > 组件")],-1),C=o('<p>单独打包 lazy-load</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>  {\n    path: &#39;/&#39;,\n    name: &#39;home&#39;,\n    component: () =&gt; import(/* webpackChunkName: &quot;home&quot; */ &#39;./views/index/Home.vue&#39;),\n  },\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="数据获取时机" tabindex="-1"><a class="header-anchor" href="#数据获取时机" aria-hidden="true">#</a> 数据获取时机</h2><p>有两种，分隔点是导航是否完成</p><ol><li>未完成 <code>beforeRouteEnter (to, from, next)</code>中的<code>next</code>之前</li><li>已完成 <code>created</code>或<code>beforeRouteEnter (to, from, next)</code>中的<code>next</code>里面 使用后者的情况是，我们需要用到<code>to from</code>，比如数据获取需要参数<code>to.params.id</code>，需要知道来源页面 然后在<code>next</code>中使用<code>vm</code>来代表实例</li></ol><ul><li><p>响应是指，改动数据就更新视图。</p></li><li><p>data 数据属性</p></li><li><p>实例属性，表达时比数据属性多个美元符号</p></li><li><p>slot 插槽，调用组件时供插入内容 ，没有插入内容时供回退显示</p></li><li><p>组件定义</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>.modal-mask\n  slot(name=&#39;body&#39;)\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>组件调用</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>  modal\n    div(slot=&#39;body&#39;)\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li><li><p>实现简单的路由（页面切换）</p></li></ul><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code>// index.html\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component</span> <span class="token attr-name">:is</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>currentView<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>component</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>',7),R={href:"https://jsfiddle.net/coligo/mfxb9aeh/",target:"_blank",rel:"noopener noreferrer"},T=l("Dynamic Components in Vue.js - JSFiddle"),H=t("blockquote",null,[t("p",null,"在 Vue 当中，组件被当作是一等公民，所以设计和完成一个 Web App 之前，最好先构思好如何构建各个组件，哪些组件需要被复用到，哪些页面是要切换的。 目录，views 页面，components 组件")],-1),L=t("ul",null,[t("li",null,"组件通信-通俗")],-1),N=t("p",null,[t("img",{src:"http://ww4.sinaimg.cn/large/4e5d3ea7jw1f2lxrgfi2lj20gj0p042z.jpg",alt:"img组件通信-通俗"})],-1),G={href:"http://gold.xitu.io/entry/55f77eb460b28e6a6f0f4f86",target:"_blank",rel:"noopener noreferrer"},J=l("稀土掘金：Vue 组件化开发实践"),M={href:"https://github.com/Justineo/vue-octicon",target:"_blank",rel:"noopener noreferrer"},A=l("Justineo/vue-octicon: Octicon component for Vue.js, using inline SVG."),D=o('<ul><li><p>局部 CSS</p><blockquote><p>Vue 文件格式可以支持局部 CSS，只要在<code>&lt;style&gt;</code>标签上加上一个 scoped 属性 避免使用，会带来不必要的麻烦，请手动使用命名空间解决</p></blockquote></li><li><p><s>派发事件<code>$dispatch</code></s></p><ol><li>在当前实例上触发</li><li>向上冒泡触发一个后停止，除非返回 true</li><li>附加参数传给回调</li></ol></li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> parent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">var</span> child1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span> parent<span class="token operator">:</span> parent <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">var</span> child2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span> parent<span class="token operator">:</span> child1 <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">var</span> child3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span> parent<span class="token operator">:</span> child2 <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\nparent<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">&#39;test&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;parent notified&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\nchild1<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">&#39;test&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;child1 notified&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\nchild2<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">&#39;test&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;child2 notified&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\nchild3<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">&#39;test&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;child3 notified&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\nchild3<span class="token punctuation">.</span><span class="token function">$dispatch</span><span class="token punctuation">(</span><span class="token string">&#39;test&#39;</span><span class="token punctuation">)</span>\n<span class="token comment">// -&gt; &quot;child3 notified&quot;</span>\n<span class="token comment">// -&gt; &quot;child2 notified&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><ul><li><p><s>广播事件<code>$broadcast</code></s></p><ol><li>广播给全部后代</li><li>各分叉传播时，触发一个后在当前分叉停止，除非返回 true</li></ol></li><li><p>切换 view 导航时，应用状态类 先定义一个当前 view 的变量 写一个方法改变 view,支持传参 点击导航时，调用改变 view 的方法，指定眺到哪个 view 最后将要应用的状态类与当前 view 变量名绑定， 实现效果就是，仅当当前 view 激活时应用状态类，其它非激活 view 的类会被移除</p></li><li><p>切换 view 后，手动将页面滚动到顶部</p><p><code>window.scrollTo(0, 0) // 这个方法放到改变视图的方法里</code></p></li><li><p>向组件传递数据 prop event slot 三种方式</p></li></ul><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-component</span> <span class="token attr-name">:foo</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>baz<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:bar</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>qux<span class="token punctuation">&quot;</span></span> <span class="token attr-name">@event-a</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>doThis<span class="token punctuation">&quot;</span></span> <span class="token attr-name">@event-b</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>doThat<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n  <span class="token comment">&lt;!-- content --&gt;</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>icon<span class="token punctuation">&quot;</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>...<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>main-text<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Hello!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-component</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ul><li>vuex 状态共享，页面少时非必要，大型 SPA 必用</li><li>如果不用 vuex，如何共享状态 <blockquote><p>把这个状态放到这两个组件共同的父组件中然后通过 prop.sync 来同步这两个组件的这个状态 在这两个组件中都放置这个状态然后通过共同父组件的一个 prop 来在父组件中调用函数执行一个 this.$dispatch 通知子组件这个状态有改动，借此来同步各个组件中的这个状态。</p></blockquote></li><li>用事件通知 prop 更新</li><li>使用 UMD 风格，实现更多支持<div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>output: {\n  library: &#39;ComponentName&#39;,\n  libraryTarget: &#39;umd&#39;\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li></ul><h2 id="路由懒加载" tabindex="-1"><a class="header-anchor" href="#路由懒加载" aria-hidden="true">#</a> 路由懒加载</h2><p>Vue 异步组件，工厂函数 渲染时才触发</p><p>代码分割</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',9),E={href:"https://juejin.cn/post/6844904169954869262",target:"_blank",rel:"noopener noreferrer"},F=l("vue-router原理及其核心功能实现");c.render=function(l,o){const c=n("RouterLink"),O=n("OutboundLink");return s(),a(p,null,[u,t("nav",i,[t("ul",null,[t("li",null,[t(c,{to:"#路由原理"},{default:e((()=>[r])),_:1})]),t("li",null,[t(c,{to:"#basic"},{default:e((()=>[k])),_:1})]),t("li",null,[t(c,{to:"#数据获取时机"},{default:e((()=>[d])),_:1})]),t("li",null,[t(c,{to:"#路由懒加载"},{default:e((()=>[b])),_:1})])])]),m,g,h,v,t("p",null,[t("a",f,[x,t(O)])]),q,t("ul",null,[w,y,j,V,t("li",null,[$,t("p",null,[t("a",_,[S,t(O)])])]),z]),C,t("p",null,[t("a",R,[T,t(O)])]),H,L,N,t("p",null,[t("a",G,[J,t(O)])]),t("p",null,[t("a",M,[A,t(O)])]),D,t("p",null,[t("a",E,[F,t(O)])])],64)};export default c;
