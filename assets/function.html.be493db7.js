import{r as n,o as s,c as a,a as p,w as e,F as t,b as o,d as c}from"./app.26466922.js";const l={},u=p("h1",{id:"函数",tabindex:"-1"},[p("a",{class:"header-anchor",href:"#函数","aria-hidden":"true"},"#"),o(" 函数")],-1),r={class:"table-of-contents"},i=o("调用模式"),k=o("this 指向"),b=o("修改 this 和参数"),d=o("apply 和 call"),m=o("bind 固定 this"),h=o("防抖和节流 dt"),f=o("构造函数"),g=o("继承"),y=c('<h2 id="调用模式" tabindex="-1"><a class="header-anchor" href="#调用模式" aria-hidden="true">#</a> 调用模式</h2><ul><li>方法调用模式</li><li>函数调用模式</li><li>构造器调用模式</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 定义一个对象</span>\n<span class="token keyword">var</span> myObject <span class="token operator">=</span> <span class="token punctuation">{</span>\n  value<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n  <span class="token comment">// 函数作为属性时称之为方法</span>\n  <span class="token function-variable function">increment</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">inc</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">+=</span> <span class="token keyword">typeof</span> inc <span class="token operator">===</span> <span class="token string">&#39;number&#39;</span> <span class="token operator">?</span> inc <span class="token operator">:</span> <span class="token number">1</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 函数以方法形式调用时，this指向所属对象</span>\nmyObject<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\ndocument<span class="token punctuation">.</span><span class="token function">writeln</span><span class="token punctuation">(</span>myObject<span class="token punctuation">.</span>value<span class="token punctuation">)</span>\n\n<span class="token keyword">var</span> <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> a <span class="token operator">+</span> b\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 定义一个double方法（属性）</span>\nmyObject<span class="token punctuation">.</span><span class="token function-variable function">double</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 解决方法</span>\n  <span class="token keyword">var</span> that <span class="token operator">=</span> <span class="token keyword">this</span>\n  <span class="token comment">// 定义一个内部函数，并访问外部函数的属性</span>\n  <span class="token keyword">var</span> <span class="token function-variable function">helper</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    that<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span>that<span class="token punctuation">.</span>value<span class="token punctuation">,</span> that<span class="token punctuation">.</span>value<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">//以函数的形式调用helper时，this指向全局对象</span>\n  <span class="token function">helper</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">//每运行一次value翻倍</span>\nmyObject<span class="token punctuation">.</span><span class="token function">double</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\ndocument<span class="token punctuation">.</span><span class="token function">writeln</span><span class="token punctuation">(</span>myObject<span class="token punctuation">.</span>value<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br></div></div><ul><li>未知参数名，只知道位置</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">tmp</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span>args<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">tmp</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="this-指向" tabindex="-1"><a class="header-anchor" href="#this-指向" aria-hidden="true">#</a> this 指向</h2><blockquote><p>统一理解成指向所属对象，function 所属对象是全局 window，被 new 调用时，所属对象是新对象</p></blockquote><ul><li><p>方法调用，<code>this</code>指向所属对象</p></li><li><p>函数调用，<code>this</code>指向全局对象(事实上是上面的特例)</p><p>嵌套函数时，内部函数的<code>this</code> 依然指向全局对象（这是一个设计错误，理应指向外部函数的<code>this</code>），解决办法是在外部函数写<code>var that = this</code>，所以遇上嵌套函数就需要解决<code>this</code>指向，遇上是否需要解决<code>this</code>指向就看是不是嵌套函数</p></li><li><p>构造器调用，<code>this</code>指向<code>new</code>出来的新对象（注意不是新函数）</p></li><li><p>函数总是返回一个值，如果没有指定返回值，则返回<code>undefined</code> 如果函数调用时在前面加上了<code>new</code>前缀，且返回值不是一个对象，则返回<code>this</code>(该新对象)</p></li></ul><h2 id="修改-this-和参数" tabindex="-1"><a class="header-anchor" href="#修改-this-和参数" aria-hidden="true">#</a> 修改 this 和参数</h2><h3 id="apply-和-call" tabindex="-1"><a class="header-anchor" href="#apply-和-call" aria-hidden="true">#</a> apply 和 call</h3><ul><li>apply 这个方法常常被用于转换参数形式以调用函数 <ul><li>每个函数都拥有<code>this</code>变量和<code>arguments</code>变量，正常来说，调用函数的时候要传递一些逗号分隔的参数，<code>this</code> 的取值是由调用的上下文决定的。</li><li><code>apply</code>方法可以直接显式的确定函数运行时的<code>this</code>和<code>arguments</code></li></ul></li><li>函数的<code>call</code>和<code>apply</code>在使用上的最大差异便是一个在首参数后传入各个参数，一个是在首参数后传入一个包含所有参数的数组</li><li>可用于实现继承</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> allNumbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">56</span><span class="token punctuation">]</span>\n<span class="token comment">// Using the apply () method, we can pass the array of numbers:​</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> allNumbers<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 56</span>\n<span class="token comment">// or es6</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token operator">...</span>allNumbers<span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="bind-固定-this" tabindex="-1"><a class="header-anchor" href="#bind-固定-this" aria-hidden="true">#</a> bind 固定 this</h3><p><code>call apply bind</code>是相似的，<code>bind</code>是 ES5 增加的，可为函数调用固定<code>this</code>或参数</p><p>不同点在于，bind 方法不会立即执行，而是返回一个改变了上下文 this 后的函数</p>',15),v={href:"https://gist.github.com/cyio/bd17078f271eef9890d048d36ca4a0c4",target:"_blank",rel:"noopener noreferrer"},w=o("实现 bind 方法，用于不支持 ES5 的浏览器"),j={href:"https://javascript.info/bind",target:"_blank",rel:"noopener noreferrer"},x=o("Function binding"),_=c('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// Credit to Douglas Crockford for this bind method</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>bind<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 如果不存在 bind 方法</span>\n  <span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">bind</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">oThis</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">this</span> <span class="token operator">!==</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// bind 方法的调用对象只能是函数，如果不是则抛出异常</span>\n      <span class="token comment">// closest thing possible to the ECMAScript 5 internal IsCallable function​</span>\n      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span>\n        <span class="token string">&#39;Function.prototype.bind - what is trying to be bound is not callable&#39;</span>\n      <span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">var</span> aArgs <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 浅复制 bind 的参数，从第 2 个开始到结束 http://stackoverflow.com/a/26618338/5657916</span>\n      fToBind <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">,</span>\n      <span class="token function-variable function">fNOP</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// no operation 无操作函数</span>\n      <span class="token function-variable function">fBound</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 要返回的函数，用 apply 方法绑定 this</span>\n        <span class="token keyword">return</span> <span class="token function">fToBind</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>\n          <span class="token keyword">this</span> <span class="token keyword">instanceof</span> <span class="token class-name">fNOP</span> <span class="token operator">&amp;&amp;</span> oThis <span class="token comment">// 待返回函数与构造函数原型是否一致，oThis 参数是否存在</span>\n            <span class="token operator">?</span> <span class="token keyword">this</span> <span class="token comment">// 直接使用 bind 的调用对象</span>\n            <span class="token operator">:</span> oThis<span class="token punctuation">,</span> <span class="token comment">// 使用指定 this</span>\n          aArgs<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">)</span>\n        <span class="token punctuation">)</span> <span class="token comment">// 合并两个方法的参数</span>\n      <span class="token punctuation">}</span> <span class="token comment">// var end</span>\n\n    fNOP<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>prototype\n    fBound<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">fNOP</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n    <span class="token keyword">return</span> fBound\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div>',1),S={href:"http://javascriptissexy.com/javascript-apply-call-and-bind-methods-are-essential-for-javascript-professionals/",target:"_blank",rel:"noopener noreferrer"},q=o("JavaScript’s Apply, Call, and Bind Methods are Essential for JavaScript Professionals | JavaScript is Sexy"),O=c('<p>bind 借用函数，比如类数组借用数组方法</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> mike <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;MIKE&#39;</span><span class="token punctuation">,</span>\n  <span class="token function-variable function">say</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">var</span> joy <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;JOY&#39;</span>\n<span class="token punctuation">}</span>\n\nmike<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// MIKE</span>\nmike<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>joy<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// JOY，this 指向被改成 joy</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h2 id="防抖和节流-dt" tabindex="-1"><a class="header-anchor" href="#防抖和节流-dt" aria-hidden="true">#</a> 防抖和节流 dt</h2><blockquote><p>debounce/throttle</p></blockquote><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>50ms\n1 - 10ms - 2 - 10ms - 3 - 10ms - 4 - 10ms - 5 - 10ms - 6\ndebounce ---- 6 //  1 执行后不再点击(空闲)，执行 6，否则会延迟\nthrottle 1 -- 6 //  1 执行后的后续点击，不影响 6 的执行\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><table><thead><tr><th>异同</th><th>debounce</th><th>throttle</th></tr></thead><tbody><tr><td>用途</td><td>延迟、等待</td><td>过滤</td></tr><tr><td>立刻执行一次</td><td>否</td><td>是</td></tr></tbody></table><ul><li>都是为了限制一定时间内执行频率，一般用于减少用户输入引起的函数调用次数</li><li>从用途上思考，是要延迟、还是过滤</li><li>debounce 一般是用户输入，throttle 一般如 scroll 等浏览器事件</li><li><code>_.debounce(fn, true) </code>过滤意外点击，空闲 m 秒才执行一次，而 throttle 后续事件还是会执行，不会等空闲，而是保证一定频率，m 秒内不超过 n 次</li><li>提交按钮点击，希望过滤掉误点(短时间内几次)，只执行一次，两个方法都能通过配置参数满足，但不准确符合，建议用一个开始标记解决。只有特定场景有明显区别，比如一直触发，是否需要执行</li><li>throttle 无论触发多频繁，都按照设定频率执行，resize</li></ul>',7),T=o("拿这个例子，各点两次，观察区别 "),A={href:"https://jsfiddle.net/missinglink/19e2r2we/",target:"_blank",rel:"noopener noreferrer"},C=o("Underscore.js throttle vs debounce example - JSFiddle - Code Playground"),J={href:"https://blog.csdn.net/web_xyk/article/details/80165824",target:"_blank",rel:"noopener noreferrer"},B=o("js节流与防抖，防止重复提交、防止频繁重复点击_web_xyk的专栏-CSDN博客"),D={href:"https://codepen.io/cyio/pen/VwaROLG?editors=1111",target:"_blank",rel:"noopener noreferrer"},E=o("lodash's debounce throttle different when submit button click"),F={href:"https://redd.one/blog/debounce-vs-throttle",target:"_blank",rel:"noopener noreferrer"},N=o("Debounce vs Throttle: Definitive Visual Guide | Redd Developer"),M=o("react hook 中应用，注意不能在 hook 外使用，每次渲染会重生成 "),P={href:"https://www.freecodecamp.org/news/debounce-and-throttle-in-react-with-hooks/",target:"_blank",rel:"noopener noreferrer"},I=o("How to Use Debounce and Throttle in React and Abstract them into Hooks"),R=c('<ol><li>函数防抖是只有足够的空闲时间，才执行一次代码 <blockquote><p>bounce 是弹跳抖的意思，debounce 去抖动，平稳</p></blockquote></li></ol><p>函数防抖的要点，也是需要一个<code>setTimeout</code>来辅助实现。延迟执行需要跑的代码。 如果方法多次触发，则把上次记录的延迟执行代码用<code>clearTimeout</code>清掉，重新开始。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token boolean">false</span>\ndocument<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function-variable function">onscroll</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token comment">// 1. 频繁触发则取消 2. 当滚动停止超过 300 MS，即没有新的触发，不清除定时器，预约代码得以执行</span>\n\n  timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;函数防抖&#39;</span><span class="token punctuation">,</span> <span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><ol start="2"><li><p>函数节流是限制一定时间内最大执行次数</p><blockquote><p>throat 喉咙</p></blockquote><blockquote><p>注意，在满足条件后使用，而不是之前，比如滚动时使用，会导致条件满足延迟</p></blockquote><blockquote><p>使用场景，如监听滚动计算位置，用户拖拽</p></blockquote></li></ol><p>函数节流的要点是，声明一个变量当标志位，记录当前代码是否在执行。 如果空闲，则可以正常触发方法执行。 如果代码正在执行，则取消这次方法执行，直接 return。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> canScroll <span class="token operator">=</span> <span class="token boolean">true</span>\ndocument<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;throttle&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function-variable function">onScroll</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>canScroll<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span>\n  <span class="token punctuation">}</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;立刻执行一次&#39;</span><span class="token punctuation">)</span>\n  canScroll <span class="token operator">=</span> <span class="token boolean">false</span>\n  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;函数节流&#39;</span><span class="token punctuation">)</span>\n    canScroll <span class="token operator">=</span> <span class="token boolean">true</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div>',6),U={href:"https://blog.coding.net/blog/the-difference-between-throttle-and-debounce-in-underscorejs",target:"_blank",rel:"noopener noreferrer"},L=o("浅谈 Underscore.js 中 throttle 和 debounce 的差异 - Coding 博客"),V={href:"https://www.zcfy.cc/article/debouncing-and-throttling-explained-through-examples-css-tricks",target:"_blank",rel:"noopener noreferrer"},z=o("通过例子来对比 Debouncing,Throttling，requestAnimationFrame | CSS-Tricks - 众成翻译"),G={href:"https://github.com/mqyqingfeng/Blog/issues/26",target:"_blank",rel:"noopener noreferrer"},H=o("JavaScript 专题之跟着 underscore 学节流 · Issue #26 · mqyqingfeng/Blog"),K=c('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">pipe</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>fns</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token parameter">x</span> <span class="token operator">=&gt;</span> fns<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">y<span class="token punctuation">,</span> f</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">f</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span>\n<span class="token keyword">const</span> <span class="token function-variable function">g</span> <span class="token operator">=</span> <span class="token parameter">n</span> <span class="token operator">=&gt;</span> n <span class="token operator">+</span> <span class="token number">1</span>\n<span class="token keyword">const</span> <span class="token function-variable function">f</span> <span class="token operator">=</span> <span class="token parameter">n</span> <span class="token operator">=&gt;</span> n <span class="token operator">*</span> <span class="token number">2</span>\n<span class="token keyword">const</span> h <span class="token operator">=</span> <span class="token function">pipe</span><span class="token punctuation">(</span>\n  g<span class="token punctuation">,</span>\n  f\n<span class="token punctuation">)</span>\n<span class="token function">h</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token comment">// 42</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="构造函数" tabindex="-1"><a class="header-anchor" href="#构造函数" aria-hidden="true">#</a> 构造函数</h2><p>作用：生成对象（自定义类型，在当于 JAVA 中的类），动态地声明大量具有类似属性和方法的Javascript对象</p><p>所有 JS 函数者有 <code>prototype</code>，指向构建函数的原型对象</p><p>所有字面量声明的对象，都有<code>__proto__</code></p><p>箭头函数，不能作为构造函数，没有<code>prototype</code>属性</p><p>Object 的原型是 null</p><p>Array,String,Date,RegExp 等二级类型，继承自 Object</p><h3 id="继承" tabindex="-1"><a class="header-anchor" href="#继承" aria-hidden="true">#</a> 继承</h3><p>组合式继承是比较常用的一种继承方法，其背后的思路是 使用原型链实现对原型属性和方法的继承，而通过借用构造函数来实现对实例属性的继承。这样，既通过在原型上定义方法实现了函数复用，又保证每个实例都有它自己的属性。</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Function =&gt; Class\nnew =&gt; extends\n\n// 解决子类向父类传递参数问题\nparent.call()\n\nsuper\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div>',11);l.render=function(o,c){const l=n("RouterLink"),Y=n("OutboundLink");return s(),a(t,null,[u,p("nav",r,[p("ul",null,[p("li",null,[p(l,{to:"#调用模式"},{default:e((()=>[i])),_:1})]),p("li",null,[p(l,{to:"#this-指向"},{default:e((()=>[k])),_:1})]),p("li",null,[p(l,{to:"#修改-this-和参数"},{default:e((()=>[b])),_:1}),p("ul",null,[p("li",null,[p(l,{to:"#apply-和-call"},{default:e((()=>[d])),_:1})]),p("li",null,[p(l,{to:"#bind-固定-this"},{default:e((()=>[m])),_:1})])])]),p("li",null,[p(l,{to:"#防抖和节流-dt"},{default:e((()=>[h])),_:1})]),p("li",null,[p(l,{to:"#构造函数"},{default:e((()=>[f])),_:1}),p("ul",null,[p("li",null,[p(l,{to:"#继承"},{default:e((()=>[g])),_:1})])])])])]),y,p("p",null,[p("a",v,[w,p(Y)]),p("a",j,[x,p(Y)])]),_,p("p",null,[p("a",S,[q,p(Y)])]),O,p("p",null,[T,p("a",A,[C,p(Y)])]),p("p",null,[p("a",J,[B,p(Y)])]),p("p",null,[p("a",D,[E,p(Y)])]),p("p",null,[p("a",F,[N,p(Y)])]),p("p",null,[M,p("a",P,[I,p(Y)])]),R,p("p",null,[p("a",U,[L,p(Y)])]),p("p",null,[p("a",V,[z,p(Y)])]),p("p",null,[p("a",G,[H,p(Y)])]),K],64)};export default l;
