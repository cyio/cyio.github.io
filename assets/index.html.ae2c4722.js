import{r as t,o as l,c as e,a as n,w as a,F as r,b as d,d as i}from"./app.09b8f80a.js";const o={},u=n("h1",{id:"算法",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#算法","aria-hidden":"true"},"#"),d(" 算法")],-1),h={class:"table-of-contents"},p=d("学习方法论"),s=d("复杂度"),c=d("程序性能"),f=d("Big O notation"),b=d("枚举"),g=d("二分查找"),m=d("模式识别"),O=n("h2",{id:"学习方法论",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#学习方法论","aria-hidden":"true"},"#"),d(" 学习方法论")],-1),_=n("li",null,[n("p",null,"学习方式，手打，纸上推演，死记硬背，理解训练")],-1),x=n("li",null,[n("p",null,"复杂的，脑子里第一时间要想到图，可视化")],-1),k=n("li",null,[n("p",null,"纸上编码的能力很重要")],-1),v=n("li",null,[n("p",null,"代码熟练工与优秀开发者之间的选择")],-1),w=n("li",null,[n("p",null,"大部分时间用不到，有一定数据规模时，算法的作用才会显现")],-1),y=n("li",null,[n("p",null,"前置依赖，数学、逻辑，否则学起来吃力")],-1),j=n("p",null,"先想出保底方法再优化 算法和编码分开，先想出解法，道具 举例 针对特殊用例优化",-1),z={href:"https://visualgo.net/zh",target:"_blank",rel:"noopener noreferrer"},S=d("VisuAlgo - 数据结构和算法动态可视化 (Chinese)"),B=n("p",null,[n("img",{src:"https://camo.githubusercontent.com/7a1f227eb672dfeb7ad558b44471c2ebea0a191594b34fa9f17775945518c678/687474703a2f2f7265736f757263652e6d757969792e636e2f696d6167652f32303230303631363030303630342e706e67",alt:"mindmap"})],-1),C=n("h2",{id:"复杂度",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#复杂度","aria-hidden":"true"},"#"),d(" 复杂度")],-1),G=n("img",{src:"https://i.stack.imgur.com/jIGhf.png",alt:"jIGhf.png (835×579)"},null,-1),L={href:"https://stackoverflow.com/questions/2307283/what-does-olog-n-mean-exactly",target:"_blank",rel:"noopener noreferrer"},A=d("algorithm - What does O(log n) mean exactly? - Stack Overflow"),I=n("li",null,"评估算法优劣，反映运行时间或占用存储空间随输入规模增长而增长的量级",-1),M=n("li",null,[d("空间复杂度： 衡量运行时存储空间的占用，一般用大写 S(pace) "),n("ul",null,[n("li",null,"内存有限制，需要选择更少内存方案"),n("li",null,"评估能解决多大规模问题")])],-1),W=d("时间复杂度： 定性描述算法运行时间的函数，一般用大写 O(peration) - 时间限制，避免陷入死循环 - 需要实时响应 "),q={href:"https://blog.csdn.net/zolalad/article/details/11848739",target:"_blank",rel:"noopener noreferrer"},D=d("算法的时间复杂度和空间复杂度-总结 - CSDN 博客"),F={href:"https://juejin.im/post/5c174198f265da611036f4ea",target:"_blank",rel:"noopener noreferrer"},H=d("冰与火之歌：「时间」与「空间」复杂度 - 掘金"),J=i('<h3 id="程序性能" tabindex="-1"><a class="header-anchor" href="#程序性能" aria-hidden="true">#</a> 程序性能</h3><ul><li>用操作数和执行步数来估计程序的运行时间。用符号法来分别描述程序在最好、最坏和平均情况下的运行时间。</li><li>程序性能指需要内存和时间的多少</li><li>两种分析方法：分析和测量（实验）</li><li>实例特征，包含着可以决定程序空间大小的因素（如，输入和输出的数量或相关数的大小）。例如，对 n 个元素排序的程序，它所需要的空间大小是 n 的函数，n 为其实例特征。</li><li>相对来说，指令空间的大小受实例特征的影响不大。常量及简单变量所需要的空间与实例特征也没有多大关系，除非相关数的规模对于选定的数据类型来说实在太大。一些动态分配空间也可以不依赖实例特征。环境栈的大小一般不依赖实例特征，除非使用了递归函数。当使用递归函数时，实例特征通常影响（但不总是）环境栈的大小。</li><li>递归函数所需要的栈空间通常称为递归栈空间。它的大小依赖于局部变量和形式参数所需要的空间，依赖于递归的最大深度和编译器。</li></ul><h3 id="big-o-notation" tabindex="-1"><a class="header-anchor" href="#big-o-notation" aria-hidden="true">#</a> Big O notation</h3><table><thead><tr><th>符号</th><th>数学描述</th></tr></thead><tbody><tr><td>O(1)</td><td>常数</td></tr><tr><td>O(log n)</td><td>对数</td></tr><tr><td>O(n)</td><td>线性</td></tr><tr><td>O(n^2)</td><td>平方</td></tr><tr><td>O(n^3)</td><td>立方</td></tr><tr><td>O(2^n)</td><td>指数</td></tr><tr><td>O(n!)</td><td>阶乘</td></tr></tbody></table><p>有多个复杂度时，只看最高复杂度</p><table><thead><tr><th>算法</th><th>复杂度</th></tr></thead><tbody><tr><td>递归</td><td>O(2^n)</td></tr><tr><td>二分</td><td>O(log n)</td></tr><tr><td>二叉树遍历</td><td>O(n)</td></tr><tr><td>优化排序矩阵查找</td><td>O(n)</td></tr><tr><td>归并、快排</td><td>O(n log n)</td></tr></tbody></table>',6),N={href:"https://en.wikipedia.org/wiki/Master_theorem_analysis_of_algorithms",target:"_blank",rel:"noopener noreferrer"},R=d("Master theorem (analysis of algorithms) - Wikipedia"),V=i('<p><code>O(n log n)</code> 念什么？</p><p><code>2^n</code>和<code>n^2</code>，谁大，指数 n &gt; 2，随着 n 变大，前者会远大于后者</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>2 ** 10 = 1024\n10 * 10 = 100\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="枚举" tabindex="-1"><a class="header-anchor" href="#枚举" aria-hidden="true">#</a> 枚举</h2><ul><li><p>合理设置尝试范围，减少不必要尝试。例：完美立方 四重循环</p></li><li><p>链表 -- 两个 next --&gt; 树 -- 节点指回 -&gt; 图</p><p>无单个子节点，完全二叉树</p><p>二叉搜索树，有序，空树，左子树(所有)，右子树(所有)，根结点，查找 O(n) =&gt; O(log(n))，退化 O(n)，只有一侧树 =》平衡</p></li></ul>',5),E={href:"https://zhuanlan.zhihu.com/p/74584796",target:"_blank",rel:"noopener noreferrer"},K=d("优秀程序员都应该学习的数据结构与算法项目（GitHub 开源清单） - 知乎"),P=n("ul",null,[n("li",null,[n("p",null,"测试用例，单步验证"),n("p",null,"暴力解法"),n("p",null,"解题线索，解题模板")])],-1),Q={href:"https://www.jianshu.com/p/8876704ea9c8",target:"_blank",rel:"noopener noreferrer"},T=d("LeetCode 算法题刷题心得（JavaScript） - 简书"),U=i('<h2 id="二分查找" tabindex="-1"><a class="header-anchor" href="#二分查找" aria-hidden="true">#</a> 二分查找</h2><ul><li><p>猜 1-1000 之间的一个数，猜多少次 <code>2 ** 10 = 1024</code></p><p>有序 比较中点 范围减半</p></li></ul><h2 id="模式识别" tabindex="-1"><a class="header-anchor" href="#模式识别" aria-hidden="true">#</a> 模式识别</h2><p>一旦涉及出现次数，需要用到 hash</p><p>构造子串，hash 存下标</p><p>涉及子串，考虑滑动窗口</p><p>深度优先：递归 + 回溯</p><p>广度优先：队列 + 追加，解决从 A 到 B 路径查找，循环检测</p><p>图：点 + 边，树是一种特殊的图</p>',9);o.render=function(d,i){const o=t("RouterLink"),X=t("OutboundLink");return l(),e(r,null,[u,n("nav",h,[n("ul",null,[n("li",null,[n(o,{to:"#学习方法论"},{default:a((()=>[p])),_:1})]),n("li",null,[n(o,{to:"#复杂度"},{default:a((()=>[s])),_:1}),n("ul",null,[n("li",null,[n(o,{to:"#程序性能"},{default:a((()=>[c])),_:1})]),n("li",null,[n(o,{to:"#big-o-notation"},{default:a((()=>[f])),_:1})])])]),n("li",null,[n(o,{to:"#枚举"},{default:a((()=>[b])),_:1})]),n("li",null,[n(o,{to:"#二分查找"},{default:a((()=>[g])),_:1})]),n("li",null,[n(o,{to:"#模式识别"},{default:a((()=>[m])),_:1})])])]),O,n("ul",null,[_,x,k,v,w,y,n("li",null,[j,n("p",null,[n("a",z,[S,n(X)])])])]),B,C,n("p",null,[G,n("a",L,[A,n(X)])]),n("ul",null,[I,M,n("li",null,[W,n("a",q,[D,n(X)]),n("a",F,[H,n(X)])])]),J,n("p",null,[n("a",N,[R,n(X)])]),V,n("p",null,[n("a",E,[K,n(X)])]),P,n("p",null,[n("a",Q,[T,n(X)])]),U],64)};export default o;
