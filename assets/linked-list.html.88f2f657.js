import{r as a,o as l,c as e,a as n,w as r,F as i,b as t,d as p}from"./app.26466922.js";const u={},h=n("h1",{id:"链表",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#链表","aria-hidden":"true"},"#"),t(" 链表")],-1),d={class:"table-of-contents"},o=t("基础"),s=t("与数组区别"),c=t("迭代"),f=t("练习/重考察实现"),b=p('<h2 id="基础" tabindex="-1"><a class="header-anchor" href="#基础" aria-hidden="true">#</a> 基础</h2><p>定义：节点集合，每个节点使用对象引用指向其后继，这个引用叫做链</p><p>线性集合，不按照元素的物理顺序排列，而是每个元素有指向，高效插入和移除通过遍历</p><p>JS 中数组效率低（实现成了对象，与其它语言有别），除了随机访问，都可以用链表替换一维数组</p><p>插入和删除操作展示出高效率，因为只是<strong>调整引用指向</strong></p><p>缺点是访问慢（如随机）</p><p>有哪些操作方法？可以从增删改查来推导</p><p>具有递归特性，题目常用递归解决</p>',8),x=t("前端没有多少实际用途 "),k={href:"https://zhuanlan.zhihu.com/p/61935862",target:"_blank",rel:"noopener noreferrer"},O=t("前端应用数据结构：何时使用链表 - 知乎"),_=p('<p>内存连续，指针/引用</p><h2 id="与数组区别" tabindex="-1"><a class="header-anchor" href="#与数组区别" aria-hidden="true">#</a> 与数组区别</h2><ul><li>链表-插入删除快 O(1)，随机访问 O(n)</li><li>数组-下标随机访问 O(1)，查找二分 O(log n)</li></ul><h2 id="迭代" tabindex="-1"><a class="header-anchor" href="#迭代" aria-hidden="true">#</a> 迭代</h2><p>cur = cur.next</p><h2 id="练习-重考察实现" tabindex="-1"><a class="header-anchor" href="#练习-重考察实现" aria-hidden="true">#</a> 练习/重考察实现</h2><blockquote><p>写起来很容易错，需要考虑很多、多练习，避免易犯错误</p></blockquote><ul><li><p>反转链表 | 交换相邻节点</p></li><li><p>判断是否有环，硬做 1s | set 判重 | 快慢碰撞</p></li><li><p>两个有序的链表合并</p></li><li><p>删除链表倒数第 n 个节点</p></li><li><p>求链表的中间节点</p></li></ul>',8);u.render=function(t,p){const u=a("RouterLink"),g=a("OutboundLink");return l(),e(i,null,[h,n("nav",d,[n("ul",null,[n("li",null,[n(u,{to:"#基础"},{default:r((()=>[o])),_:1})]),n("li",null,[n(u,{to:"#与数组区别"},{default:r((()=>[s])),_:1})]),n("li",null,[n(u,{to:"#迭代"},{default:r((()=>[c])),_:1})]),n("li",null,[n(u,{to:"#练习-重考察实现"},{default:r((()=>[f])),_:1})])])]),b,n("blockquote",null,[n("p",null,[x,n("a",k,[O,n(g)])])]),_],64)};export default u;
