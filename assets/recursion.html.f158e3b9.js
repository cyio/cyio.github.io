import{r as n,o as a,c as s,a as e,w as p,F as t,b as l,d as o}from"./app.31fc93bc.js";const c={},u=e("h1",{id:"递归",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#递归","aria-hidden":"true"},"#"),l(" 递归")],-1),i={class:"table-of-contents"},r=l("概念"),d=l("斐波那契数列"),k=l("数据按序请求"),b=l("爬楼梯"),h=l("堆栈溢出"),m=l("优化"),f=l("调试"),g=e("h2",{id:"概念",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#概念","aria-hidden":"true"},"#"),l(" 概念")],-1),x=e("p",null,[e("img",{src:"http://tva1.sinaimg.cn/large/4e5d3ea7ly1gywlbbqi6aj20im07uq39.jpg",alt:"image.png"})],-1),v=e("li",null,"递归由基本部分和递归部分组成，基础部分直接定义（即不用递归就能求解），递归部分可以通过参数减小转换为基础部分，递归部分的每一次应用都更接近基础部分，最后一次应用基础部分。",-1),y=e("li",null,"一种循环形式，在函数定义内调用自身",-1),_=e("li",null,"相似的特征，归纳，递归步骤，常见嵌套循环，外循环递增，内循环递减",-1),w=l("边界条件 "),j={href:"http://io.upyun.com/2016/04/05/recursion/",target:"_blank",rel:"noopener noreferrer"},q=l("谈谈递归"),O=o('<li>递推公式 + 终止条件</li><li>去的过程叫 递，回来的过程叫 归，电影院查座位<div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>f(1) = 1\nf(n) = f(n - 1) + 1\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li>',2),L=e("h2",{id:"斐波那契数列",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#斐波那契数列","aria-hidden":"true"},"#"),l(" 斐波那契数列")],-1),R={href:"https://leetcode-cn.com/problems/fibonacci-number/",target:"_blank",rel:"noopener noreferrer"},F=l("509. 斐波那契数 - 力扣（LeetCode）"),C=o('<p>初始值是 0 1 或 1 1</p><h2 id="数据按序请求" tabindex="-1"><a class="header-anchor" href="#数据按序请求" aria-hidden="true">#</a> 数据按序请求</h2><p>数组+Finally+递归</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> ids <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">34112</span><span class="token punctuation">,</span> <span class="token number">98325</span><span class="token punctuation">,</span> <span class="token number">68125</span><span class="token punctuation">]</span>\n<span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">sendRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> id <span class="token operator">=</span> ids<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>id<span class="token punctuation">)</span> <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;finished&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 终止条件</span>\n  $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span> url<span class="token operator">:</span> <span class="token string">&#39;/get&#39;</span><span class="token punctuation">,</span> data<span class="token operator">:</span> <span class="token punctuation">{</span> id <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">always</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">//do sth.</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;finished&#39;</span><span class="token punctuation">)</span>\n    <span class="token function">sendRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 递归调用</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div>',4),$={href:"http://caibaojian.com/data-structures-and-algorithms.html",target:"_blank",rel:"noopener noreferrer"},z=l("我接触过的前端数据结构与算法-前端开发博客"),A=o('<h2 id="爬楼梯" tabindex="-1"><a class="header-anchor" href="#爬楼梯" aria-hidden="true">#</a> 爬楼梯</h2><p>走法分两种，即第一步走 1 个台阶或 2 个台阶</p><p>n 个台阶走法，转化为减掉最后一步的台阶走法之和</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>f(n) = f(n-1) + f(n-2)\n\nf(2) = 2\nf(1) = 1\nf(0) = 0 // 无意义\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="堆栈溢出" tabindex="-1"><a class="header-anchor" href="#堆栈溢出" aria-hidden="true">#</a> 堆栈溢出</h2><blockquote><p>函数调用会使用栈来保存临时变量。每调用一个函数，都会将临时变量封装为栈帧压 入内存栈，等函数执行完成返回时，才出栈。系统栈或者虚拟机栈空间一般都不大。如果 递归求解的数据规模很大，调用层次很深，一直压入栈，就会有堆栈溢出的风险。 出自：10 | 递归：如何用三行代码找到“最终推荐人”？</p></blockquote><p>应对：限制递归深度</p><h2 id="优化" tabindex="-1"><a class="header-anchor" href="#优化" aria-hidden="true">#</a> 优化</h2><p>重复计算：memo</p><p>转为非递归，本质并没有变</p><p>记忆化递归，时间由 O(n^2) 降到 O(n)</p><p>滚动数组，可以将空间由 O(n) 降到 O(1)</p><h2 id="调试" tabindex="-1"><a class="header-anchor" href="#调试" aria-hidden="true">#</a> 调试</h2><ol><li><p>打印日志发现，递归值。</p></li><li><p>结合条件断点进行调试。</p></li></ol><p>代入较小的数枚举验证</p>',15);c.render=function(l,o){const c=n("RouterLink"),B=n("OutboundLink");return a(),s(t,null,[u,e("nav",i,[e("ul",null,[e("li",null,[e(c,{to:"#概念"},{default:p((()=>[r])),_:1})]),e("li",null,[e(c,{to:"#斐波那契数列"},{default:p((()=>[d])),_:1})]),e("li",null,[e(c,{to:"#数据按序请求"},{default:p((()=>[k])),_:1})]),e("li",null,[e(c,{to:"#爬楼梯"},{default:p((()=>[b])),_:1})]),e("li",null,[e(c,{to:"#堆栈溢出"},{default:p((()=>[h])),_:1})]),e("li",null,[e(c,{to:"#优化"},{default:p((()=>[m])),_:1})]),e("li",null,[e(c,{to:"#调试"},{default:p((()=>[f])),_:1})])])]),g,x,e("ul",null,[v,y,_,e("li",null,[w,e("a",j,[q,e(B)])]),O]),L,e("p",null,[e("a",R,[F,e(B)])]),C,e("p",null,[e("a",$,[z,e(B)])]),A],64)};export default c;
