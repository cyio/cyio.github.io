import{r as n,o as s,c as a,a as p,w as e,F as t,b as o,d as c}from"./app.0e74f851.js";const l={},u=p("h1",{id:"数据结构",tabindex:"-1"},[p("a",{class:"header-anchor",href:"#数据结构","aria-hidden":"true"},"#"),o(" 数据结构")],-1),r={class:"table-of-contents"},i=o("简单数据结构"),k=o("处理二维数组"),b=o("阶乘"),m=o("数据结构、算法与应用（原书第 2 版）"),d=o("练习 21"),f=o("练习 23"),g=c('<h2 id="简单数据结构" tabindex="-1"><a class="header-anchor" href="#简单数据结构" aria-hidden="true">#</a> 简单数据结构</h2><ul><li>有序：栈、队列、链表，省空间（存储空间小）</li><li>无序：集合、字典、散列表，省时间（读取时间快）</li></ul><p>对于简单数据结构，在 ES 中对应的是数组（ Array ）和对象（ Object ）。可以想一下， 数组的存储是有序的，对象的存储是无序的，但是我要在对象中根据 key 找到一个值是立即返回的，数组则需要查找的过程。</p><h2 id="处理二维数组" tabindex="-1"><a class="header-anchor" href="#处理二维数组" aria-hidden="true">#</a> 处理二维数组</h2><p>处理二维数组，两层嵌套循环，外循环处理行，内循环处理列（可以反转）</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> grades <span class="token operator">=</span> <span class="token punctuation">[</span>\n  <span class="token punctuation">[</span><span class="token number">89</span><span class="token punctuation">,</span> <span class="token number">77</span><span class="token punctuation">,</span> <span class="token number">78</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">[</span><span class="token number">76</span><span class="token punctuation">,</span> <span class="token number">82</span><span class="token punctuation">,</span> <span class="token number">81</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">[</span><span class="token number">91</span><span class="token punctuation">,</span> <span class="token number">94</span><span class="token punctuation">,</span> <span class="token number">89</span><span class="token punctuation">]</span>\n<span class="token punctuation">]</span>\n\n<span class="token keyword">var</span> total <span class="token operator">=</span> <span class="token number">0</span>\n<span class="token keyword">var</span> average <span class="token operator">=</span> <span class="token number">0.0</span>\n\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> row <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> row <span class="token operator">&lt;</span> grades<span class="token punctuation">.</span>length<span class="token punctuation">;</span> row<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 总分 遍历累加</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> col <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> col <span class="token operator">&lt;</span> grades<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> col<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    total <span class="token operator">=</span> total <span class="token operator">+</span> grades<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// 均分 总分/科数</span>\n  average <span class="token operator">=</span> <span class="token punctuation">(</span>total <span class="token operator">/</span> grades<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;student &#39;</span> <span class="token operator">+</span> <span class="token string">&#39;average: &#39;</span> <span class="token operator">+</span> average<span class="token punctuation">)</span>\n  <span class="token comment">// 重置</span>\n  total <span class="token operator">=</span> <span class="token number">0</span>\n  average <span class="token operator">=</span> <span class="token number">0.0</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><h2 id="阶乘" tabindex="-1"><a class="header-anchor" href="#阶乘" aria-hidden="true">#</a> 阶乘</h2><p>正整数的阶乘（英语：factorial）是所有小于及等于该数的正整数的积，计为<code>n!</code></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 非递归</span>\n<span class="token keyword">function</span> <span class="token function">factorial</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span>\n  <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token number">1</span>\n  <span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    result <span class="token operator">=</span> n <span class="token operator">*</span> result\n    n<span class="token operator">--</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> result\n<span class="token punctuation">}</span>\n<span class="token comment">// function factorial(n) {</span>\n<span class="token comment">// if (n &lt;= 1) return 1</span>\n<span class="token comment">// return n * factorial(n - 1)</span>\n<span class="token comment">// }</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">factorial</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h2 id="数据结构、算法与应用-原书第-2-版" tabindex="-1"><a class="header-anchor" href="#数据结构、算法与应用-原书第-2-版" aria-hidden="true">#</a> 数据结构、算法与应用（原书第 2 版）</h2><h3 id="练习-21" tabindex="-1"><a class="header-anchor" href="#练习-21" aria-hidden="true">#</a> 练习 21</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 5-&gt;8</span>\n<span class="token comment">// 7-&gt;11</span>\n<span class="token comment">// 偶数取余为 0 ，奇数取余为 1</span>\n<span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> n <span class="token operator">/</span> <span class="token number">2</span>\n  <span class="token comment">// return fn(3 * n + 1)</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">*</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span>\n<span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="练习-23" tabindex="-1"><a class="header-anchor" href="#练习-23" aria-hidden="true">#</a> 练习 23</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 最大公约数</span>\n<span class="token comment">// gcd(20, 30) = 20</span>\n<span class="token comment">// gcd(112, 42) = 28</span>\n<span class="token keyword">function</span> <span class="token function">gcd</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>y <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> x\n  <span class="token keyword">return</span> <span class="token function">gcd</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span> x <span class="token operator">%</span> y<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">gcd</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">10</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">gcd</span><span class="token punctuation">(</span><span class="token number">112</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">14</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div>',14);l.render=function(o,c){const l=n("RouterLink");return s(),a(t,null,[u,p("nav",r,[p("ul",null,[p("li",null,[p(l,{to:"#简单数据结构"},{default:e((()=>[i])),_:1})]),p("li",null,[p(l,{to:"#处理二维数组"},{default:e((()=>[k])),_:1})]),p("li",null,[p(l,{to:"#阶乘"},{default:e((()=>[b])),_:1})]),p("li",null,[p(l,{to:"#数据结构、算法与应用-原书第-2-版"},{default:e((()=>[m])),_:1}),p("ul",null,[p("li",null,[p(l,{to:"#练习-21"},{default:e((()=>[d])),_:1})]),p("li",null,[p(l,{to:"#练习-23"},{default:e((()=>[f])),_:1})])])])])]),g],64)};export default l;
