import{r as e,o as l,c as i,a as n,w as a,F as t,b as r,d as o}from"./app.31fc93bc.js";const s={},d=n("h1",{id:"css-概念",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#css-概念","aria-hidden":"true"},"#"),r(" CSS 概念")],-1),c={class:"table-of-contents"},u=r("块级元素有哪些？行内元素有哪些？空(void)元素有那些？"),h=r("定位"),p=r("相对定位"),b=r("绝对定位"),f=r("盒模型"),g=r("box-sizing"),m=r("inline-block 和 float"),x=r("选择器"),v=r("优先级及权重"),k=r("(内容)替换元素"),S=r("外边距折叠（合并）"),y=r("calc"),_=r("z-index"),w=r("inline 元素(iframe/img)下面留白问题"),C=r("inline element align in list layout"),z=r("@import"),M=r("参考"),B=r("outline vs border"),q=r("分析比较 opacity: 0、visibility: hidden、display: none 优劣和适用场景。"),F=r("宽度优先级"),D={href:"http://apps.workflower.fi/vocabs/css/en#attribute-selector",target:"_blank",rel:"noopener noreferrer"},L=r("CSS Vocabulary"),A={href:"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Box_Alignment",target:"_blank",rel:"noopener noreferrer"},N=r("CSS Box Alignment - CSS: Cascading Style Sheets | MDN"),W=o('<h2 id="块级元素有哪些-行内元素有哪些-空-void-元素有那些" tabindex="-1"><a class="header-anchor" href="#块级元素有哪些-行内元素有哪些-空-void-元素有那些" aria-hidden="true">#</a> 块级元素有哪些？行内元素有哪些？空(void)元素有那些？</h2><ol><li><p>块级元素：div、ul、li、dl、dt、dd、p、h1-h6、blockquote</p><p>display block list-item table 三个独占行的排版</p></li><li><p>行内元素：a、b、span、img、input、strong、select、label、em、button、textarea</p><p>正文内排版元素、表单</p></li><li><p>空元素：即没有内容的 HTML 元素，例如：br、meta、hr、link、input、img</p></li></ol><h2 id="定位" tabindex="-1"><a class="header-anchor" href="#定位" aria-hidden="true">#</a> 定位</h2><ul><li>常规流</li><li>浮动</li><li>绝对定位</li></ul><h3 id="相对定位" tabindex="-1"><a class="header-anchor" href="#相对定位" aria-hidden="true">#</a> 相对定位</h3><ul><li>相对于自身原有位置进行偏移（物理中的参照物）</li><li>仍处于标准文档流中</li><li>随即拥有偏移属性和 z-index 属性</li></ul><h3 id="绝对定位" tabindex="-1"><a class="header-anchor" href="#绝对定位" aria-hidden="true">#</a> 绝对定位</h3><ul><li>相对于最近的定位祖先元素（MDN）</li><li><s>相对于最近的非 static 元素</s></li><li>建立了以包含块为基准的定位</li><li>完全脱离了标准文档流</li><li>随即拥有偏移属性和 z-index 属性</li><li>绝对于浏览器</li><li>如果将父级设为 relative,则子元素将在父级盒子内定位</li><li>当三个盒子都是绝对定位时，运用 z-index 定位的叠加：z-index:0/1/2/… 表示从上到下显示的次序</li><li>top 值依赖 relative 元素设置 height</li></ul><h2 id="盒模型" tabindex="-1"><a class="header-anchor" href="#盒模型" aria-hidden="true">#</a> 盒模型</h2><h2 id="box-sizing" tabindex="-1"><a class="header-anchor" href="#box-sizing" aria-hidden="true">#</a> box-sizing</h2><ul><li>定义<code>width/height</code>如何计算，默认值<code>content-box</code></li><li>常用<code>border-box</code>，把 border 和 padding 也算上，特别是涉及百分比计算时，更方便</li></ul><h2 id="inline-block-和-float" tabindex="-1"><a class="header-anchor" href="#inline-block-和-float" aria-hidden="true">#</a> inline-block 和 float</h2><ul><li><code>inline-block</code>需要在一行内显示，排列方向一致时使用</li><li>文档流默认是从上到下，当需要从左从右排时，就需要 float，需要添加新元素<code>clear: both</code></li></ul><blockquote><p>关于 float 属性</p></blockquote><p>float 定义了元素向哪个方向浮动，占据一定空间，其余内容围绕该元素排列</p><p>关于 clear 属性</p><p>规定元素的哪一侧不允许出现其他浮动元素</p><p>如果声明为左边或右边清除，会使元素的上外边框边界刚好在该边上浮动元素的下外边距边界之下。</p><h2 id="选择器" tabindex="-1"><a class="header-anchor" href="#选择器" aria-hidden="true">#</a> 选择器</h2><h3 id="优先级及权重" tabindex="-1"><a class="header-anchor" href="#优先级及权重" aria-hidden="true">#</a> 优先级及权重</h3><ol><li><p>分为<code>id &gt; class &gt; tag 标签 &gt; 伪类</code>(权重由 1000 到 0) 四类，计算每个类别中的选择器个数，然后先比较 id 个数，越多越优先，在 id 个数相同的情况下，再比较 class 个数，依此类推。</p></li><li><p>带有<code>!important</code>的优先级最高，都带 !important 的再以之前的顺序计算优先级。</p></li><li><p>就近原则<code>inline &gt; internal &gt; external</code></p></li></ol><h2 id="内容-替换元素" tabindex="-1"><a class="header-anchor" href="#内容-替换元素" aria-hidden="true">#</a> (内容)替换元素</h2><ul><li>可替换元素， 渲染时根据元素的标签和属性进行替换再展示内容，源码看不出内容，嵌入内容、表单，如 img video iframe，一般有内在样式和宽高比，独立于 CSS 格式化模型的外部对象。</li><li>不可替换元素，源码和展示一致，不需要替换。大部分是不可替换元素。</li><li>区分标准是，内容在渲染时是否要进行替换</li><li><code>object-fit</code> 定义可替换元素如何填充容器</li><li>inline元素默认是基线对齐的 vertical-align=baseline</li></ul><h2 id="外边距折叠-合并" tabindex="-1"><a class="header-anchor" href="#外边距折叠-合并" aria-hidden="true">#</a> 外边距折叠（合并）</h2><p>垂直方向相邻盒 margin 合并成一个（不一定是同辈元素，不一定是相邻元素）</p><p>BFC 的特性，不是缺陷</p><ul><li>相邻的兄弟元素（除非后者兄弟需要清除过去的浮动）</li><li>块级父元素与其第一个/最后一个子元素</li><li>空块元素</li></ul><p>解决：</p>',28),H=n("li",null,[n("p",null,"尽量用同一方向 margin")],-1),T=n("li",null,[n("p",null,"让元素产生新 BFC 或用 BFC 包住（部分触发 BFC 的条件）")],-1),j=r("发生元素共同容器使用 flex（并不是在发生元素上设置） "),I={href:"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Box_Model/Mastering_margin_collapsing",target:"_blank",rel:"noopener noreferrer"},O=r("Mastering margin collapsing - CSS: Cascading Style Sheets | MDN"),R={href:"https://www.zhihu.com/question/19823139",target:"_blank",rel:"noopener noreferrer"},U=r("如何解决外边距叠加的问题？ - 知乎"),E={href:"https://codepen.io/cyio/pen/mdregqb",target:"_blank",rel:"noopener noreferrer"},G=r("margin collapse"),P=n("li",null,[n("p",null,"块级容器不一定是块级盒")],-1),V=r("块级盒不一定是块级容器，如块级替换元素（display: block）和 flex 盒 "),Z={href:"https://www.w3.org/TR/css-display-3/#block-container",target:"_blank",rel:"noopener noreferrer"},J=r("CSS Display Module Level 3"),K=n("h2",{id:"calc",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#calc","aria-hidden":"true"},"#"),r(" calc")],-1),Q=n("p",null,"IE10+",-1),X={href:"https://segmentfault.com/a/1190000010806965",target:"_blank",rel:"noopener noreferrer"},Y=r("css 兼容所有浏览器的宽度计算方法，非 calc - 个人文章 - SegmentFault 思否"),$=o('<h2 id="z-index" tabindex="-1"><a class="header-anchor" href="#z-index" aria-hidden="true">#</a> z-index</h2><p>使用条件：定位元素（非 static）及其后代设置 stack level</p><h2 id="inline-元素-iframe-img-下面留白问题" tabindex="-1"><a class="header-anchor" href="#inline-元素-iframe-img-下面留白问题" aria-hidden="true">#</a> inline 元素(iframe/img)下面留白问题</h2><p>默认<code>vertical-align</code>为<code>baseline</code> iframe/img 等元素可能出现意外空白 解决：</p><ol><li>元素上设置<code>vertical-align</code>为其它值</li></ol><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>vertical-align: bottom;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ol start="2"><li>父级设置</li></ol><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>font-size: 0;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li>行内元素有两个高度 <ul><li>内容区域高度（基于 font）</li><li>虚拟区域调试（基于 line-height）</li><li>这两个高度不是很确定</li></ul></li><li>行盒高度，基于行内元素的 line-height 和 vertical-align 计算</li><li>vertical-align 百分比基于 line-height</li></ul>',9),ee={href:"https://components.ai/box-shadows/",target:"_blank",rel:"noopener noreferrer"},le=r("Components AI — A new way to explore generative design systems"),ie=n("h2",{id:"inline-element-align-in-list-layout",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#inline-element-align-in-list-layout","aria-hidden":"true"},"#"),r(" inline element align in list layout")],-1),ne=n("p",null,"问题：当列表元素有的包含文字，有的不包含文字时，对齐会有问题",-1),ae={href:"https://codepen.io/cyio/pen/abZzWPo",target:"_blank",rel:"noopener noreferrer"},te=r("inline align baseline"),re=n("ul",null,[n("li",null,"空的 inline 元素，基线是 margin-bottom"),n("li",null,"非空有文字时，取最下面内容的 baseline"),n("li",null,"用 inline 进行布局存在副作用，vertical-align 默认值为 baseline，不符合非文字类内容对齐要求，子元素类型有的为空，有的有文字时会发生不对齐 baseline 行内元素的 baseline 与父元素的 baseline 对齐")],-1),oe=n("h2",{id:"import",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#import","aria-hidden":"true"},"#"),r(" @import")],-1),se=n("p",null,[r("缺点，css 多个"),n("code",null,"@import"),r("只能顺序下载，html "),n("code",null,"link"),r("可并行下载 适用场景：")],-1),de=n("li",null,"媒体适配",-1),ce=n("li",null,"样式存在依赖",-1),ue=r("平时可以用，遇上需要高性能、优化时，移除，合并"),he=n("code",null,"@import",-1),pe=r("，直接使用 link "),be={href:"https://stackoverflow.com/questions/10036977/best-way-to-include-css-why-use-import?answertab=votes#tab-top",target:"_blank",rel:"noopener noreferrer"},fe=r("html - Best way to include CSS? Why use @import? - Stack Overflow"),ge={href:"https://cssguidelin.es/",target:"_blank",rel:"noopener noreferrer"},me=r("CSS Guidelines (2.2.5) – High-level advice and guidelines for writing sane, manageable, scalable CSS"),xe=n("h2",{id:"参考",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#参考","aria-hidden":"true"},"#"),r(" 参考")],-1),ve={href:"https://www.smashingmagazine.com/2019/01/how-to-learn-css/",target:"_blank",rel:"noopener noreferrer"},ke=r("How To Learn CSS — Smashing Magazine"),Se=n("h2",{id:"outline-vs-border",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#outline-vs-border","aria-hidden":"true"},"#"),r(" outline vs border")],-1),ye=n("p",null,"写法类似",-1),_e=n("p",null,"outline 不占用布局，可能遮挡内容",-1),we=n("p",null,[r("覆盖用"),n("code",null,":focus")],-1),Ce=n("p",null,"transform 会为包括后代创建新的包含块，fixed 元素依据将变为包含块",-1),ze=n("p",null,"尺寸值，配合 width height fit-content 不超过 max-content max-content 实际内容 length min-content 文本能接受的最小宽度，空格换行",-1),Me={href:"https://blog.csdn.net/u010622874/article/details/108875892",target:"_blank",rel:"noopener noreferrer"},Be=r("前端面试问题集锦---CSS篇_你好，欢迎光临！-CSDN博客"),qe=o('<h2 id="分析比较-opacity-0、visibility-hidden、display-none-优劣和适用场景。" tabindex="-1"><a class="header-anchor" href="#分析比较-opacity-0、visibility-hidden、display-none-优劣和适用场景。" aria-hidden="true">#</a> 分析比较 opacity: 0、visibility: hidden、display: none 优劣和适用场景。</h2><ol><li>display: none (不占空间，不能点击)（场景，显示出原来这里不存在的结构）</li><li>visibility: hidden（占据空间，不能点击）（场景：显示不会导致页面结构发生变动，不会撑开）</li><li>opacity: 0（占据空间，可以点击）（场景：可以跟transition搭配）</li></ol><h2 id="宽度优先级" tabindex="-1"><a class="header-anchor" href="#宽度优先级" aria-hidden="true">#</a> 宽度优先级</h2><p>max-width overrides width, but min-width overrides max-width.</p><div class="language-css ext-css line-numbers-mode"><pre class="language-css"><code><span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token important">!important</span><span class="token punctuation">;</span>\n<span class="token property">max-width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>\n<span class="token property">min-width</span><span class="token punctuation">:</span> 400px<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>',5);s.render=function(r,o){const s=e("RouterLink"),Fe=e("OutboundLink");return l(),i(t,null,[d,n("nav",c,[n("ul",null,[n("li",null,[n(s,{to:"#块级元素有哪些-行内元素有哪些-空-void-元素有那些"},{default:a((()=>[u])),_:1})]),n("li",null,[n(s,{to:"#定位"},{default:a((()=>[h])),_:1}),n("ul",null,[n("li",null,[n(s,{to:"#相对定位"},{default:a((()=>[p])),_:1})]),n("li",null,[n(s,{to:"#绝对定位"},{default:a((()=>[b])),_:1})])])]),n("li",null,[n(s,{to:"#盒模型"},{default:a((()=>[f])),_:1})]),n("li",null,[n(s,{to:"#box-sizing"},{default:a((()=>[g])),_:1})]),n("li",null,[n(s,{to:"#inline-block-和-float"},{default:a((()=>[m])),_:1})]),n("li",null,[n(s,{to:"#选择器"},{default:a((()=>[x])),_:1}),n("ul",null,[n("li",null,[n(s,{to:"#优先级及权重"},{default:a((()=>[v])),_:1})])])]),n("li",null,[n(s,{to:"#内容-替换元素"},{default:a((()=>[k])),_:1})]),n("li",null,[n(s,{to:"#外边距折叠-合并"},{default:a((()=>[S])),_:1})]),n("li",null,[n(s,{to:"#calc"},{default:a((()=>[y])),_:1})]),n("li",null,[n(s,{to:"#z-index"},{default:a((()=>[_])),_:1})]),n("li",null,[n(s,{to:"#inline-元素-iframe-img-下面留白问题"},{default:a((()=>[w])),_:1})]),n("li",null,[n(s,{to:"#inline-element-align-in-list-layout"},{default:a((()=>[C])),_:1})]),n("li",null,[n(s,{to:"#import"},{default:a((()=>[z])),_:1})]),n("li",null,[n(s,{to:"#参考"},{default:a((()=>[M])),_:1})]),n("li",null,[n(s,{to:"#outline-vs-border"},{default:a((()=>[B])),_:1})]),n("li",null,[n(s,{to:"#分析比较-opacity-0、visibility-hidden、display-none-优劣和适用场景。"},{default:a((()=>[q])),_:1})]),n("li",null,[n(s,{to:"#宽度优先级"},{default:a((()=>[F])),_:1})])])]),n("p",null,[n("a",D,[L,n(Fe)]),n("a",A,[N,n(Fe)])]),W,n("ul",null,[H,T,n("li",null,[n("p",null,[j,n("a",I,[O,n(Fe)]),n("a",R,[U,n(Fe)]),n("a",E,[G,n(Fe)])])]),P,n("li",null,[n("p",null,[V,n("a",Z,[J,n(Fe)])])])]),K,Q,n("p",null,[n("a",X,[Y,n(Fe)])]),$,n("p",null,[n("a",ee,[le,n(Fe)])]),ie,ne,n("p",null,[n("a",ae,[te,n(Fe)])]),re,oe,se,n("ul",null,[de,ce,n("li",null,[ue,he,pe,n("a",be,[fe,n(Fe)]),n("a",ge,[me,n(Fe)])])]),xe,n("p",null,[n("a",ve,[ke,n(Fe)])]),Se,ye,_e,we,Ce,ze,n("p",null,[n("a",Me,[Be,n(Fe)])]),qe],64)};export default s;
