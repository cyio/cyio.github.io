import{d as n}from"./app.26466922.js";const s={},a=n('<h1 id="替换模板字符" tabindex="-1"><a class="header-anchor" href="#替换模板字符" aria-hidden="true">#</a> 替换模板字符</h1><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 输入</span>\n<span class="token comment">// replaceTemplateStr(&#39;&lt;div class={%className%}&gt;{%name%}&lt;/div&gt;&#39;, {className:&#39;hd&#39;, name:123})</span>\n<span class="token comment">// 输出</span>\n<span class="token comment">// &lt;div class=&quot;hd&quot;&gt;123&lt;/div&gt;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li>用 key 拼接字符，准确 replace，不需要用正则</li><li>str 是纯方法，不修改原字符串</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">tpl</span><span class="token punctuation">(</span><span class="token parameter">template<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> str <span class="token operator">=</span> template\n  <span class="token comment">// 用 for - in 写起来更简单</span>\n  Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">key</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    str <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>\n      <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">{%</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">%}</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n      key <span class="token operator">===</span> <span class="token string">&#39;className&#39;</span> <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>data<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span><span class="token template-punctuation string">`</span></span> <span class="token operator">:</span> data<span class="token punctuation">[</span>key<span class="token punctuation">]</span>\n    <span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token keyword">return</span> str\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> r <span class="token operator">=</span> <span class="token function">tpl</span><span class="token punctuation">(</span><span class="token string">&#39;&lt;div class={%className%}&gt;{%name%}&lt;/div&gt;&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  className<span class="token operator">:</span> <span class="token string">&#39;hd&#39;</span><span class="token punctuation">,</span>\n  name<span class="token operator">:</span> <span class="token number">123</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>正则匹配，存在问题</p><p>className 要求双引号，需要 replace 多次，并且先 replace 特例</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// not work</span>\n<span class="token keyword">function</span> <span class="token function">replaceTemplateStr</span><span class="token punctuation">(</span><span class="token parameter">template<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> template<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">/\\{\\%(.*?)\\%\\}/g</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">match<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> data<span class="token punctuation">[</span>key<span class="token punctuation">]</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">let</span> r <span class="token operator">=</span> <span class="token function">tpl</span><span class="token punctuation">(</span><span class="token string">&#39;&lt;div class={%className%}&gt;{%name%}&lt;/div&gt;&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  className<span class="token operator">:</span> <span class="token string">&#39;hd&#39;</span><span class="token punctuation">,</span>\n  name<span class="token operator">:</span> <span class="token number">123</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div>',7);s.render=function(n,s){return a};export default s;
