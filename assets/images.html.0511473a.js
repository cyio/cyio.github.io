import{r as n,o as a,c as e,a as s,w as t,F as l,b as p,d as o}from"./app.31fc93bc.js";const r={},i=s("h1",{id:"图片",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#图片","aria-hidden":"true"},"#"),p(" 图片")],-1),u={class:"table-of-contents"},c=p("显示优化"),d=p("图片格式"),h=p("不同格式适用场景"),b=p("响应式展示"),k=p("占位图工具"),f=p("h2 lazy"),g=p("lazy load"),m=p("IntersectionObserver 交叉观察者接口，异步，空闲时执行"),v=p("webp"),w=p("高清图"),_=p("图片压缩"),y=p("表单图片压缩"),x=p("在线压缩"),z=p("本地手动压缩"),I=p("工具压缩 gulp"),A=p("图片预览"),B=p("处理上传"),F=p("AVIF"),G=p("保持比例"),P=p("图片压缩原理"),j=p("优化思路"),E=s("blockquote",null,[s("p",null,"web 优化专家一定是图片优化专家")],-1),N=s("h2",{id:"显示优化",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#显示优化","aria-hidden":"true"},"#"),p(" 显示优化")],-1),S=s("ul",null,[s("li",null,"缩略图到原图过渡")],-1),D={href:"http://www.fly63.com/article/detial/359",target:"_blank",rel:"noopener noreferrer"},O=p("web 前端图片加载优化，从图片模糊到清晰的实现过程"),q=s("h2",{id:"图片格式",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#图片格式","aria-hidden":"true"},"#"),p(" 图片格式")],-1),C=s("li",null,[s("p",null,"WebP 有损、无损，30% 体积优势")],-1),V=s("p",null,"APNG 质量、大小较 GIF 均有优势，移动端可放心用，桌面端需要兼容 IE/EDGE，可用 JS 库播放 APNG",-1),M={href:"https://zhuanlan.zhihu.com/p/37160029",target:"_blank",rel:"noopener noreferrer"},W=p("UC 内核支持更好的动画格式-APNG"),U={href:"https://www.oschina.net/question/3915715_2283697",target:"_blank",rel:"noopener noreferrer"},L=p("全面掌握移动端主流图片格式的特点、性能、调优等 - 开源中国社区"),R={href:"http://littlesvr.ca/apng/gif_apng_webp.html",target:"_blank",rel:"noopener noreferrer"},T=p("GIF vs APNG vs WebP"),J={href:"http://isparta.github.io/",target:"_blank",rel:"noopener noreferrer"},K=p("iSparta－PNG 压缩与格式转换工具"),Z=o('<h3 id="不同格式适用场景" tabindex="-1"><a class="header-anchor" href="#不同格式适用场景" aria-hidden="true">#</a> 不同格式适用场景</h3><p>无损，压缩级别只是编码不同？</p><table><thead><tr><th>格式</th><th>使用场景</th><th>劣势</th></tr></thead><tbody><tr><td>JPG/JPEG</td><td>1. 大的背景图； 2. 轮播图； 3. Banner 图 4. 照片</td><td></td></tr><tr><td>PNG</td><td>1. 小 Logo； 2. 透明背景</td><td></td></tr><tr><td>GIF</td><td>动态图片</td><td></td></tr><tr><td>SVG</td><td>能适应不同设备且画质不能损坏的图片</td><td></td></tr><tr><td>Base64</td><td>大小不超过 2KB，且更新率低的图片</td><td>无法缓存，不适合大图片</td></tr><tr><td>WebP</td><td>现代浏览器</td><td></td></tr></tbody></table>',3),Y={href:"https://zh.wikipedia.org/wiki/PNG#%25E4%25B8%258E%25E5%2585%25B6%25E4%25BB%2596%25E6%25A0%25BC%25E5%25BC%258F%25E7%259B%25B8%25E6%25AF%2594",target:"_blank",rel:"noopener noreferrer"},H=p("PNG - 维基百科，自由的百科全书"),Q=s("h2",{id:"响应式展示",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#响应式展示","aria-hidden":"true"},"#"),p(" 响应式展示")],-1),X=s("p",null,"srcset/sizes",-1),$=s("li",null,"查看设备宽度",-1),nn=s("li",null,"计算 sizes 中第一个符合媒体查询条件",-1),an=s("li",null,"查看给定 slot size",-1),en=s("li",null,"匹配 srcset 中最接近 size",-1),sn=p("旧浏览器会忽略 "),tn={href:"https://codepen.io/tombennet/pen/yYgLaQ",target:"_blank",rel:"noopener noreferrer"},ln=p("Responsive Images with srcset and sizes"),pn={href:"https://www.jianshu.com/p/235ef450f5e9",target:"_blank",rel:"noopener noreferrer"},on=p("图片响应式解决方案 - 简书"),rn={href:"https://web.dev/fast/use-imagemin-to-compress-images",target:"_blank",rel:"noopener noreferrer"},un=p("Use Imagemin to compress images  |  web.dev"),cn=s("h2",{id:"占位图工具",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#占位图工具","aria-hidden":"true"},"#"),p(" 占位图工具")],-1),dn={href:"http://iph.href.lu/200x200",target:"_blank",rel:"noopener noreferrer"},hn=p("iph"),bn=o('<h2 id="h2-lazy" tabindex="-1"><a class="header-anchor" href="#h2-lazy" aria-hidden="true">#</a> h2 lazy</h2><p>问题：一般期望首屏图片尽快下载完，但使用了 H2，优先级低的图片可能<strong>拖慢</strong>优先级高的图片下载，</p><ul><li>h2 并行，对下行带宽来说，相当于在请求一个合并文件</li><li>开发工具，切换到 image 标签，可以看当图片请求数，总请求大小</li><li>图片总体积 9Mb，网速 500KB/s，那 9 * 1000 / 500 = 18，理论要 18s 全部下载完</li><li>并行请求，充分利用带宽，但导致单个资源可用带宽爱限</li><li>假定 50 张图片，每张图片分配的下行 500 / 50 = 10 kb/s，实际考虑有的图片较小，下载完会释放</li><li>带来的问题，优先级高的图片下载也慢了</li><li>用户带宽限制，服务器带宽一般远大于用户带宽</li></ul><blockquote><p>第 2、3 张走了不同的域名，所以快。第一张因为首页 h2 并发下载图片太多了（56 个请求，9Mb 大），4Mb 带宽下 较大图片并行请求 20 张每张分 配大概是 50kb/s，一张 200kb 的图至少需要 4s （实测，swiper 第一张 5s 多）</p></blockquote><p>结论：</p><ul><li>所以用 h2，如果图片比较多的话，需要给图片排优先级(优先级低的使用懒加载)，优先保障当前视口内图片加载，限制一定时间内请求数据量</li><li>图片上单独 cdn</li></ul><h2 id="lazy-load" tabindex="-1"><a class="header-anchor" href="#lazy-load" aria-hidden="true">#</a> lazy load</h2><blockquote><p>chrome 原生已支持</p></blockquote><p>默认已经按优先级加载。使用 lazy 可以节省资源</p><p>传统方法 scroll 性能不好</p><h3 id="intersectionobserver-交叉观察者接口-异步-空闲时执行" tabindex="-1"><a class="header-anchor" href="#intersectionobserver-交叉观察者接口-异步-空闲时执行" aria-hidden="true">#</a> IntersectionObserver 交叉观察者接口，异步，空闲时执行</h3><p>Chrome 51+，不支持 IE，兼容性很好</p><p>触发加载规则：图片元素出现在视口内，即检查元素与父元素或视口(root)是否交叉，交叉比例 threshold</p>',13),kn=p("应用场景：lazy load，无限滚动 "),fn={href:"https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserver",target:"_blank",rel:"noopener noreferrer"},gn=p("IntersectionObserver - Web APIs | MDN"),mn=s("p",null,"缺点：依赖 JS 才能正确设置 src，Chrome 原生的好处",-1),vn={href:"https://css-tricks.com/tips-for-rolling-your-own-lazy-loading/",target:"_blank",rel:"noopener noreferrer"},wn=p("Tips for rolling your own lazy loading | CSS-Tricks"),_n=p("示例 "),yn={href:"https://codepen.io/Sidstumple/pen/WNwvYZR?editors=1010",target:"_blank",rel:"noopener noreferrer"},xn=p("Interaction observer example"),zn=s("h2",{id:"webp",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#webp","aria-hidden":"true"},"#"),p(" webp")],-1),In=s("ul",null,[s("li",null,"支持检测原理，src base64 onload"),s("li",null,[p("polyfill 支持原理，打包了"),s("code",null,"libwebp"),p("解码库，webp -> image data -> canvas -> done")]),s("li",null,"兼容性：IE11/Safari"),s("li",null,"文件 Giziped 95KB")],-1),An={href:"https://github.com/chase-moskal/webp-hero",target:"_blank",rel:"noopener noreferrer"},Bn=p("chase-moskal/webp-hero: browser polyfill for the webp image format"),Fn={href:"https://images.guide/",target:"_blank",rel:"noopener noreferrer"},Gn=p("Essential Image Optimization"),Pn=s("h2",{id:"高清图",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#高清图","aria-hidden":"true"},"#"),p(" 高清图")],-1),jn={href:"https://www.zcool.com.cn/article/ZNDc5NTg4.html",target:"_blank",rel:"noopener noreferrer"},En=p("Sketch用一倍图做设计稿还是二倍图？|UI|教程|Olaf_Chou - 原创文章 - 站酷 (ZCOOL)"),Nn=s("p",null,"二倍图设计默认导出的图片是 2x 高清的，可直接使用。 二倍图导出时省去了点击+号 再选 2x ，操作方便。",-1),Sn=s("h2",{id:"图片压缩",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#图片压缩","aria-hidden":"true"},"#"),p(" 图片压缩")],-1),Dn=s("h3",{id:"表单图片压缩",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#表单图片压缩","aria-hidden":"true"},"#"),p(" 表单图片压缩")],-1),On=s("ul",null,[s("li",null,"图片 → canvas 压缩 → 图片"),s("li",null,"canvas 设置宽度"),s("li",null,[s("code",null,"toBlob()"),p("，转换成二进制，后端友好")])],-1),qn={href:"https://codepen.io/cyio/pen/MWyeBbg",target:"_blank",rel:"noopener noreferrer"},Cn=p("imageConversion 大文件 png 测试"),Vn=s("p",null,"图片预览，可以用 URL.creatObjectUrl(blob) 或 FileReader.readAsDataURL(blob)",-1),Mn=s("h3",{id:"在线压缩",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#在线压缩","aria-hidden":"true"},"#"),p(" 在线压缩")],-1),Wn={href:"https://squoosh.app/",target:"_blank",rel:"noopener noreferrer"},Un=p("Squoosh"),Ln=s("h3",{id:"本地手动压缩",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#本地手动压缩","aria-hidden":"true"},"#"),p(" 本地手动压缩")],-1),Rn=s("p",null,"imageoptim-cli 不支持 svg，因为已经有 svgo",-1),Tn=s("p",null,"注意参数需要有引号",-1),Jn=s("p",null,[s("code",null,"imageoptim './*'")],-1),Kn=s("p",null,"gui 更全面，且支持异步同步调用",-1),Zn={href:"https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/automating-image-optimization/",target:"_blank",rel:"noopener noreferrer"},Yn=p("自动优化图像  |  Web Fundamentals  |  Google Developers"),Hn=o('<h3 id="工具压缩-gulp" tabindex="-1"><a class="header-anchor" href="#工具压缩-gulp" aria-hidden="true">#</a> <s>工具压缩 gulp</s></h3><ul><li>首先原图往往尺寸很大，先缩小</li><li>把大文件挑出来，用智图的在线服务，压缩效果好，它的 gulp 工具依赖在线 api，不支持多层目录，有待观察</li><li>gulp-imagemin 支持多层目录</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">&#39;imagemin&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  gulp\n    <span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token string">&#39;./h5/group4/M00/**/**/*.{png,jpg,gif,ico}&#39;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">imagemin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">&#39;./h5/group4/M00-dist/&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="图片预览" tabindex="-1"><a class="header-anchor" href="#图片预览" aria-hidden="true">#</a> 图片预览</h2><ul><li>filereader onload</li></ul><h2 id="处理上传" tabindex="-1"><a class="header-anchor" href="#处理上传" aria-hidden="true">#</a> 处理上传</h2><ul><li>blob 必须设置 name</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>  <span class="token function">blobToFile</span> <span class="token punctuation">(</span><span class="token parameter">theBlob<span class="token punctuation">,</span> fileName</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      theBlob<span class="token punctuation">.</span>lastModifiedDate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      theBlob<span class="token punctuation">.</span>name <span class="token operator">=</span> fileName\n      <span class="token keyword">return</span> theBlob\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n  <span class="token keyword">const</span> newFile <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">blobToFile</span><span class="token punctuation">(</span>blob<span class="token punctuation">,</span> <span class="token string">&#39;upload.png&#39;</span><span class="token punctuation">)</span>\n  <span class="token keyword">const</span> formData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  formData<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&#39;file&#39;</span><span class="token punctuation">,</span> newFile<span class="token punctuation">,</span> newFile<span class="token punctuation">.</span>name<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div>',8),Qn={href:"https://blog.csdn.net/hhzzcc_/article/details/80324546",target:"_blank",rel:"noopener noreferrer"},Xn=p("原理：Vue 实现图片预览、裁剪并获取被裁剪区域的 base64(无组件) - hhzzcc_的博客 - CSDN 博客"),$n={href:"https://juejin.im/post/5b3f14c2f265da0f5405080f",target:"_blank",rel:"noopener noreferrer"},na=p("Vue+element-ui 图片上传剪裁组件 - 掘金"),aa=o('<ul><li>element-ui</li></ul><div class="language-pug ext-pug line-numbers-mode"><pre class="language-pug"><code>  <span class="token tag">el-upload<span class="token attr-class">.avatar-uploader</span><span class="token attributes"><span class="token punctuation">(</span><span class="token attr-name">action</span><span class="token punctuation">=</span><span class="token attr-value"><span class="token string">&#39;https://jsonplaceholder.typicode.com/posts/&#39;</span></span><span class="token punctuation">,</span> :<span class="token attr-name">show-file-list</span><span class="token punctuation">=</span><span class="token attr-value"><span class="token string">&#39;false&#39;</span></span><span class="token punctuation">,</span> :<span class="token attr-name">on-success</span><span class="token punctuation">=</span><span class="token attr-value"><span class="token string">&#39;handleAvatarSuccess&#39;</span></span><span class="token punctuation">,</span> :<span class="token attr-name">before-upload</span><span class="token punctuation">=</span><span class="token attr-value"><span class="token string">&#39;beforeAvatarUpload&#39;</span></span><span class="token punctuation">)</span></span></span>\n      <span class="token tag">el-button<span class="token attributes"><span class="token punctuation">(</span><span class="token attr-name">type</span><span class="token punctuation">=</span><span class="token attr-value"><span class="token string">&#39;primary&#39;</span></span><span class="token punctuation">)</span></span></span> <span class="token plain-text">上传</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="avif" tabindex="-1"><a class="header-anchor" href="#avif" aria-hidden="true">#</a> AVIF</h2><p>AV1 video keyframe</p><blockquote><p>All we need to do is repack AVIF as a single-frame AV1 video and decode it using native decoder. polyfill 原理：将图片重打包成 AV! 视频，再复用浏览器原生支持能力解码 <code>AVIF -&gt; MP4 -&gt; &lt;video&gt; -&gt; canvas -&gt; output</code><code>.bmp</code>喂给浏览器，不必再压缩 SW 不能创建<code>&lt;video&gt;</code>，需要主线程配合</p></blockquote><h2 id="保持比例" tabindex="-1"><a class="header-anchor" href="#保持比例" aria-hidden="true">#</a> 保持比例</h2><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>object-fit: contain;\n\nbackground-size: contain;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="图片压缩原理" tabindex="-1"><a class="header-anchor" href="#图片压缩原理" aria-hidden="true">#</a> 图片压缩原理</h2><p>TODO</p><h2 id="优化思路" tabindex="-1"><a class="header-anchor" href="#优化思路" aria-hidden="true">#</a> 优化思路</h2><ol><li>选择合适格式 png jpg webp avif</li><li>减少请求 base64 http 1.1 雪碧图</li></ol>',11);r.render=function(p,o){const r=n("RouterLink"),ea=n("OutboundLink");return a(),e(l,null,[i,s("nav",u,[s("ul",null,[s("li",null,[s(r,{to:"#显示优化"},{default:t((()=>[c])),_:1})]),s("li",null,[s(r,{to:"#图片格式"},{default:t((()=>[d])),_:1}),s("ul",null,[s("li",null,[s(r,{to:"#不同格式适用场景"},{default:t((()=>[h])),_:1})])])]),s("li",null,[s(r,{to:"#响应式展示"},{default:t((()=>[b])),_:1})]),s("li",null,[s(r,{to:"#占位图工具"},{default:t((()=>[k])),_:1})]),s("li",null,[s(r,{to:"#h2-lazy"},{default:t((()=>[f])),_:1})]),s("li",null,[s(r,{to:"#lazy-load"},{default:t((()=>[g])),_:1}),s("ul",null,[s("li",null,[s(r,{to:"#intersectionobserver-交叉观察者接口-异步-空闲时执行"},{default:t((()=>[m])),_:1})])])]),s("li",null,[s(r,{to:"#webp"},{default:t((()=>[v])),_:1})]),s("li",null,[s(r,{to:"#高清图"},{default:t((()=>[w])),_:1})]),s("li",null,[s(r,{to:"#图片压缩"},{default:t((()=>[_])),_:1}),s("ul",null,[s("li",null,[s(r,{to:"#表单图片压缩"},{default:t((()=>[y])),_:1})]),s("li",null,[s(r,{to:"#在线压缩"},{default:t((()=>[x])),_:1})]),s("li",null,[s(r,{to:"#本地手动压缩"},{default:t((()=>[z])),_:1})]),s("li",null,[s(r,{to:"#工具压缩-gulp"},{default:t((()=>[I])),_:1})])])]),s("li",null,[s(r,{to:"#图片预览"},{default:t((()=>[A])),_:1})]),s("li",null,[s(r,{to:"#处理上传"},{default:t((()=>[B])),_:1})]),s("li",null,[s(r,{to:"#avif"},{default:t((()=>[F])),_:1})]),s("li",null,[s(r,{to:"#保持比例"},{default:t((()=>[G])),_:1})]),s("li",null,[s(r,{to:"#图片压缩原理"},{default:t((()=>[P])),_:1})]),s("li",null,[s(r,{to:"#优化思路"},{default:t((()=>[j])),_:1})])])]),E,N,S,s("p",null,[s("a",D,[O,s(ea)])]),q,s("ul",null,[C,s("li",null,[V,s("p",null,[s("a",M,[W,s(ea)])]),s("p",null,[s("a",U,[L,s(ea)])]),s("p",null,[s("a",R,[T,s(ea)])]),s("p",null,[s("a",J,[K,s(ea)])])])]),Z,s("p",null,[s("a",Y,[H,s(ea)])]),Q,X,s("ul",null,[$,nn,an,en,s("li",null,[sn,s("a",tn,[ln,s(ea)]),s("a",pn,[on,s(ea)])])]),s("p",null,[s("a",rn,[un,s(ea)])]),cn,s("p",null,[s("a",dn,[hn,s(ea)])]),bn,s("p",null,[kn,s("a",fn,[gn,s(ea)])]),mn,s("p",null,[s("a",vn,[wn,s(ea)])]),s("p",null,[_n,s("a",yn,[xn,s(ea)])]),zn,In,s("p",null,[s("a",An,[Bn,s(ea)]),s("a",Fn,[Gn,s(ea)])]),Pn,s("p",null,[s("a",jn,[En,s(ea)])]),Nn,Sn,Dn,On,s("p",null,[s("a",qn,[Cn,s(ea)])]),Vn,Mn,s("p",null,[s("a",Wn,[Un,s(ea)])]),Ln,Rn,Tn,Jn,Kn,s("p",null,[s("a",Zn,[Yn,s(ea)])]),Hn,s("p",null,[s("a",Qn,[Xn,s(ea)])]),s("p",null,[s("a",$n,[na,s(ea)])]),aa],64)};export default r;
