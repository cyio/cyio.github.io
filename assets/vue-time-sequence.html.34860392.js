import{d as n}from"./app.26466922.js";const s={},a=n('<h1 id="使用-vue-做项目开发常见时序问题" tabindex="-1"><a class="header-anchor" href="#使用-vue-做项目开发常见时序问题" aria-hidden="true">#</a> 使用 vue 做项目开发常见时序问题</h1><p>时序问题是我们开发过程中经常遇到的问题，比如异步代码执行顺序，组件加载销毁顺序等，涉及时序的代码思考不周，比较容易出 bug，解决起来费时间。本文结合 Vue 中特性，谈下笔者在项目开发中常见问题。</p><h2 id="beforecreate-vs-created-vs-mounted" tabindex="-1"><a class="header-anchor" href="#beforecreate-vs-created-vs-mounted" aria-hidden="true">#</a> beforeCreate VS created VS mounted</h2><table><thead><tr><th>beforeCreate</th><th>created</th><th>mounted</th></tr></thead><tbody><tr><td>与后台交互</td><td>...</td><td>...</td></tr><tr><td></td><td>需要访问 props 和 data</td><td>需要访问 DOM</td></tr></tbody></table><ul><li>这些生命周期里都可与后台交互，业务代码一般写在 created 中</li><li>beforeCreate 在 vuex/vue-router 中常用</li></ul><h2 id="watch-动态值" tabindex="-1"><a class="header-anchor" href="#watch-动态值" aria-hidden="true">#</a> watch 动态值</h2><p>更新：合理做法，其实是 开始时执行一次 <code>immediate: true</code>，然后再 watch 变化</p><p>我们知道 watch 的执行条件是 watch 的值发生变化。一般是在异步代码执行后赋值，值是有变化的，watch 有效，但当这个值缓存起来（如使用 vuex），组件卸载而再次创建时，值在 watch 前已存在且没有再发生变化，我们期望的 watch 中的代码没有执行。</p><p>为解决以上问题，推荐一种笔者使用的代码组织方式，可以明确执行依赖关系</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 确保动态数据绑定回调执行，vue 中使用</span>\n<span class="token keyword">function</span> <span class="token function">ensureValueBindedFnExecute</span><span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$watch</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token parameter">value</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n  <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">ensureValueBindedFnExecute</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">&#39;value&#39;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>toExec<span class="token punctuation">)</span>\n    <span class="token comment">// if (this.value) {</span>\n      <span class="token comment">// this.toExec()</span>\n    <span class="token comment">// } else {</span>\n      <span class="token comment">// this.$watch(&#39;value&#39;, () =&gt; {</span>\n           <span class="token comment">// if (this.value) {</span>\n              <span class="token comment">// this.toExec()</span>\n           <span class="token comment">// }</span>\n      <span class="token comment">// })</span>\n    <span class="token comment">// }</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><p>实际项目中使用 watch 会遇到稍复杂点的情形。笔者在项目中遇到这样一个问题，子组件 watch prop 时发现有时不执行。代码是这样的，子组件在满足开关条件后渲染，父组件有两个并行请求，请求 A 负责开关渲染子组件的条件，请求 B 负责获取要传给子组件的数据，有两种情形。一种情况是，请求 A 先完成，子组件渲染，prop 为 null，请求 B 后完成，prop 赋值发生变化，watch 执行。另一种情况是，请求 B 先完成，父组件准备好子组件需要的数据，请求 A 后完成，子组件渲染，prop 不发生变化，watch 不执行。</p><p>总结下，父组件准备好 prop 后渲染子组件，子组件中的 watch 不会触发，因为没有变化。</p><h2 id="同一个组件-旧实例销毁、新实例创建时的生命周期顺序" tabindex="-1"><a class="header-anchor" href="#同一个组件-旧实例销毁、新实例创建时的生命周期顺序" aria-hidden="true">#</a> 同一个组件，旧实例销毁、新实例创建时的生命周期顺序</h2><p>在项目中遇到这个场景，以为新实例创建要在旧实例销毁后才会执行。其实不然，新实例创建钩子可能先于旧实例销毁钩子。</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>new created:\n\nold beforeDestroy:\nold destroyed:\n\nnew mounted\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="父子组件、mixins-生命周期顺序" tabindex="-1"><a class="header-anchor" href="#父子组件、mixins-生命周期顺序" aria-hidden="true">#</a> 父子组件、mixins 生命周期顺序</h2><p>原则：从外到内，再从内到外，mixins 先于当前组件</p><table><thead><tr><th>created</th><th>mounted</th><th>beforeDestroy</th><th>destroyed</th><th>mixins</th></tr></thead><tbody><tr><td>外先</td><td>内先</td><td>外先</td><td>内先</td><td>先于当前组件</td></tr></tbody></table><p>父子生命周期执行顺序如下：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>parent created:\nchild created:\n\nchild mounted:\nparent mounted:\n\nparent beforeDestory:\nchild beforeDestroy:\n\nchild destroyed\nparent destroyed\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="new" tabindex="-1"><a class="header-anchor" href="#new" aria-hidden="true">#</a> new</h2><p>清空 content 后，dom 没有立即更新，watch 取到的 textLength 是旧值</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>  methods<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token function">resetForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>form<span class="token punctuation">.</span>content <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>\n      <span class="token comment">// this.textLength = 0</span>\n      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>textLength <span class="token operator">=</span> <span class="token number">0</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  watch<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token string">&#39;form.content&#39;</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>textLength <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;feedback-content&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>textLength\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div>',23);s.render=function(n,s){return a};export default s;
