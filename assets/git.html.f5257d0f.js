import{r as e,o as a,c as n,a as s,w as i,F as l,b as t,d as r}from"./app.26466922.js";const o={},c=s("h1",{id:"git",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#git","aria-hidden":"true"},"#"),t(" Git")],-1),d={class:"table-of-contents"},p=t("commit 提交规范"),u=t("编码问题"),h=t("协作中的注意事项"),b=t("回撤 commit 或取消暂存，保留工作区"),m=t("回撤 commit，丢弃之后的修改，慎用，会撤销工作区"),g=t("回撤工作区，包括新文件"),f=t("从暂存区回撤某个文件"),k=t("恢复某个文件到 master 分支的状态(放弃本地修改)"),v=t("回退"),x=t("diff"),_=t("修改已提交信息"),w=t("改变本地分支名"),y=t("交互式添加，p - patch"),H=t("查看详细的修改记录"),S=t("查看其它分支的文件，而不必来回 checkout"),G=t("暂存并恢复，pop 是移除，将最近的 stash 移除并应用到当前工作目录"),E=t("查找提交记录"),q=t("更新 fork"),A=t("HTTPS 与 SSH"),D=t("创建新的平行空分支"),I=t("如何在不删除远程仓库的情况下，清空文件和提交记录"),O=t("跨平台换行问题"),N=t("显示全部分支信息"),R=t("提交修改内容（已存在文件）"),T=t("打标签 tag"),C=t("合并冲突"),U=t("检出指定分支指定文件"),j=t("删除分支"),z=t("修改优化历史提交信息"),M=t("干净比较 topic 分支和 master 分支"),B=t("合并策略优化，少走回头路"),$=t("对比工作区文件变化"),F=t("合并时可通过参数实现直接合并无意义的空格变动"),W=t("提交时显示所有 diff 信息"),L=t("暂存时排除文件或文件夹"),P=t("子模块"),Y=t("交互式合并其它分支某部分代码"),K=t("克隆指定分支"),J=t("移除大文件"),Q=t("合并其他分支的某条 commmit"),V=t("diff 导出"),X=t("patch"),Z=t("hub"),ee=t("成员管理"),ae=t("从别的 fork 拉取更新"),ne=t("本地 Git 设置多账户"),se=t("配置 SSH"),ie=t("为不同项目配置对应的 remote"),le=t("为不同项目配置对应的 email 和 name"),te=t("debug"),re=t("文件大小写重命名"),oe=t("git 仓库删除文件/夹，本地不删除"),ce=t("只是查看旧 commit，不要 reset"),de=t("意外 reset 了怎么办"),pe=t("部分提交"),ue=t("暂存某个文件"),he=t("zsh alias"),be=t("push 策略"),me=t("统计文件修改"),ge=t("git push"),fe=t("本地与远端不一致，重置到远端版本"),ke=t("何时删除旧分支"),ve=t("清理分支"),xe=t("上线流程"),_e=t("比较两个分支"),we=t("rebase"),ye=t("filemode change"),He=t("unadd"),Se=t("hooks"),Ge=t("三路合并"),Ee=t("显示未跟踪文件夹详情"),qe=t("分支比较"),Ae=t("Git GUI"),De=t("可选合并"),Ie=t("查看分支是否落后"),Oe=t("巨石仓库"),Ne=t("多个工作区"),Re={href:"https://learngitbranching.js.org/?demo=&locale=zh_CN",target:"_blank",rel:"noopener noreferrer"},Te=t("Learn Git Branching"),Ce=r('<h2 id="commit-提交规范" tabindex="-1"><a class="header-anchor" href="#commit-提交规范" aria-hidden="true">#</a> commit 提交规范</h2><ul><li>feat: 添加新功能</li><li>docs: 修改注释、文档</li><li>fix: 修复 bug</li><li>style: 修改代码格式，例如代码 lint 处理等代码风格处理，不能影响原功能</li><li>refactor: 重构代码，不能影响原功能</li><li>perf: 提升性能</li><li>test: 测试用例增删改</li><li>chore: (锁事的意思)工具操作，例如初始化脚本，启动脚本和代码校验脚本等等</li><li>deps: 依赖修改，例如升级、降级或锁死版本</li></ul><p><code>git fix -s &#39;scope&#39; &#39;msg&#39;</code></p>',3),Ue={href:"https://open.leancloud.cn/git-commit-message/",target:"_blank",rel:"noopener noreferrer"},je=t("LeanCloud 开放资源: Git Commit 日志风格指南"),ze=r('<p>尽量写有意义的 msg：</p><ul><li>如果不能用句子完整表达，就用关键字</li><li>改了不同的东西，要一起提交，主要的修改是什么</li><li>改的都是零碎点，msg 随意 fix minor</li></ul><h2 id="编码问题" tabindex="-1"><a class="header-anchor" href="#编码问题" aria-hidden="true">#</a> 编码问题</h2><p>找到报错的文件，运行<code>:w ++ff=unix</code></p><h2 id="协作中的注意事项" tabindex="-1"><a class="header-anchor" href="#协作中的注意事项" aria-hidden="true">#</a> 协作中的注意事项</h2><ul><li>commit 之前一定要 review，做 diff 检查</li><li>不要格式化别人的代码，只处理你的代码</li></ul><h2 id="回撤-commit-或取消暂存-保留工作区" tabindex="-1"><a class="header-anchor" href="#回撤-commit-或取消暂存-保留工作区" aria-hidden="true">#</a> 回撤 commit 或取消暂存，保留工作区</h2><p><code>$ git reset HEAD</code> [path]</p><p>回撤最近一个 <code>$ git reset HEAD~1</code></p><h2 id="回撤-commit-丢弃之后的修改-慎用-会撤销工作区" tabindex="-1"><a class="header-anchor" href="#回撤-commit-丢弃之后的修改-慎用-会撤销工作区" aria-hidden="true">#</a> 回撤 commit，丢弃之后的修改，慎用，会撤销工作区</h2><p><code>$ git reset HEAD --hard</code></p><h2 id="回撤工作区-包括新文件" tabindex="-1"><a class="header-anchor" href="#回撤工作区-包括新文件" aria-hidden="true">#</a> 回撤工作区，包括新文件</h2><p>先测试，以防误删 <code>git clean -nfd</code></p><p><code>git clean -fd</code></p><h2 id="从暂存区回撤某个文件" tabindex="-1"><a class="header-anchor" href="#从暂存区回撤某个文件" aria-hidden="true">#</a> 从暂存区回撤某个文件</h2><p><code>$ git reset HEAD CONTRIBUTING.md</code></p><h2 id="恢复某个文件到-master-分支的状态-放弃本地修改" tabindex="-1"><a class="header-anchor" href="#恢复某个文件到-master-分支的状态-放弃本地修改" aria-hidden="true">#</a> 恢复某个文件到 master 分支的状态(放弃本地修改)</h2><p><code>$ git checkout -- FILE-PATH</code></p><h2 id="回退" tabindex="-1"><a class="header-anchor" href="#回退" aria-hidden="true">#</a> 回退</h2><p><code>$ git revert commitID</code></p>',20),Me=t("revert a merge 需要让 git 知道保留哪个父主线 "),Be={href:"https://stackoverflow.com/questions/5970889/why-does-git-revert-complain-about-a-missing-m-option/5971033#5971033",target:"_blank",rel:"noopener noreferrer"},$e=t("github - Why does git revert complain about a missing -m option? - Stack Overflow"),Fe=r('<h2 id="diff" tabindex="-1"><a class="header-anchor" href="#diff" aria-hidden="true">#</a> diff</h2><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> <span class="token function">diff</span> 默认比较工作区变更\n<span class="token function">git</span> <span class="token function">diff</span> --staged 比较暂存区\n<span class="token function">git</span> <span class="token function">diff</span> HEAD\n<span class="token function">git</span> difftool\n<span class="token function">git</span> <span class="token function">diff</span> <span class="token operator">|</span> gitx\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>在提交前做 diff 检查，右侧打开新窗口查看变更，确认没问题后，在左侧窗口编写提交信息</p><h2 id="修改已提交信息" tabindex="-1"><a class="header-anchor" href="#修改已提交信息" aria-hidden="true">#</a> 修改已提交信息</h2><p><code>git commit --amend -m &#39;NEWMESSAGE&#39;</code></p><h2 id="改变本地分支名" tabindex="-1"><a class="header-anchor" href="#改变本地分支名" aria-hidden="true">#</a> 改变本地分支名</h2><p><code>git branch -m NEWNAME</code> 或者 <code>git branch -m old-branch new-branch</code></p><h2 id="交互式添加-p-patch" tabindex="-1"><a class="header-anchor" href="#交互式添加-p-patch" aria-hidden="true">#</a> 交互式添加，p - patch</h2><p><code>git add -p</code></p><h2 id="查看详细的修改记录" tabindex="-1"><a class="header-anchor" href="#查看详细的修改记录" aria-hidden="true">#</a> 查看详细的修改记录</h2><p><code>git log -p</code></p><h2 id="查看其它分支的文件-而不必来回-checkout" tabindex="-1"><a class="header-anchor" href="#查看其它分支的文件-而不必来回-checkout" aria-hidden="true">#</a> 查看其它分支的文件，而不必来回 checkout</h2><p><code>git show SOME-BRANCH:SOME-FILE</code></p><h2 id="暂存并恢复-pop-是移除-将最近的-stash-移除并应用到当前工作目录" tabindex="-1"><a class="header-anchor" href="#暂存并恢复-pop-是移除-将最近的-stash-移除并应用到当前工作目录" aria-hidden="true">#</a> 暂存并恢复，pop 是移除，将最近的 stash 移除并应用到当前工作目录</h2><p><code>git stash, then git stash pop/apply</code></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>git stash save &quot;my_stash&quot;\ngit stash list\ngit stash apply stash@{n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="查找提交记录" tabindex="-1"><a class="header-anchor" href="#查找提交记录" aria-hidden="true">#</a> 查找提交记录</h2><p><code>$ git log -S KEYWORD</code></p><h2 id="更新-fork" tabindex="-1"><a class="header-anchor" href="#更新-fork" aria-hidden="true">#</a> 更新 fork</h2><ol><li>添加上游 <code>git remote add upstream [repo]</code></li><li>拉取上游 <code>git fetch upstream</code></li><li>合并上游 <code>git merge upstream/master</code></li><li>有冲突的话，解决冲突并提交</li><li>最后，推送 <code>git push</code></li></ol><h2 id="https-与-ssh" tabindex="-1"><a class="header-anchor" href="#https-与-ssh" aria-hidden="true">#</a> HTTPS 与 SSH</h2><ul><li>用 HTTPS 操作必须要提供账号密码，如果是自己的电脑，应避免用这种方式</li><li>缓解方法是让 git 记忆密码，默认时间比较短 <code>git config --global credential.helper cache</code></li><li>控制超时时间，单位是秒，下面是缓存一周 <code>git config --global credential.helper &#39;cache --timeout=604800&#39;</code></li></ul><h2 id="创建新的平行空分支" tabindex="-1"><a class="header-anchor" href="#创建新的平行空分支" aria-hidden="true">#</a> 创建新的平行空分支</h2><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> symbolic-ref HEAD refs/heads/newbranch\n<span class="token function">rm</span> .git/index\n<span class="token function">git</span> clean -fdx\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="如何在不删除远程仓库的情况下-清空文件和提交记录" tabindex="-1"><a class="header-anchor" href="#如何在不删除远程仓库的情况下-清空文件和提交记录" aria-hidden="true">#</a> 如何在不删除远程仓库的情况下，清空文件和提交记录</h2><ul><li>比如现在 master 分支，改名<code>git branch -m 1.0</code></li><li>先推上去<code>git push origin 1.0</code></li><li>然后远程 master 还在，且是默认分支，这个时候不能直接删除</li><li>把默认分支改为 1.0，然后<code>git push --delete origin master</code></li><li>创建新的项目文件夹，设置好远程和分支信息即可</li></ul><h2 id="跨平台换行问题" tabindex="-1"><a class="header-anchor" href="#跨平台换行问题" aria-hidden="true">#</a> 跨平台换行问题</h2><p>项目目录下设置 .gitattributes</p><h2 id="显示全部分支信息" tabindex="-1"><a class="header-anchor" href="#显示全部分支信息" aria-hidden="true">#</a> 显示全部分支信息</h2><p><code>git branch -a</code></p><h2 id="提交修改内容-已存在文件" tabindex="-1"><a class="header-anchor" href="#提交修改内容-已存在文件" aria-hidden="true">#</a> 提交修改内容（已存在文件）</h2><p><code>git commit -a</code> 新增文件还是需要另外 add</p><h2 id="打标签-tag" tabindex="-1"><a class="header-anchor" href="#打标签-tag" aria-hidden="true">#</a> 打标签 tag</h2><ul><li>tag 是在本地的，除非你显式 push<div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> tag -a v1.2.4 -m <span class="token string">&quot;release 1.2.4&quot;</span>\n<span class="token comment"># 后面的 commit 信息最好写详细点</span>\n<span class="token function">git</span> push github --tags\n或 <span class="token function">git</span> push --tags\n<span class="token function">git</span> tag -d UNUSED-TAG\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li><li>根据 tag 查询 commit-id，回滚<div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>git tags\ngit show tag-name\ngit reset --hard commit-id\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li></ul><h2 id="合并冲突" tabindex="-1"><a class="header-anchor" href="#合并冲突" aria-hidden="true">#</a> 合并冲突</h2><p>比如维护 dotfiles ，有冲突时总是取 master</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> merge master\n\n<span class="token comment"># 提示合并冲突，此时，不去手动处理冲突，</span>\n\n<span class="token comment"># 检出选择 theirs 的冲突文件，再添加这个文件</span>\n\n<span class="token function">git</span> checkout --ours filename.c\n<span class="token function">git</span> checkout --theirs filename.c\n<span class="token function">git</span> <span class="token function">add</span> filename.c\n\n<span class="token comment"># 合并多个文件</span>\n\n<span class="token function">grep</span> -lr <span class="token string">&#39;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&#39;</span> <span class="token builtin class-name">.</span> <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token function">git</span> checkout --theirs\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h2 id="检出指定分支指定文件" tabindex="-1"><a class="header-anchor" href="#检出指定分支指定文件" aria-hidden="true">#</a> 检出指定分支指定文件</h2><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># On branch master</span>\n<span class="token function">git</span> checkout gh-pages\n<span class="token function">git</span> checkout master -- myplugin.js\n<span class="token function">git</span> commit -m <span class="token string">&quot;Update myplugin.js from master&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="删除分支" tabindex="-1"><a class="header-anchor" href="#删除分支" aria-hidden="true">#</a> 删除分支</h2><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> branch -d <span class="token operator">&lt;</span>branch_name<span class="token operator">&gt;</span>\n<span class="token function">git</span> push origin --delete <span class="token operator">&lt;</span>branch_name<span class="token operator">&gt;</span>\n// or\n<span class="token function">git</span> push origin :<span class="token operator">&lt;</span>branch_name<span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="修改优化历史提交信息" tabindex="-1"><a class="header-anchor" href="#修改优化历史提交信息" aria-hidden="true">#</a> 修改优化历史提交信息</h2><ul><li><code>git rebase -i</code></li><li>或合并开发分支后，软重置后再重新提交，<code>git reset xxx</code></li></ul><h2 id="干净比较-topic-分支和-master-分支" tabindex="-1"><a class="header-anchor" href="#干净比较-topic-分支和-master-分支" aria-hidden="true">#</a> 干净比较 topic 分支和 master 分支</h2><ol><li>新建三方合并分支 <code>$ git checkout -b trial_merge</code></li><li>合并 topic 分支 <code>$ git merge topic_branch</code></li><li>将 topic 分支与 master 比较 <code>$ git diff master</code></li><li>回到 master 并删除三方分支 <code>$ git checkout master &amp;&amp; git branch -D trial_merge</code></li></ol><h2 id="合并策略优化-少走回头路" tabindex="-1"><a class="header-anchor" href="#合并策略优化-少走回头路" aria-hidden="true">#</a> 合并策略优化，少走回头路</h2><p><code>git merge --ff-only // 只允许快进合并</code></p><h2 id="对比工作区文件变化" tabindex="-1"><a class="header-anchor" href="#对比工作区文件变化" aria-hidden="true">#</a> 对比工作区文件变化</h2><p><code>git diff branchName/commitNumber -- filepath [--staged]</code></p><h2 id="合并时可通过参数实现直接合并无意义的空格变动" tabindex="-1"><a class="header-anchor" href="#合并时可通过参数实现直接合并无意义的空格变动" aria-hidden="true">#</a> 合并时可通过参数实现直接合并无意义的空格变动</h2><h2 id="提交时显示所有-diff-信息" tabindex="-1"><a class="header-anchor" href="#提交时显示所有-diff-信息" aria-hidden="true">#</a> 提交时显示所有 diff 信息</h2><p><code>git commit -v</code></p><h2 id="暂存时排除文件或文件夹" tabindex="-1"><a class="header-anchor" href="#暂存时排除文件或文件夹" aria-hidden="true">#</a> 暂存时排除文件或文件夹</h2><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># for a file</span>\n<span class="token function">git</span> <span class="token function">add</span> -u\n<span class="token function">git</span> reset -- main/dontcheckmein.txt\n\n<span class="token comment"># for a folder</span>\n<span class="token function">git</span> <span class="token function">add</span> -u\n<span class="token function">git</span> reset -- main/*\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="子模块" tabindex="-1"><a class="header-anchor" href="#子模块" aria-hidden="true">#</a> 子模块</h2><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># 首次</span>\n<span class="token function">git</span> submodule <span class="token function">add</span> URL<span class="token punctuation">(</span>需要引入模块<span class="token punctuation">)</span>\n\n<span class="token comment"># 他人</span>\n<span class="token function">git</span> submodule init\n<span class="token function">git</span> submodule update\n\n<span class="token comment"># 维护</span>\n<span class="token function">git</span> submodule update --remote\n<span class="token function">git</span> <span class="token function">add</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>更新子模块后，需要在主项目下添加提交，这样别人才会有更新</p>',57),We={href:"https://www.vogella.com/tutorials/GitSubmodules/article.html",target:"_blank",rel:"noopener noreferrer"},Le=t("Using submodules in Git - Tutorial"),Pe=r('<p>子模块更新有两种方式</p><ol><li><code>git pull</code>主仓库记录的 id</li><li><code>update remote</code></li></ol><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> submodule update --init --recursive --remote BRANCH-NAME\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>更改子模块 URL</p><ol><li>修改 .gitmodules</li><li>同步到<code>.git/config</code></li></ol><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> submodule <span class="token function">sync</span>\n<span class="token function">git</span> submodule update --force --recursive --init --remote\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="交互式合并其它分支某部分代码" tabindex="-1"><a class="header-anchor" href="#交互式合并其它分支某部分代码" aria-hidden="true">#</a> 交互式合并其它分支某部分代码</h2><p><code>git checkout -p &lt;branch&gt; -- &lt;paths&gt; ...</code></p><h2 id="克隆指定分支" tabindex="-1"><a class="header-anchor" href="#克隆指定分支" aria-hidden="true">#</a> 克隆指定分支</h2><p><code>git clone -b &lt;branch&gt; &lt;remote_repo&gt;</code></p><h2 id="移除大文件" tabindex="-1"><a class="header-anchor" href="#移除大文件" aria-hidden="true">#</a> 移除大文件</h2>',11),Ye={href:"https://rtyley.github.io/bfg-repo-cleaner/",target:"_blank",rel:"noopener noreferrer"},Ke=t("BFG Repo-Cleaner by rtyley"),Je=r('<div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> clone --mirror git://example.com/some-big-repo.git\nbfg --strip-blobs-bigger-than 100M some-big-repo.git\n// or\n// bfg -D filename<span class="token punctuation">[</span>not path<span class="token punctuation">]</span>\n<span class="token builtin class-name">cd</span> some-big-repo.git\n<span class="token function">git</span> reflog expire --expire<span class="token operator">=</span>now --all <span class="token operator">&amp;&amp;</span> <span class="token function">git</span> gc --prune<span class="token operator">=</span>now --aggressive\n<span class="token function">git</span> push\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>超出 coding 容量限制，很多操作不能做了，比如 push 临时处理是在线上修改 解决是清空项目代码，重新上传移除过大文件的项目</p><h2 id="合并其他分支的某条-commmit" tabindex="-1"><a class="header-anchor" href="#合并其他分支的某条-commmit" aria-hidden="true">#</a> 合并其他分支的某条 commmit</h2><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> cherry-pick 584a2ef\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="diff-导出" tabindex="-1"><a class="header-anchor" href="#diff-导出" aria-hidden="true">#</a> diff 导出</h2><ul><li><p>创建两个 commits 的 patch <code>git diff COMMIT1 COMMIT2 &gt; patch.txt</code> 如果有在线管理，可直接查看 commit 的 diff 内容</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># dev1 exports unstaged changes</span>\n<span class="token function">git</span> <span class="token function">diff</span> <span class="token operator">&gt;</span> diff.patch\n\n<span class="token comment"># dev1 exports staged changes</span>\n<span class="token function">git</span> <span class="token function">diff</span> --staged <span class="token operator">&gt;</span> diff.patch\n\nSend patch <span class="token function">file</span> via Slack, etc<span class="token punctuation">..</span>.\n\n<span class="token comment"># dev2 applies changes from the patch file</span>\n<span class="token function">git</span> apply diff.patch\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div></li><li></li></ul><h2 id="patch" tabindex="-1"><a class="header-anchor" href="#patch" aria-hidden="true">#</a> patch</h2><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code># create patch\ngit format-patch -1 HEAD\n\n# show stats\ngit apply --stat file.patch\n\n# check error\ngit apply --check file.patch\n\n# apply the patch finally\ngit am &lt; file.patch\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="hub" tabindex="-1"><a class="header-anchor" href="#hub" aria-hidden="true">#</a> hub</h2><p>在 github 上新建仓库</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>brew <span class="token function">install</span> hub\nhub create -d <span class="token string">&quot;My new thing&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="成员管理" tabindex="-1"><a class="header-anchor" href="#成员管理" aria-hidden="true">#</a> 成员管理</h2><p>两个人可以操作同一个分支，三个人以上最好用特性分支</p><h2 id="从别的-fork-拉取更新" tabindex="-1"><a class="header-anchor" href="#从别的-fork-拉取更新" aria-hidden="true">#</a> 从别的 fork 拉取更新</h2><p>场景是别人 fork 了我的仓库，然后有更新，我想把那些更新合并的自己仓库，可能需要解决冲突 <code>git pull otherRepo branch</code></p><h2 id="本地-git-设置多账户" tabindex="-1"><a class="header-anchor" href="#本地-git-设置多账户" aria-hidden="true">#</a> 本地 Git 设置多账户</h2><h3 id="配置-ssh" tabindex="-1"><a class="header-anchor" href="#配置-ssh" aria-hidden="true">#</a> 配置 SSH</h3><p>编辑 <code>～/.ssh/config</code>，没有的话创建 Host 可看成别名，用作区分，后面要用 下面是我实际用的配置</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Host github-cyio\n    HostName        github.com\n    User            git\n    IdentityFile    /home/oops/.ssh/id_github\n\nHost osc-xid\n    HostName        git.oschina.net\n    User            git\n    IdentityFile    /home/oops/.ssh/id_rsa_oschina_xid\n\nHost osc-cyio\n    HostName        git.oschina.net\n    User            git\n    IdentityFile    /home/oops/.ssh/id_rsa\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h3 id="为不同项目配置对应的-remote" tabindex="-1"><a class="header-anchor" href="#为不同项目配置对应的-remote" aria-hidden="true">#</a> 为不同项目配置对应的 remote</h3><p>编辑<code>.git/config</code>，remote -&gt; url，设置为： <code>git@&lt;host-in-ssh-config&gt;:&lt;username&gt;/&lt;repo&gt;</code></p><p>或者用命令添加： <code>git remote set-url origin git@&lt;host-in-ssh-config&gt;:&lt;username&gt;/&lt;repo&gt;</code> 这是我实际添加的： <code>git remote set-url origin git@osc-cyio:cyio/os.git</code></p><h3 id="为不同项目配置对应的-email-和-name" tabindex="-1"><a class="header-anchor" href="#为不同项目配置对应的-email-和-name" aria-hidden="true">#</a> 为不同项目配置对应的 email 和 name</h3><p>取消 global</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>git config --global --unset user.name\ngit config --global --unset user.email\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>设置每个项目 repo 的自己的 user.email</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>git config  user.email &quot;xxxx@xx.com&quot;\ngit config  user.name &quot;suzie&quot;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',27),Qe=t("参考： "),Ve={href:"https://gist.github.com/jexchan/2351996",target:"_blank",rel:"noopener noreferrer"},Xe=t("Multiple SSH keys for different github accounts"),Ze={href:"http://m.oschina.net/blog/220158",target:"_blank",rel:"noopener noreferrer"},ea=t("如何在一台电脑上使用两个 git@osc 的账号进行操作"),aa=r('<h2 id="debug" tabindex="-1"><a class="header-anchor" href="#debug" aria-hidden="true">#</a> debug</h2><p><code>ssh -vv &quot;your githost&quot;</code>为什么要用这个，因为参数<code>-T</code>，即使返回成功，配置也可能不行（push 时还会问账密）</p><h2 id="文件大小写重命名" tabindex="-1"><a class="header-anchor" href="#文件大小写重命名" aria-hidden="true">#</a> 文件大小写重命名</h2><p>注意，不要用<code>git config core.ignorecase false</code>，mv &gt; git add 方式重名名后，分支无法直接合并</p><p>正确操作</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>git mv &lt;old name&gt; &lt;new name&gt;\ngit status\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>由于 git 对大小写不敏感，同名文件 git mv 时会提示错误<code>Invalid argument</code></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>git mv casesensitive tmp\ngit mv tmp CaseSensitive\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',8),na={href:"https://stackoverflow.com/questions/11183788/in-a-git-repository-how-to-properly-rename-a-directory/11183844",target:"_blank",rel:"noopener noreferrer"},sa=t("In a Git repository, how to properly rename a directory? - Stack Overflow"),ia=r('<h2 id="git-仓库删除文件-夹-本地不删除" tabindex="-1"><a class="header-anchor" href="#git-仓库删除文件-夹-本地不删除" aria-hidden="true">#</a> git 仓库删除文件/夹，本地不删除</h2><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code># For single file:\ngit rm --cached mylogfile.log\n\n# For single directory:\ngit rm --cached -r mydirectory\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="只是查看旧-commit-不要-reset" tabindex="-1"><a class="header-anchor" href="#只是查看旧-commit-不要-reset" aria-hidden="true">#</a> 只是查看旧 commit，不要 reset</h2><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>git checkout xxx\ngit checkout master # 根据你的分支名修改\n\ngit checkout HEAD^ # 检出前一个\ngit checkout HEAD~3 # 检出前三个\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="意外-reset-了怎么办" tabindex="-1"><a class="header-anchor" href="#意外-reset-了怎么办" aria-hidden="true">#</a> 意外 reset 了怎么办</h2><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>git reflog # 打印出 git 切换步骤记录\ngit reset HEAD@{1} # 根据步骤跳转\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="部分提交" tabindex="-1"><a class="header-anchor" href="#部分提交" aria-hidden="true">#</a> 部分提交</h2><p>可以反复按下面步骤操作：</p><ol><li>add 需要提交的文件或代码</li><li>暂存其余，以便测试将要提交代码，<code>-u untracked 包括新文件 -k 保持文件完整</code></li></ol><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>git add somefile\ngit stash -u -k\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="暂存某个文件" tabindex="-1"><a class="header-anchor" href="#暂存某个文件" aria-hidden="true">#</a> 暂存某个文件</h2><ul><li><code>git stash -p</code>，需要跳过某个更改，按<code>d</code>，能满足文件改动不多的情况</li></ul><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>git stash push -m welcome_cart app/views/cart/welcome.thtml\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li>stash 是略简化的 branch，所以直接用 branch 就好了</li></ul><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> checkout -b tmpbranch\n<span class="token function">git</span> <span class="token function">add</span> the_file\n<span class="token function">git</span> commit -m <span class="token string">&quot;stashing the_file&quot;</span>\n<span class="token function">git</span> checkout master\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>',15),la={href:"https://stackoverflow.com/questions/12420924/stash-just-a-single-file",target:"_blank",rel:"noopener noreferrer"},ta=t("git - Stash just a single file - Stack Overflow"),ra={href:"https://css-irl.info/how-git-stash-can-help-you-juggle-multiple-branches/",target:"_blank",rel:"noopener noreferrer"},oa=t("CSS { In Real Life } | How Git Stash Can Help You Juggle Multiple Branches"),ca=r('<h2 id="zsh-alias" tabindex="-1"><a class="header-anchor" href="#zsh-alias" aria-hidden="true">#</a> zsh alias</h2><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">v</span> ~/.oh-my-zsh/plugins/git/git.plugin.zsh\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="push-策略" tabindex="-1"><a class="header-anchor" href="#push-策略" aria-hidden="true">#</a> push 策略</h2>',3),da=t("git 默认是 simple 与 upstream 差不多，区别是不允许不同名推，防止新手覆盖 用 upstream 即可 "),pa={href:"http://thekaiway.com/2013/07/30/config-your-git-push-strategy/",target:"_blank",rel:"noopener noreferrer"},ua=t("配置 Git Push 策略 - The Kai Way"),ha=r('<ul><li>设置关联 <code>git branch --set-upstream-to=origin/YOUR_BRANCH YOUR_BRANCH</code>，最好新建分支后就执行，方便后续推拉</li></ul><h2 id="统计文件修改" tabindex="-1"><a class="header-anchor" href="#统计文件修改" aria-hidden="true">#</a> 统计文件修改</h2><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>git log --name-status\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="git-push" tabindex="-1"><a class="header-anchor" href="#git-push" aria-hidden="true">#</a> git push</h2><p>use “git push --force-with-lease” instead. It adds some safety in case a coworker pushed code you haven’t pulled</p><h2 id="本地与远端不一致-重置到远端版本" tabindex="-1"><a class="header-anchor" href="#本地与远端不一致-重置到远端版本" aria-hidden="true">#</a> 本地与远端不一致，重置到远端版本</h2><p>git pull after forced update 拉取强制更新过的代码</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>git fetch\ngit reset origin/dev --hard\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="何时删除旧分支" tabindex="-1"><a class="header-anchor" href="#何时删除旧分支" aria-hidden="true">#</a> 何时删除旧分支</h2><p>可以安全删除，如何分支包含未合并的代码，git 会阻止删除</p><p>列出未合并分支</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>git branch --no-merged\ngit branch --merged\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>建议打 tag，如果想加书签的话</p><h2 id="清理分支" tabindex="-1"><a class="header-anchor" href="#清理分支" aria-hidden="true">#</a> 清理分支</h2>',14),ba={href:"https://railsware.com/blog/2014/08/11/git-housekeeping-tutorial-clean-up-outdated-branches-in-local-and-remote-repositories/",target:"_blank",rel:"noopener noreferrer"},ma=t("Git housekeeping tutorial: clean-up outdated branches in local and remote repositories | Blog by Railsware"),ga=s("h2",{id:"上线流程",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#上线流程","aria-hidden":"true"},"#"),t(" 上线流程")],-1),fa={href:"https://blog.csdn.net/Hedy17/article/details/83084149",target:"_blank",rel:"noopener noreferrer"},ka=t("Git 开发分支代码上线流程 - 王静静的博客 - CSDN博客"),va={href:"https://www.git-tower.com/learn/git/ebook/cn/command-line/advanced-topics/git-flow",target:"_blank",rel:"noopener noreferrer"},xa=t("git-flow 的工作流程"),_a={href:"https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow",target:"_blank",rel:"noopener noreferrer"},wa=t("Gitflow Workflow | Atlassian Git Tutorial"),ya=r('<h2 id="比较两个分支" tabindex="-1"><a class="header-anchor" href="#比较两个分支" aria-hidden="true">#</a> 比较两个分支</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>git diff branch1 branch2 <span class="token operator">--</span>stat\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="rebase" tabindex="-1"><a class="header-anchor" href="#rebase" aria-hidden="true">#</a> rebase</h2><ul><li>pick, squash(合并到上一个), fixup(类似squash，但丢弃消息), edit, reword, and drop 重新排序、省略、合并或修改</li><li>尽量只 rebase 本地 commits，避免强制重写远程，他人需要重新合并 使用场景：</li><li>将多个提交折叠为单个提交</li><li>重新提交</li><li>删除您现在后悔的错误更改</li><li>将分支的基础移动到存储库中的任何其他提交。</li><li>修改单个提交，以在事后很久修改更改。</li></ul><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>brew install interactive-rebase-tool\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',5),Ha={href:"https://thoughtbot.com/blog/git-interactive-rebase-squash-amend-rewriting-history",target:"_blank",rel:"noopener noreferrer"},Sa=t("Git Interactive Rebase, Squash, Amend and Other Ways of Rewriting History"),Ga={href:"https://github.com/xitu/gold-miner/blob/master/TODO1/keeping-git-commit-history-clean.md",target:"_blank",rel:"noopener noreferrer"},Ea=t("gold-miner/keeping-git-commit-history-clean.md at master · xitu/gold-miner"),qa=s("h2",{id:"filemode-change",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#filemode-change","aria-hidden":"true"},"#"),t(" filemode change")],-1),Aa={href:"https://stackoverflow.com/a/44866012/5657916",target:"_blank",rel:"noopener noreferrer"},Da=t('git gui - How do I remove files saying "old mode 100755 new mode 100644" from unstaged changes in Git? - Stack Overflow'),Ia=r('<h2 id="unadd" tabindex="-1"><a class="header-anchor" href="#unadd" aria-hidden="true">#</a> unadd</h2><p>将改动从 index 移除 <code>git reset &lt;file&gt;</code> or <code>git reset</code></p><h2 id="hooks" tabindex="-1"><a class="header-anchor" href="#hooks" aria-hidden="true">#</a> hooks</h2><h2 id="三路合并" tabindex="-1"><a class="header-anchor" href="#三路合并" aria-hidden="true">#</a> 三路合并</h2><p>比如双方同时改了某一行，只能人工 review 合并</p><p>公共组先部分，作为参考，分辨改动</p>',6),Oa={href:"https://juejin.im/post/5c3e9de86fb9a049b5071413",target:"_blank",rel:"noopener noreferrer"},Na=t("【Mac】升级 Git 版本 - 掘金"),Ra={href:"https://stackoverflow.com/questions/27417656/should-diff3-be-default-conflictstyle-on-git",target:"_blank",rel:"noopener noreferrer"},Ta=t("git diff - Should diff3 be default conflictstyle on git? - Stack Overflow"),Ca={href:"https://zhuanlan.zhihu.com/p/78505692",target:"_blank",rel:"noopener noreferrer"},Ua=t("快速处理 git 合并冲突 - 知乎"),ja=r('<h2 id="显示未跟踪文件夹详情" tabindex="-1"><a class="header-anchor" href="#显示未跟踪文件夹详情" aria-hidden="true">#</a> 显示未跟踪文件夹详情</h2><p><code>git status --untracked-files=all</code></p><h2 id="分支比较" tabindex="-1"><a class="header-anchor" href="#分支比较" aria-hidden="true">#</a> 分支比较</h2><p>比较当前分支与 master</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> log origin/master<span class="token punctuation">..</span>HEAD --oneline --no-merges\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="git-gui" tabindex="-1"><a class="header-anchor" href="#git-gui" aria-hidden="true">#</a> Git GUI</h2><p>一行短命令，命令行更方便</p><p>复杂的操作如 merge，GUI 能提供比命令行大得多的信息密度</p><h2 id="可选合并" tabindex="-1"><a class="header-anchor" href="#可选合并" aria-hidden="true">#</a> 可选合并</h2>',9),za=t("场景，重构等改动较大，要合入 master "),Ma={href:"https://gist.github.com/katylava/564416",target:"_blank",rel:"noopener noreferrer"},Ba=t("git selective merge"),$a=r('<h2 id="查看分支是否落后" tabindex="-1"><a class="header-anchor" href="#查看分支是否落后" aria-hidden="true">#</a> 查看分支是否落后</h2><p>开始新迭代开发或上线前，都应该检查</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> rev-list --left-right --count origin/master<span class="token punctuation">..</span>.test-branch\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>输出 0 2，表示 test-branch 相对于 master 落后 0 commit，领先 2 commit</p>',4),Fa={href:"https://stackoverflow.com/questions/20433867/git-ahead-behind-info-between-master-and-branch",target:"_blank",rel:"noopener noreferrer"},Wa=t("github - git ahead/behind info between master and branch? - Stack Overflow"),La=r('<h2 id="巨石仓库" tabindex="-1"><a class="header-anchor" href="#巨石仓库" aria-hidden="true">#</a> 巨石仓库</h2><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> clone --depth <span class="token number">1</span> --no-single-branch\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="多个工作区" tabindex="-1"><a class="header-anchor" href="#多个工作区" aria-hidden="true">#</a> 多个工作区</h2><ul><li>可以避免来回 stash，污染工作区，丢失变更</li><li>避免克隆多个相同仓库</li></ul>',4),Pa={href:"https://zhuanlan.zhihu.com/p/92906230",target:"_blank",rel:"noopener noreferrer"},Ya=t("Git屠龙技：使用Git Worktree并行开发测试 - 知乎"),Ka={href:"https://jasonkayzk.github.io/2020/05/03/Git-Worktree%25E7%259A%2584%25E4%25BD%25BF%25E7%2594%25A8/",target:"_blank",rel:"noopener noreferrer"},Ja=t("Git Worktree的使用 - 张小凯的博客");o.render=function(t,r){const o=e("RouterLink"),Qa=e("OutboundLink");return a(),n(l,null,[c,s("nav",d,[s("ul",null,[s("li",null,[s(o,{to:"#commit-提交规范"},{default:i((()=>[p])),_:1})]),s("li",null,[s(o,{to:"#编码问题"},{default:i((()=>[u])),_:1})]),s("li",null,[s(o,{to:"#协作中的注意事项"},{default:i((()=>[h])),_:1})]),s("li",null,[s(o,{to:"#回撤-commit-或取消暂存-保留工作区"},{default:i((()=>[b])),_:1})]),s("li",null,[s(o,{to:"#回撤-commit-丢弃之后的修改-慎用-会撤销工作区"},{default:i((()=>[m])),_:1})]),s("li",null,[s(o,{to:"#回撤工作区-包括新文件"},{default:i((()=>[g])),_:1})]),s("li",null,[s(o,{to:"#从暂存区回撤某个文件"},{default:i((()=>[f])),_:1})]),s("li",null,[s(o,{to:"#恢复某个文件到-master-分支的状态-放弃本地修改"},{default:i((()=>[k])),_:1})]),s("li",null,[s(o,{to:"#回退"},{default:i((()=>[v])),_:1})]),s("li",null,[s(o,{to:"#diff"},{default:i((()=>[x])),_:1})]),s("li",null,[s(o,{to:"#修改已提交信息"},{default:i((()=>[_])),_:1})]),s("li",null,[s(o,{to:"#改变本地分支名"},{default:i((()=>[w])),_:1})]),s("li",null,[s(o,{to:"#交互式添加-p-patch"},{default:i((()=>[y])),_:1})]),s("li",null,[s(o,{to:"#查看详细的修改记录"},{default:i((()=>[H])),_:1})]),s("li",null,[s(o,{to:"#查看其它分支的文件-而不必来回-checkout"},{default:i((()=>[S])),_:1})]),s("li",null,[s(o,{to:"#暂存并恢复-pop-是移除-将最近的-stash-移除并应用到当前工作目录"},{default:i((()=>[G])),_:1})]),s("li",null,[s(o,{to:"#查找提交记录"},{default:i((()=>[E])),_:1})]),s("li",null,[s(o,{to:"#更新-fork"},{default:i((()=>[q])),_:1})]),s("li",null,[s(o,{to:"#https-与-ssh"},{default:i((()=>[A])),_:1})]),s("li",null,[s(o,{to:"#创建新的平行空分支"},{default:i((()=>[D])),_:1})]),s("li",null,[s(o,{to:"#如何在不删除远程仓库的情况下-清空文件和提交记录"},{default:i((()=>[I])),_:1})]),s("li",null,[s(o,{to:"#跨平台换行问题"},{default:i((()=>[O])),_:1})]),s("li",null,[s(o,{to:"#显示全部分支信息"},{default:i((()=>[N])),_:1})]),s("li",null,[s(o,{to:"#提交修改内容-已存在文件"},{default:i((()=>[R])),_:1})]),s("li",null,[s(o,{to:"#打标签-tag"},{default:i((()=>[T])),_:1})]),s("li",null,[s(o,{to:"#合并冲突"},{default:i((()=>[C])),_:1})]),s("li",null,[s(o,{to:"#检出指定分支指定文件"},{default:i((()=>[U])),_:1})]),s("li",null,[s(o,{to:"#删除分支"},{default:i((()=>[j])),_:1})]),s("li",null,[s(o,{to:"#修改优化历史提交信息"},{default:i((()=>[z])),_:1})]),s("li",null,[s(o,{to:"#干净比较-topic-分支和-master-分支"},{default:i((()=>[M])),_:1})]),s("li",null,[s(o,{to:"#合并策略优化-少走回头路"},{default:i((()=>[B])),_:1})]),s("li",null,[s(o,{to:"#对比工作区文件变化"},{default:i((()=>[$])),_:1})]),s("li",null,[s(o,{to:"#合并时可通过参数实现直接合并无意义的空格变动"},{default:i((()=>[F])),_:1})]),s("li",null,[s(o,{to:"#提交时显示所有-diff-信息"},{default:i((()=>[W])),_:1})]),s("li",null,[s(o,{to:"#暂存时排除文件或文件夹"},{default:i((()=>[L])),_:1})]),s("li",null,[s(o,{to:"#子模块"},{default:i((()=>[P])),_:1})]),s("li",null,[s(o,{to:"#交互式合并其它分支某部分代码"},{default:i((()=>[Y])),_:1})]),s("li",null,[s(o,{to:"#克隆指定分支"},{default:i((()=>[K])),_:1})]),s("li",null,[s(o,{to:"#移除大文件"},{default:i((()=>[J])),_:1})]),s("li",null,[s(o,{to:"#合并其他分支的某条-commmit"},{default:i((()=>[Q])),_:1})]),s("li",null,[s(o,{to:"#diff-导出"},{default:i((()=>[V])),_:1})]),s("li",null,[s(o,{to:"#patch"},{default:i((()=>[X])),_:1})]),s("li",null,[s(o,{to:"#hub"},{default:i((()=>[Z])),_:1})]),s("li",null,[s(o,{to:"#成员管理"},{default:i((()=>[ee])),_:1})]),s("li",null,[s(o,{to:"#从别的-fork-拉取更新"},{default:i((()=>[ae])),_:1})]),s("li",null,[s(o,{to:"#本地-git-设置多账户"},{default:i((()=>[ne])),_:1}),s("ul",null,[s("li",null,[s(o,{to:"#配置-ssh"},{default:i((()=>[se])),_:1})]),s("li",null,[s(o,{to:"#为不同项目配置对应的-remote"},{default:i((()=>[ie])),_:1})]),s("li",null,[s(o,{to:"#为不同项目配置对应的-email-和-name"},{default:i((()=>[le])),_:1})])])]),s("li",null,[s(o,{to:"#debug"},{default:i((()=>[te])),_:1})]),s("li",null,[s(o,{to:"#文件大小写重命名"},{default:i((()=>[re])),_:1})]),s("li",null,[s(o,{to:"#git-仓库删除文件-夹-本地不删除"},{default:i((()=>[oe])),_:1})]),s("li",null,[s(o,{to:"#只是查看旧-commit-不要-reset"},{default:i((()=>[ce])),_:1})]),s("li",null,[s(o,{to:"#意外-reset-了怎么办"},{default:i((()=>[de])),_:1})]),s("li",null,[s(o,{to:"#部分提交"},{default:i((()=>[pe])),_:1})]),s("li",null,[s(o,{to:"#暂存某个文件"},{default:i((()=>[ue])),_:1})]),s("li",null,[s(o,{to:"#zsh-alias"},{default:i((()=>[he])),_:1})]),s("li",null,[s(o,{to:"#push-策略"},{default:i((()=>[be])),_:1})]),s("li",null,[s(o,{to:"#统计文件修改"},{default:i((()=>[me])),_:1})]),s("li",null,[s(o,{to:"#git-push"},{default:i((()=>[ge])),_:1})]),s("li",null,[s(o,{to:"#本地与远端不一致-重置到远端版本"},{default:i((()=>[fe])),_:1})]),s("li",null,[s(o,{to:"#何时删除旧分支"},{default:i((()=>[ke])),_:1})]),s("li",null,[s(o,{to:"#清理分支"},{default:i((()=>[ve])),_:1})]),s("li",null,[s(o,{to:"#上线流程"},{default:i((()=>[xe])),_:1})]),s("li",null,[s(o,{to:"#比较两个分支"},{default:i((()=>[_e])),_:1})]),s("li",null,[s(o,{to:"#rebase"},{default:i((()=>[we])),_:1})]),s("li",null,[s(o,{to:"#filemode-change"},{default:i((()=>[ye])),_:1})]),s("li",null,[s(o,{to:"#unadd"},{default:i((()=>[He])),_:1})]),s("li",null,[s(o,{to:"#hooks"},{default:i((()=>[Se])),_:1})]),s("li",null,[s(o,{to:"#三路合并"},{default:i((()=>[Ge])),_:1})]),s("li",null,[s(o,{to:"#显示未跟踪文件夹详情"},{default:i((()=>[Ee])),_:1})]),s("li",null,[s(o,{to:"#分支比较"},{default:i((()=>[qe])),_:1})]),s("li",null,[s(o,{to:"#git-gui"},{default:i((()=>[Ae])),_:1})]),s("li",null,[s(o,{to:"#可选合并"},{default:i((()=>[De])),_:1})]),s("li",null,[s(o,{to:"#查看分支是否落后"},{default:i((()=>[Ie])),_:1})]),s("li",null,[s(o,{to:"#巨石仓库"},{default:i((()=>[Oe])),_:1})]),s("li",null,[s(o,{to:"#多个工作区"},{default:i((()=>[Ne])),_:1})])])]),s("p",null,[s("a",Re,[Te,s(Qa)])]),Ce,s("p",null,[s("a",Ue,[je,s(Qa)])]),ze,s("p",null,[Me,s("a",Be,[$e,s(Qa)])]),Fe,s("p",null,[s("a",We,[Le,s(Qa)])]),Pe,s("p",null,[s("a",Ye,[Ke,s(Qa)])]),Je,s("p",null,[Qe,s("a",Ve,[Xe,s(Qa)]),s("a",Ze,[ea,s(Qa)])]),aa,s("p",null,[s("a",na,[sa,s(Qa)])]),ia,s("p",null,[s("a",la,[ta,s(Qa)]),s("a",ra,[oa,s(Qa)])]),ca,s("p",null,[da,s("a",pa,[ua,s(Qa)])]),ha,s("p",null,[s("a",ba,[ma,s(Qa)])]),ga,s("p",null,[s("a",fa,[ka,s(Qa)])]),s("p",null,[s("a",va,[xa,s(Qa)])]),s("p",null,[s("a",_a,[wa,s(Qa)])]),ya,s("p",null,[s("a",Ha,[Sa,s(Qa)]),s("a",Ga,[Ea,s(Qa)])]),qa,s("p",null,[s("a",Aa,[Da,s(Qa)])]),Ia,s("p",null,[s("a",Oa,[Na,s(Qa)]),s("a",Ra,[Ta,s(Qa)]),s("a",Ca,[Ua,s(Qa)])]),ja,s("p",null,[za,s("a",Ma,[Ba,s(Qa)])]),$a,s("p",null,[s("a",Fa,[Wa,s(Qa)])]),La,s("p",null,[s("a",Pa,[Ya,s(Qa)]),s("a",Ka,[Ja,s(Qa)])])],64)};export default o;
