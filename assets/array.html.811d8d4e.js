import{r as n,o as s,c as a,a as p,w as t,F as e,b as o,d as c}from"./app.31fc93bc.js";const l={},u=p("h1",{id:"数组-array",tabindex:"-1"},[p("a",{class:"header-anchor",href:"#数组-array","aria-hidden":"true"},"#"),o(" 数组 Array")],-1),r={class:"table-of-contents"},i=o("独有 length 属性"),k=o("查找"),b=o("字符串表示"),m=o("由已有数组创建新数组"),d=o("添加"),f=o("删除"),h=o("中间插入"),g=o("替换"),v=o("当 replaceValue 是字符串时，美元符有特殊作用"),y=o("类数组转换"),w=o("分解处理（归并）"),x=o("迭代方法"),j=o("排序"),_=o("处理方法分辨"),A=o("综合练习"),I=o("复制 vuex 数组"),O=o("数组复制的 n 种方法（按性能排序）"),D=o("from 数组生成"),J=o("移动元素位置"),E=o("跳出循环"),L=o("副作用方法"),S=o("源码及实现"),V=c('<h2 id="独有-length-属性" tabindex="-1"><a class="header-anchor" href="#独有-length-属性" aria-hidden="true">#</a> 独有 length 属性</h2><p>设置更大的 length 值，不会分配更多空间，设置较小的 length 值，会把等于大于新 length 值的属性删掉。</p><h2 id="查找" tabindex="-1"><a class="header-anchor" href="#查找" aria-hidden="true">#</a> 查找</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;David&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Raymond&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;John&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;David&#39;</span><span class="token punctuation">]</span>\nnames<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;David&#39;</span><span class="token punctuation">)</span> <span class="token comment">// number 返回第一个 index，-1 时不存在</span>\n\nnames<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&#39;David&#39;</span><span class="token punctuation">)</span> <span class="token comment">// boolean</span>\n\nnames<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token parameter">name</span> <span class="token operator">=&gt;</span> name <span class="token operator">!==</span> <span class="token string">&#39;Mike&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 满足条件的第一个 value，都不满足时返回 undefined</span>\n\n<span class="token comment">// filter 全部 find 出来，不过不能找出全部 index，filter 的 return 只会作为测试条件。只能写个循环处理</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">findAllIndex</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> name</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>arr<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n  <span class="token keyword">let</span> remain <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>arr<span class="token punctuation">]</span>\n  <span class="token keyword">while</span><span class="token punctuation">(</span>remain<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> ind <span class="token operator">=</span> remain<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>\n    result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>ind<span class="token punctuation">)</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>ind <span class="token operator">===</span> remain<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">break</span>\n    remain <span class="token operator">=</span> remain<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>ind <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> result\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n<span class="token keyword">const</span> names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;David&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Raymond&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;John&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;David&#39;</span><span class="token punctuation">]</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">findAllIndex</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>arr<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n  <span class="token keyword">let</span> remain <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>arr<span class="token punctuation">]</span>\n  <span class="token keyword">while</span><span class="token punctuation">(</span>remain<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> targetIndex <span class="token operator">=</span> remain<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span>\n    result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span> \n      <span class="token operator">?</span> targetIndex <span class="token operator">+</span> result<span class="token punctuation">[</span>result<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token comment">// 不做这一步，得到的是 remain 中的 index 位置</span>\n      <span class="token operator">:</span> targetIndex<span class="token punctuation">)</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>targetIndex <span class="token operator">===</span> remain<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">break</span> <span class="token comment">// 不是必须，slice 超限后返回空数组</span>\n    remain <span class="token operator">=</span> remain<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>targetIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> result\n<span class="token punctuation">}</span>\n\n<span class="token keyword">let</span> r <span class="token operator">=</span> <span class="token function">findAllIndex</span><span class="token punctuation">(</span>names<span class="token punctuation">,</span> <span class="token string">&#39;David&#39;</span><span class="token punctuation">)</span> <span class="token comment">// expect [0, 3]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><h2 id="字符串表示" tabindex="-1"><a class="header-anchor" href="#字符串表示" aria-hidden="true">#</a> 字符串表示</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 默认连接符是逗号</span>\nnames<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\nnames<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="由已有数组创建新数组" tabindex="-1"><a class="header-anchor" href="#由已有数组创建新数组" aria-hidden="true">#</a> 由已有数组创建新数组</h2><p><code>concat</code>合并多个数组创建为一个新数组 <code>splice</code>截取一个数组的子集创建一个新数组（有副作用，不推荐）</p><p>push 把数组参数当作单个元素追加，并返回 length，而 concat 是分别追加，返回新数组，不改变原数组。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\narr<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="添加" tabindex="-1"><a class="header-anchor" href="#添加" aria-hidden="true">#</a> 添加</h2><p><code>push() unshift()</code></p><h2 id="删除" tabindex="-1"><a class="header-anchor" href="#删除" aria-hidden="true">#</a> 删除</h2><p><code>shift pop</code> 转移，取出</p><ul><li>分别删除并返回数组的第一个和最后一个元素</li><li>数组为空时不操作，返回 undifined</li></ul><h2 id="中间插入" tabindex="-1"><a class="header-anchor" href="#中间插入" aria-hidden="true">#</a> 中间插入</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span>\n<span class="token keyword">let</span> insert <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span>\nnums<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> insert<span class="token punctuation">)</span> <span class="token comment">// print 1, 2, 3, [Array] ...</span>\nnums<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token comment">// print 1, 2, 3, 4, 5, 6 ...</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="替换" tabindex="-1"><a class="header-anchor" href="#替换" aria-hidden="true">#</a> 替换</h2><h3 id="当-replacevalue-是字符串时-美元符有特殊作用" tabindex="-1"><a class="header-anchor" href="#当-replacevalue-是字符串时-美元符有特殊作用" aria-hidden="true">#</a> 当 replaceValue 是字符串时，美元符有特殊作用</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// $` 和 $&#39; 分别表示searchValue之前和之后的内容`</span>\n<span class="token comment">// $$ 转义自身</span>\n\n<span class="token string">&#39;firefox&#39;</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&#39;re&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;$`&#39;</span><span class="token punctuation">)</span> <span class="token comment">// &quot;fififox&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="类数组转换" tabindex="-1"><a class="header-anchor" href="#类数组转换" aria-hidden="true">#</a> 类数组转换</h2><p>DOM 数组本质上不是 Array，是 NodeList。 你可以通过<code>Array.prototype.slice.call(nodeList, 0)</code>把节点全部复制到 Array 再操作。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">$A</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 相当于 [].slice.call(obj)</span>\n  <span class="token keyword">return</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// Example usage:</span>\n$<span class="token constant">A</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n<span class="token comment">// ES6 新增方法，支持 string/map/set</span>\nArray<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>arrayLike<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div>',24),$={href:"https://shifteleven.com/articles/2007/06/28/array-like-objects-in-javascript/",target:"_blank",rel:"noopener noreferrer"},N=o("Array-like Objects in JavaScript | ShiftEleven"),M=o(" 使用示例： 把 document 等方法获取的节点列表转换成数组，然后用 forEach 等数组方法处理 "),q={href:"http://codepen.io/wesbos/pen/zrLjYq",target:"_blank",rel:"noopener noreferrer"},B=o("A Pen by Wes Bos"),F={href:"https://toddmotto.com/ditch-the-array-foreach-call-nodelist-hack/",target:"_blank",rel:"noopener noreferrer"},P=o("Ditch the [].forEach.call(NodeList) hack"),R=c('<h2 id="分解处理-归并" tabindex="-1"><a class="header-anchor" href="#分解处理-归并" aria-hidden="true">#</a> 分解处理（归并）</h2><p><code>array.reduce(处理函数(累加值，当前值)，初始值)</code></p><ul><li><p>每<code>reduce</code>一次，把累加值和当前值作为参数传入处理函数</p></li><li><p>初始值可选，没有时使用数组的第一个值作为初始值，并从第二个值开始累加。<strong>即从第二位开始累加</strong></p></li><li><p>替代<code>filter</code>加<code>map</code>，<code>filter</code>可以在<code>reduce</code>中用<code>if</code>替代</p></li><li><p>不好想，最直观把每次运算写下来</p></li><li><p>适用限于关联运算，如<code>+``*</code>，其它用途有不明确参数、隐式意图等问题</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// values 表示剩余参数，由第一个参数外的的值构成的数组</span>\n<span class="token comment">// 只有一个参数时，values 是空数组</span>\n<span class="token keyword">const</span> <span class="token function-variable function">sum</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">init <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">...</span>values</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>\n  values<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">acc<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> acc <span class="token operator">+</span> value<span class="token punctuation">,</span> init<span class="token punctuation">)</span>\n<span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>\n\n<span class="token comment">// 求和</span>\n<span class="token comment">// 1. for</span>\n<span class="token keyword">let</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>\n<span class="token keyword">let</span> total <span class="token operator">=</span> <span class="token number">0</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  total <span class="token operator">+=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span>\n<span class="token comment">// 2. reduce</span>\n<span class="token keyword">let</span> total <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">pre<span class="token punctuation">,</span> cur</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> pre <span class="token operator">+</span> cur<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n<span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token parameter">i</span> <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>注意问的是 x，不是 reduce 结果。注意 push 返回的是 length</p></li></ul>',3),T={href:"https://javascript.info/array-methods",target:"_blank",rel:"noopener noreferrer"},z=o("Array methods"),G={href:"https://www.artima.com/weblogs/viewpost.jsp?thread=98196",target:"_blank",rel:"noopener noreferrer"},H=o("The fate of reduce() in Python 3000"),W=c('<h2 id="迭代方法" tabindex="-1"><a class="header-anchor" href="#迭代方法" aria-hidden="true">#</a> 迭代方法</h2><ol><li>是想知道是否满足条件，还是需要满足条件的数据？</li><li>部分满足，还是全部？ every() 全真时返回真 some() 或真 filter() 真数组，以上是做布尔值判断，与 map 的主要不同 map() 结果数组 forEach() 遍历运行指定函数，无返回值，有副作用，不推荐</li></ol><h2 id="排序" tabindex="-1"><a class="header-anchor" href="#排序" aria-hidden="true">#</a> 排序</h2><ul><li><code>arr.sort([compareFunction])</code> 默认的比较函数会将比较元素视为字符串，所以通常要传入自定义比较函数</li><li>number 上两位数就不准了，需要传入 compare function</li><li>compareFunction(a, b) 要求返回与 0 进行比较，<code>result &gt; 0</code> 时，输出<code>b a</code>。也就是，默认是升序。</li><li>undefined 总会排到最后，符合预期</li><li>null 需要注意</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span>\n  <span class="token punctuation">{</span>\n    name<span class="token operator">:</span> <span class="token string">&#39;Apple&#39;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    name<span class="token operator">:</span> <span class="token string">&#39;Google&#39;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    name<span class="token operator">:</span> <span class="token string">&#39;Baidu&#39;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>\n  arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>\n    <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a<span class="token punctuation">.</span>name <span class="token operator">&gt;</span> b<span class="token punctuation">.</span>name <span class="token comment">// 字母顺序</span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">88</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">-</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 为什么这里不能写成 a &gt; b，因为返回布尔值，然后布尔值跟 0 比较，false &lt; 0，于是 20 排在 10 前面</span>\n\n<span class="token comment">// a &gt; b 正确写法</span>\narr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 默认升序，所以 a &lt; b，a 在前</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;</span> b<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&gt;</span> b<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span> <span class="token comment">// 调换</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">===</span> b<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div>',5),Y={href:"https://philna.sh/blog/2019/08/26/how-not-to-sort-an-array-in-javascript/",target:"_blank",rel:"noopener noreferrer"},C=o("How not to sort an array in JavaScript | Phil Nash"),K=c('<h2 id="处理方法分辨" tabindex="-1"><a class="header-anchor" href="#处理方法分辨" aria-hidden="true">#</a> 处理方法分辨</h2><p>slice 切片，浅复制 {起点，终点(不含)} 可用负数表示倒数（最后一位是 -1，也就是数组中只有一个 0） splice 拼接，{起点，裁切个数，插入项}，返回裁切内容（会修改原数组，不推荐使用）</p><ul><li>只写起点，不写剪切个数，会从起点起全部剪切</li></ul><ul><li><p>slice 详解 起点和结束点，都可以省略，相当于完整复制 只有一个参数时，是起点</p></li><li><p>都可以按需返回指定数组的指定范围</p></li><li><p>区别前者是浅复制</p></li><li><p>而后者会修改原数组，相当于剪切</p></li><li><p>后者比前者多个字母 p，拼接/替换的意思</p></li><li><p>对象的属性名必须是字符串，数组的索引在内部也会被转换为字符串，如 let arr = [&#39;alice&#39;] arr[&#39;0&#39;]</p></li></ul><h2 id="综合练习" tabindex="-1"><a class="header-anchor" href="#综合练习" aria-hidden="true">#</a> 综合练习</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// map</span>\n<span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>\n<span class="token keyword">const</span> <span class="token function-variable function">map</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> fn</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> newArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    newArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">fn</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> newArr\n<span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">map</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token parameter">x</span> <span class="token operator">=&gt;</span> x <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n<span class="token comment">// filter</span>\n<span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>\n<span class="token keyword">const</span> <span class="token function-variable function">filter</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> fn</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> newArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">fn</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      newArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> newArr\n<span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">filter</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token parameter">x</span> <span class="token operator">=&gt;</span> x <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 给定一个数组，求数组里面奇数的平方和</span>\n<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>\n\n<span class="token keyword">const</span> result <span class="token operator">=</span> arr\n  <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> x <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> x <span class="token operator">*</span> x<span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">+</span> y<span class="token punctuation">)</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>\n\n<span class="token keyword">let</span> <span class="token function-variable function">first</span> <span class="token operator">=</span> <span class="token parameter">word</span> <span class="token operator">=&gt;</span> word<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>\n<span class="token keyword">let</span> words <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;for&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;your&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;information&#39;</span><span class="token punctuation">]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>words<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br></div></div><h2 id="复制-vuex-数组" tabindex="-1"><a class="header-anchor" href="#复制-vuex-数组" aria-hidden="true">#</a> 复制 vuex 数组</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>computed<span class="token operator">:</span> <span class="token punctuation">{</span>\n  <span class="token function">league</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>league\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token function">filterItems</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> items <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>league<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">league</span> <span class="token operator">=&gt;</span> league<span class="token punctuation">.</span>matches<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>filterMatch<span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>\n    <span class="token comment">// deep clone vuex array</span>\n    items <span class="token operator">=</span> items<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">b<span class="token punctuation">,</span> idx</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span> index<span class="token operator">:</span> idx <span class="token punctuation">}</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token keyword">return</span> items<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      item<span class="token punctuation">.</span>matches <span class="token operator">=</span> item<span class="token punctuation">.</span>matches<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>filterMatch<span class="token punctuation">)</span>\n      <span class="token keyword">return</span> item\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h2 id="数组复制的-n-种方法-按性能排序" tabindex="-1"><a class="header-anchor" href="#数组复制的-n-种方法-按性能排序" aria-hidden="true">#</a> 数组复制的 n 种方法（按性能排序）</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;Jon&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Jacob&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Jeff&#39;</span><span class="token punctuation">]</span>\n\n<span class="token keyword">const</span> copy1 <span class="token operator">=</span> names<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> copy2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>names<span class="token punctuation">)</span>\n<span class="token keyword">const</span> copy3 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span>names<span class="token punctuation">)</span>\n<span class="token keyword">const</span> copy4 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>names<span class="token punctuation">]</span>\n<span class="token keyword">const</span> copy5 <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token operator">...</span>names<span class="token punctuation">)</span>\n<span class="token keyword">const</span> copy6 <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>names<span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> copy7 <span class="token operator">=</span> names<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">i</span> <span class="token operator">=&gt;</span> i<span class="token punctuation">)</span>\n<span class="token keyword">const</span> copy8 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> names<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="from-数组生成" tabindex="-1"><a class="header-anchor" href="#from-数组生成" aria-hidden="true">#</a> from 数组生成</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 生成 6 - 24，v 初始值是 undefined</span>\nArray<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">{</span> length<span class="token operator">:</span> <span class="token number">19</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">v<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> i <span class="token operator">+</span> <span class="token number">6</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="移动元素位置" tabindex="-1"><a class="header-anchor" href="#移动元素位置" aria-hidden="true">#</a> 移动元素位置</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>\n\n<span class="token keyword">function</span> <span class="token function">move</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> oldIndex<span class="token punctuation">,</span> newIndex</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>arr<span class="token punctuation">]</span> <span class="token comment">// 不改变原数组</span>\n  <span class="token keyword">const</span> newValue <span class="token operator">=</span> arr<span class="token punctuation">[</span>newIndex<span class="token punctuation">]</span>\n  <span class="token keyword">const</span> <span class="token punctuation">[</span>oldValue<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>oldIndex<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>\n  arr<span class="token punctuation">[</span>newIndex <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> oldValue\n  arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>newIndex <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> newValue<span class="token punctuation">)</span>\n  <span class="token keyword">return</span> arr\n<span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">move</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="跳出循环" tabindex="-1"><a class="header-anchor" href="#跳出循环" aria-hidden="true">#</a> 跳出循环</h2><ul><li>代码简短，用 for 配合 break</li><li>代码较长，建议定义变量标记</li></ul><h2 id="副作用方法" tabindex="-1"><a class="header-anchor" href="#副作用方法" aria-hidden="true">#</a> 副作用方法</h2><p>splice | sort | reverse</p><h2 id="源码及实现" tabindex="-1"><a class="header-anchor" href="#源码及实现" aria-hidden="true">#</a> 源码及实现</h2>',19);l.render=function(o,c){const l=n("RouterLink"),Q=n("OutboundLink");return s(),a(e,null,[u,p("nav",r,[p("ul",null,[p("li",null,[p(l,{to:"#独有-length-属性"},{default:t((()=>[i])),_:1})]),p("li",null,[p(l,{to:"#查找"},{default:t((()=>[k])),_:1})]),p("li",null,[p(l,{to:"#字符串表示"},{default:t((()=>[b])),_:1})]),p("li",null,[p(l,{to:"#由已有数组创建新数组"},{default:t((()=>[m])),_:1})]),p("li",null,[p(l,{to:"#添加"},{default:t((()=>[d])),_:1})]),p("li",null,[p(l,{to:"#删除"},{default:t((()=>[f])),_:1})]),p("li",null,[p(l,{to:"#中间插入"},{default:t((()=>[h])),_:1})]),p("li",null,[p(l,{to:"#替换"},{default:t((()=>[g])),_:1}),p("ul",null,[p("li",null,[p(l,{to:"#当-replacevalue-是字符串时-美元符有特殊作用"},{default:t((()=>[v])),_:1})])])]),p("li",null,[p(l,{to:"#类数组转换"},{default:t((()=>[y])),_:1})]),p("li",null,[p(l,{to:"#分解处理-归并"},{default:t((()=>[w])),_:1})]),p("li",null,[p(l,{to:"#迭代方法"},{default:t((()=>[x])),_:1})]),p("li",null,[p(l,{to:"#排序"},{default:t((()=>[j])),_:1})]),p("li",null,[p(l,{to:"#处理方法分辨"},{default:t((()=>[_])),_:1})]),p("li",null,[p(l,{to:"#综合练习"},{default:t((()=>[A])),_:1})]),p("li",null,[p(l,{to:"#复制-vuex-数组"},{default:t((()=>[I])),_:1})]),p("li",null,[p(l,{to:"#数组复制的-n-种方法-按性能排序"},{default:t((()=>[O])),_:1})]),p("li",null,[p(l,{to:"#from-数组生成"},{default:t((()=>[D])),_:1})]),p("li",null,[p(l,{to:"#移动元素位置"},{default:t((()=>[J])),_:1})]),p("li",null,[p(l,{to:"#跳出循环"},{default:t((()=>[E])),_:1})]),p("li",null,[p(l,{to:"#副作用方法"},{default:t((()=>[L])),_:1})]),p("li",null,[p(l,{to:"#源码及实现"},{default:t((()=>[S])),_:1})])])]),V,p("p",null,[p("a",$,[N,p(Q)]),M,p("a",q,[B,p(Q)]),p("a",F,[P,p(Q)])]),R,p("p",null,[p("a",T,[z,p(Q)]),p("a",G,[H,p(Q)])]),W,p("p",null,[p("a",Y,[C,p(Q)])]),K],64)};export default l;
