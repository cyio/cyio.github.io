import{_ as p,r as t,o as e,c as o,a as n,b as c,F as l,e as u,d as s}from"./app.a812d536.js";const r={},i=u(`<h1 id="\u6DF1\u62F7\u8D1D" tabindex="-1"><a class="header-anchor" href="#\u6DF1\u62F7\u8D1D" aria-hidden="true">#</a> \u6DF1\u62F7\u8D1D</h1><p>\u4F18\u5316\u70B9\uFF1A\u5229\u7528 proxy \u76D1\u542C\u6570\u636E\u53D8\u5316\uFF0C\u4EC5\u5BF9\u53D8\u5316\u7684\u5C5E\u6027\u8FDB\u884C\u6DF1\u62F7\u8D1D\uFF08immer\uFF0C\u589E\u91CF\uFF09</p><p>for in \u53EF\u4EE5\u904D\u5386\u6570\u7EC4</p><p>\u5BF9\u8C61\u5FAA\u73AF\u5F15\u7528\u4E0D\u5904\u7406\uFF0C\u4F1A\u5BFC\u81F4\u6808\u6EA2\u51FA\uFF0C\u89E3\u51B3\u662F\u4EE5 obj \u4E3A key\uFF0CnewObj \u4E3A value\uFF0C\u4FDD\u5B58\u5230 map\u3002\u904D\u5386\u8FC7\u76F4\u63A5\u8FD4\u56DE</p><p>\u5FAA\u73AF\u5F15\u7528\u662F\u6307\u5F15\u7528\u81EA\u8EAB\uFF1F</p><p>Map =&gt; WeakMap</p><p>\u8003\u5BDF\u70B9\uFF1A</p><ul><li>\u5BF9\u8C61\u904D\u5386</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// \u5B9E\u73B0\u5BF9\u8C61\u6DF1\u62F7\u8D1D\uFF0C\u8003\u5BDF\u70B9\uFF1AisObject for-in \u9012\u5F52</span>
<span class="token comment">// \u7B80\u5316\uFF0C\u4E0D\u8003\u8651\u6570\u7EC4</span>
  <span class="token keyword">let</span> a1 <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token literal-property property">d</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">e</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token literal-property property">e</span><span class="token operator">:</span> <span class="token keyword">null</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  a1<span class="token punctuation">.</span>f <span class="token operator">=</span> a1

  <span class="token keyword">function</span> <span class="token function">shallowClone</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      result<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> obj<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> result
  <span class="token punctuation">}</span>
  <span class="token keyword">function</span> <span class="token function">isObject</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&#39;[object Object]&#39;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">function</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> res <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token comment">// \u5904\u7406\u5FAA\u73AF\u5F15\u7528</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isObject</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
      map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> res<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">in</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> cur <span class="token operator">=</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
      <span class="token comment">// res[i] = Array.isArray(cur) || isObject(cur) ? deepClone(cur, map) : cur</span>
      res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">isObject</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span>
          <span class="token operator">?</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>cur<span class="token punctuation">,</span> map<span class="token punctuation">)</span> 
          <span class="token operator">:</span> cur
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> res
  <span class="token punctuation">}</span>

  <span class="token keyword">let</span> a2 <span class="token operator">=</span> <span class="token function">shallowClone</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span>
  <span class="token keyword">let</span> a3 <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span>

  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;object shallowClone&#39;</span><span class="token punctuation">,</span> a1<span class="token punctuation">.</span>b<span class="token punctuation">.</span>c <span class="token operator">===</span> a2<span class="token punctuation">.</span>b<span class="token punctuation">.</span>c<span class="token punctuation">)</span>    <span class="token comment">// expect true</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;object deepClone&#39;</span><span class="token punctuation">,</span> a1<span class="token punctuation">.</span>b<span class="token punctuation">.</span>c <span class="token operator">===</span> a3<span class="token punctuation">.</span>b<span class="token punctuation">.</span>c<span class="token punctuation">)</span>    <span class="token comment">// expect false</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;array shallowClone&#39;</span><span class="token punctuation">,</span> a1<span class="token punctuation">.</span>b<span class="token punctuation">.</span>d <span class="token operator">===</span> a2<span class="token punctuation">.</span>b<span class="token punctuation">.</span>d<span class="token punctuation">)</span>    <span class="token comment">// expect true</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;array deepClone&#39;</span><span class="token punctuation">,</span> a1<span class="token punctuation">.</span>b<span class="token punctuation">.</span>d <span class="token operator">===</span> a3<span class="token punctuation">.</span>b<span class="token punctuation">.</span>d<span class="token punctuation">)</span>    <span class="token comment">// expect false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br></div></div>`,9),k={href:"https://juejin.cn/post/6844903929705136141",target:"_blank",rel:"noopener noreferrer"},b=s("\u5982\u4F55\u5199\u51FA\u4E00\u4E2A\u60CA\u8273\u9762\u8BD5\u5B98\u7684\u6DF1\u62F7\u8D1D?"),m=n("h2",{id:"structuredclone",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#structuredclone","aria-hidden":"true"},"#"),s(" structuredClone")],-1),d=n("p",null,"navive api, chrome99+",-1),y=n("ul",null,[n("li",null,"\u652F\u6301\u590D\u6742\u6570\u636E\u7C7B\u578B\uFF0C\u5982\u51FD\u6570\u3001\u65E5\u671F\u548C\u6B63\u5219\u8868\u8FBE\u5F0F"),n("li")],-1),f=n("p",null,[n("img",{src:"https://img.oaker.bid/?url=http://ww2.sinaimg.cn/large/4e5d3ea7ly1h1qa6yfkagj21uo1uotr7.jpg",alt:"image.png"})],-1);function h(w,_){const a=t("ExternalLinkIcon");return e(),o(l,null,[i,n("p",null,[n("a",k,[b,c(a)])]),m,d,y,f],64)}var j=p(r,[["render",h],["__file","deep-clone.html.vue"]]);export{j as default};
