import{r as n,o as e,c as a,a as s,w as l,F as o,b as r,d as t}from"./app.31fc93bc.js";const p={},i=s("h1",{id:"chrome-devtools",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#chrome-devtools","aria-hidden":"true"},"#"),r(" Chrome-DevTools")],-1),c={class:"table-of-contents"},u=r("debug"),d=r("断点类型，最常用的是代码行，还有事件侦听器、异常等"),h=r("console"),b=r("network"),m=r("playground"),g=r("code editor"),k=t('<h2 id="debug" tabindex="-1"><a class="header-anchor" href="#debug" aria-hidden="true">#</a> debug</h2><ul><li>选项：恢复脚本执行，跳过下一个函数调用，进入函数，跳出当前函数</li><li>按键，用组合键更好按</li><li>对断点行，watch 监视表达式，console 打印求值</li><li>scope 值可编辑，不用离开 DevTools 就能看修正效果</li><li>监视表达式，观察值的变化</li><li>保存看效果</li></ul><h3 id="断点类型-最常用的是代码行-还有事件侦听器、异常等" tabindex="-1"><a class="header-anchor" href="#断点类型-最常用的是代码行-还有事件侦听器、异常等" aria-hidden="true">#</a> 断点类型，最常用的是代码行，还有事件侦听器、异常等</h3><p>常用功能：</p><ul><li>跳过行（步进）</li><li>跳入函数</li><li>跳出函数</li><li>继续到此（右键） <img src="http://ww1.sinaimg.cn/mw690/4e5d3ea7ly1gu3r6h0a0tj20ph0bugsl.jpg" alt="image.png"></li></ul>',5),v={href:"https://javascript.info/debugging-chrome",target:"_blank",rel:"noopener noreferrer"},f=r("Debugging in the browser"),w={href:"https://developer.chrome.com/docs/devtools/javascript/reference/",target:"_blank",rel:"noopener noreferrer"},y=r("JavaScript debugging reference - Chrome Developers"),E={href:"https://justcode.ikeepstudying.com/2018/09/chrome%25E8%25AE%25BE%25E7%25BD%25AE%25E6%2596%25AD%25E7%2582%25B9%25E7%259A%2584%25E5%2590%2584%25E7%25A7%258D%25E5%25A7%25BF%25E5%258A%25BF-js%25E6%2596%25AD%25E7%2582%25B9%25E8%25B0%2583%25E8%25AF%2595%25E5%25BF%2583%25E5%25BE%2597-chrome-devtools-%25E4%25B8%25AD%25E8%25B0%2583%25E8%25AF%2595-javascrip/",target:"_blank",rel:"noopener noreferrer"},j=r("Chrome设置断点的各种姿势, js断点调试心得, Chrome DevTools 中调试 JavaScript 入门 - Just Code"),x={href:"https://developers.google.com/web/tools/chrome-devtools/javascript/breakpoints?hl=zh-cn#exceptions",target:"_blank",rel:"noopener noreferrer"},A=r("使用断点暂停代码  |  Tools for Web Developers  |  Google Developers"),D=t('<h2 id="console" tabindex="-1"><a class="header-anchor" href="#console" aria-hidden="true">#</a> console</h2><ul><li>console 中打印出 fetch 内容<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">await</span> a<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li></ul>',2),B={href:"https://www.html.cn/doc/chrome-devtools/",target:"_blank",rel:"noopener noreferrer"},_=r("Chrome 开发者工具中文文档-在线手册-html 中文网"),C=t('<ul><li><p>在 console 中复制对象 （比如 echarts 开发）</p><ol><li>在 vue 里</li></ol><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>  <span class="token function">mounted</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    window<span class="token punctuation">.</span>myObject <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>options\n  <span class="token punctuation">}</span>\n<span class="token comment">// copy(JSON.stringify(window.myObject))</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ol start="2"><li><code>copy(JSON.stringify(myObject))</code> 缺点是函数会被丢掉</li></ol></li><li><p>可以通过在函数中插入 console.count(&#39;执行次数&#39;) 来观察重复执行的情况</p></li></ul><h2 id="network" tabindex="-1"><a class="header-anchor" href="#network" aria-hidden="true">#</a> network</h2>',2),F=s("li",null,[s("p",null,"在开启开发工具下，长按刷新按钮出现菜单，Empty Cache And Hard Reload 强制全部请求走网络，模拟新客访问")],-1),O=s("li",null,[s("p",null,"点击截图，查看当时请求状态")],-1),R=s("li",null,[s("p",null,"cmd + 点击，同时查看多种资源")],-1),J=s("li",null,[s("p",null,[r("过滤 "),s("code",null,"-method:OPTIONS")])],-1),S=s("li",null,[s("p",null,[r("隐藏来自扩展请求 "),s("code",null,"-scheme:chrome-extension")])],-1),T=s("p",null,"XAR 导出 录制、然后网络上右键",-1),H={href:"https://www.inflectra.com/support/knowledgebase/kb254.aspx",target:"_blank",rel:"noopener noreferrer"},I=r("How to generate a HAR file in Chrome or Firefox - KB254 - In"),N=s("li",null,[s("p",null,"Replay XHR 重放请求，不必刷新页面")],-1),L=t('<h2 id="playground" tabindex="-1"><a class="header-anchor" href="#playground" aria-hidden="true">#</a> playground</h2><p>可以巧用 snippets 作 playground，快速调试代码</p><p>放在 IIFE 里，使代码可反复运行</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>copy\nopen(url)\nawait fetch(url)\n(await fetch(url).status\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>vue render 错误，不好定位，可以定位查看编译后的代码</p><h2 id="code-editor" tabindex="-1"><a class="header-anchor" href="#code-editor" aria-hidden="true">#</a> code editor</h2><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Control+M 跳转到匹配括号\nCommand+D 选中光标所在\nCommand+U 上个位置\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>',8);p.render=function(r,t){const p=n("RouterLink"),X=n("OutboundLink");return e(),a(o,null,[i,s("nav",c,[s("ul",null,[s("li",null,[s(p,{to:"#debug"},{default:l((()=>[u])),_:1}),s("ul",null,[s("li",null,[s(p,{to:"#断点类型-最常用的是代码行-还有事件侦听器、异常等"},{default:l((()=>[d])),_:1})])])]),s("li",null,[s(p,{to:"#console"},{default:l((()=>[h])),_:1})]),s("li",null,[s(p,{to:"#network"},{default:l((()=>[b])),_:1})]),s("li",null,[s(p,{to:"#playground"},{default:l((()=>[m])),_:1})]),s("li",null,[s(p,{to:"#code-editor"},{default:l((()=>[g])),_:1})])])]),k,s("p",null,[s("a",v,[f,s(X)]),s("a",w,[y,s(X)]),s("a",E,[j,s(X)]),s("a",x,[A,s(X)])]),D,s("p",null,[s("a",B,[_,s(X)])]),C,s("ul",null,[F,O,R,J,S,s("li",null,[T,s("p",null,[s("a",H,[I,s(X)])])]),N]),L],64)};export default p;
