import{_ as e,r as o,o as c,c as l,a as n,b as t,F as u,e as s,d as p}from"./app.1fa60dd9.js";const r={},k=s(`<h1 id="\u5B57\u7B26\u9006\u5E8F-\u7FFB\u8F6C\u5B57\u7B26\u4E32" tabindex="-1"><a class="header-anchor" href="#\u5B57\u7B26\u9006\u5E8F-\u7FFB\u8F6C\u5B57\u7B26\u4E32" aria-hidden="true">#</a> \u5B57\u7B26\u9006\u5E8F/\u7FFB\u8F6C\u5B57\u7B26\u4E32</h1><p>\u4E0D\u80FD\u7528\u6570\u7EC4\u7684 reverse\uFF0C\u53EF\u4EE5\u9006\u5E8F\u904D\u5386</p><p>\u8FD9\u91CC\u7EC3\u4E60\u5C06\u5FAA\u73AF\u6539\u5199\u4E3A\u9012\u5F52</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token comment">//   function reverseStr(str) {</span>
<span class="token comment">//     let ans = &#39;&#39;</span>
<span class="token comment">//     for (let i = str.length - 1; i &gt; -1; i--) {</span>
<span class="token comment">//       ans += str[i]</span>
<span class="token comment">//     }</span>
<span class="token comment">//     return ans</span>
<span class="token comment">//   }</span>
  <span class="token keyword">function</span> <span class="token function">reverseStr</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> str
    <span class="token keyword">return</span> <span class="token function">reverseStr</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">reverseStr</span><span class="token punctuation">(</span><span class="token string">&#39;a b cd&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token comment">// bcd a </span>
  <span class="token comment">// cd ba</span>
  <span class="token comment">// d cba</span>
</code></pre></div><p>\u53D8\u79CD\uFF0C\u8F93\u5165\u6574\u5F62\u6570\u5B57\uFF0C\u8F93\u51FA\u5B57\u7B26\u4E32</p><div class="language-javascript ext-js"><pre class="language-javascript"><code>  <span class="token keyword">function</span> <span class="token function">revert</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> str
    <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">revert</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> str<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">let</span> r <span class="token operator">=</span> <span class="token function">revert</span><span class="token punctuation">(</span><span class="token string">&#39;4321&#39;</span><span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>
</code></pre></div>`,6),i={href:"https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/153#issuecomment-508535870",target:"_blank",rel:"noopener noreferrer"},d=p("\u7B2C 99 \u9898\uFF1A\u7F16\u7A0B\u7B97\u6CD5\u9898 \xB7 Issue #153 \xB7 Advanced-Frontend/Daily-Interview-Question"),m=s(`<p>\u9012\u5F52\u5B9E\u73B0 sum</p><div class="language-javascript ext-js"><pre class="language-javascript"><code>  <span class="token keyword">const</span> <span class="token function-variable function">sum</span> <span class="token operator">=</span> <span class="token parameter">arr</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span>
    <span class="token comment">// return arr.pop() + sum(arr) // \u4F1A\u4FEE\u6539\u539F\u6570\u7EC4</span>
    <span class="token keyword">return</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token function">sum</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre></div>`,2),g={href:"https://github.com/azl397985856/leetcode/blob/master/thinkings/dynamic-programming.md",target:"_blank",rel:"noopener noreferrer"},f=p("\u9012\u5F52\u548C\u52A8\u6001\u89C4\u5212 leetcode/dynamic-programming.md at master \xB7 azl397985856/leetcode"),h=s(`<h2 id="\u8FC7\u6EE4" tabindex="-1"><a class="header-anchor" href="#\u8FC7\u6EE4" aria-hidden="true">#</a> \u8FC7\u6EE4</h2><p>\u5B57\u7B26\u4E32\u8FC7\u6EE4\u6570\u5B57\u52A0\u53CD\u8F6C\uFF0C\u6B63\u5219\u65B9\u6CD5</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token comment">// \u5B57\u7B26\u4E32\u53EF\u4EE5\u914D\u5408 \u6B63\u5219 g \u6807\u8BC6\uFF0C\u8F93\u51FA\u6240\u6709\u7B26\u5408\u6761\u4EF6\u7684\u503C\u7684\u6570\u7EC4</span>
<span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&#39;a1b2ccd&#39;</span>
str<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[a-z]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>

<span class="token comment">// or \u66F4\u597D\u8BBF\u95EE\u6355\u83B7\u5206\u7EC4</span>
<span class="token keyword">let</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>str<span class="token punctuation">.</span><span class="token function">matchAll</span><span class="token punctuation">(</span>regexp<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre></div>`,3);function v(b,_){const a=o("ExternalLinkIcon");return c(),l(u,null,[k,n("p",null,[n("a",i,[d,t(a)])]),m,n("p",null,[n("a",g,[f,t(a)])]),h],64)}var x=e(r,[["render",v],["__file","reverse-str.html.vue"]]);export{x as default};
